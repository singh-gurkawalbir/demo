diff --git a/package-lock.json b/package-lock.json
index c025721..0803bd8 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -8977,7 +8977,7 @@
       "dev": true
     },
     "integrator-ui-forms": {
-      "version": "git+ssh://git@github.com/celigo/integrator-ui-forms.git#aa0ef4a8e7eeb404bfe46e7250f994ca0a69e937",
+      "version": "git+ssh://git@github.com/celigo/integrator-ui-forms.git#f5ae782050cd1fdcd382ce451f9b2f058b68f6d6",
       "from": "git+ssh://git@github.com/celigo/integrator-ui-forms.git"
     },
     "internal-ip": {
@@ -15769,9 +15769,9 @@
       "integrity": "sha512-iIjKnRThI5sKPEASpUvySemjzwqwI13e3qP7oLub+FycCRDysLSAOwt958niZW6LhxfmS6Qm1BzbU70w/Koc4w=="
     },
     "redux-saga-requests": {
-      "version": "0.23.1",
-      "resolved": "https://registry.npmjs.org/redux-saga-requests/-/redux-saga-requests-0.23.1.tgz",
-      "integrity": "sha512-PWwFCnM1Kjh/IKc3O44NKPOxHIOePTzeGh3GPVhMzcOSnhmpBxEKaX7+I00Q4RY7hrPQ82Rd4dA5rPN78tPl7A==",
+      "version": "0.23.0",
+      "resolved": "https://registry.npmjs.org/redux-saga-requests/-/redux-saga-requests-0.23.0.tgz",
+      "integrity": "sha512-SzXYASx1AHC76Y6z6oTYoeYKnzH3yNtcOWAvKPTaOG0/pi1AvHOIDBC95oyrXmta9MfkbJl5fE41XIfzxRM14g==",
       "requires": {
         "@babel/runtime": "^7.2.0",
         "@redux-saga/delay-p": "1.0.0-rc.0"
diff --git a/package.json b/package.json
index 499835c..eee5fcf 100644
--- a/package.json
+++ b/package.json
@@ -29,7 +29,7 @@
     "retainLines": true
   },
   "scripts": {
-    "start": "neutrino start --require dotenv/config --options.config.devtool source-map",
+    "start": "neutrino start --require dotenv/config --options.config.devtool eval-source-map",
     "build": "neutrino build --require dotenv/config",
     "lint": "neutrino lint  --require dotenv/config",
     "test": "neutrino test --require dotenv/config --verbose",
@@ -47,6 +47,7 @@
     "error-stack-parser": "2.0.2",
     "fast-json-patch": "2.0.7",
     "integrator-ui-forms": "git+ssh://git@github.com/celigo/integrator-ui-forms.git",
+    "isomorphic-fetch": "^2.2.1",
     "lodash": "4.17.11",
     "mdi-react": "5.2.0",
     "prop-types": "15.6.2",
diff --git a/src/App/AppBar/AccountList/index.jsx b/src/App/AppBar/AccountList/index.jsx
index 56e274e..023c203 100644
--- a/src/App/AppBar/AccountList/index.jsx
+++ b/src/App/AppBar/AccountList/index.jsx
@@ -71,24 +71,31 @@ const mapDispatchToProps = dispatch => ({
 class AccountList extends Component {
   state = {
     anchorEl: null,
+    open: false,
   };
 
   accountArrowRef = React.createRef();
 
-  handleClick = event => {
-    this.setState({
-      anchorEl: !this.state.anchorEl ? event.currentTarget : null,
-    });
+  handleClick = () => {
+    // console.log('handleClick');
+    this.setState(state => ({
+      open: !state.open,
+    }));
   };
 
   handleClose = () => {
-    this.setState({ anchorEl: null });
+    this.setState({ open: false });
   };
 
+  componentDidMount() {
+    this.setState({
+      anchorEl: this.accountArrowRef.current,
+    });
+  }
+
   render() {
-    const { anchorEl } = this.state;
+    const { open, anchorEl } = this.state;
     const { classes, accounts, onAccountChange } = this.props;
-    const open = !!anchorEl;
 
     if (!accounts || accounts.length < 2) {
       // when user is part of only one org, no need to show the accounts
diff --git a/src/actions/index.js b/src/actions/index.js
index 184ef38..250b975 100644
--- a/src/actions/index.js
+++ b/src/actions/index.js
@@ -11,6 +11,9 @@ function action(type, payload = {}) {
   return { type, ...payload };
 }
 
+const apiWatcher = {
+  request: request => action(actionTypes.API_WATCHER, { request }),
+};
 const auth = {
   request: (email, password) =>
     action(actionTypes.AUTH_REQUEST, { email, password }),
@@ -63,6 +66,14 @@ const resource = {
     action(actionTypes.RESOURCE.STAGE_CONFLICT, { conflict, id }),
 
   clearConflict: id => action(actionTypes.RESOURCE.CLEAR_CONFLICT, { id }),
+  connections: {
+    testConnection: (connection, resourceType, resourceId) =>
+      action(actionTypes.TEST_CONNECTION, {
+        connection,
+        resourceType,
+        resourceId,
+      }),
+  },
 };
 const ashares = {
   receivedCollection: ashares =>
@@ -99,6 +110,7 @@ const user = {
       action(actionTypes.UPDATE_PREFERENCES, { preferences }),
   },
 };
+const cancelTask = () => action(actionTypes.CANCEL_TASK, {});
 const patchFilter = (name, filter) =>
   action(actionTypes.PATCH_FILTER, { name, filter });
 const clearFilter = name => action(actionTypes.CLEAR_FILTER, { name });
@@ -125,6 +137,8 @@ const editor = {
 // #endregion
 
 export default {
+  apiWatcher,
+  cancelTask,
   clearComms,
   patchFilter,
   clearFilter,
diff --git a/src/actions/types.js b/src/actions/types.js
index 0002a26..21546b8 100644
--- a/src/actions/types.js
+++ b/src/actions/types.js
@@ -12,7 +12,8 @@ export const REQUEST = 'REQUEST';
 export const REQUEST_COLLECTION = 'REQUEST_COLLECTION';
 export const RECEIVED = 'RECEIVED';
 export const RECEIVED_COLLECTION = 'RECEIVED_COLLECTION';
-
+const CANCEL_TASK = 'CANCEL_TASK';
+const TEST_CONNECTION = 'TEST_CONNECTION';
 const STAGE_PATCH = 'STAGE_PATCH';
 const STAGE_CLEAR = 'STAGE_CLEAR';
 const STAGE_UNDO = 'STAGE_UNDO';
@@ -21,6 +22,7 @@ const STAGE_CONFLICT = 'STAGE_CONFLICT';
 const CLEAR_CONFLICT = 'CLEAR_CONFLICT';
 // The API_* action types below are used for managing network activity.
 // Typically this set of actions are only dispatched in Redux Sagas.
+const API_WATCHER = 'API_WATCHER';
 const API_REQUEST = 'API_REQUEST';
 const API_COMPLETE = 'API_COMPLETE';
 const API_RETRY = 'API_RETRY';
@@ -74,6 +76,9 @@ const REQUEST_LICENSE_UPGRADE = 'REQUEST_LICENSE_UPGRADE';
 const LICENSE_UPGRADE_REQUEST_SUBMITTED = 'LICENSE_UPGRADE_REQUEST_SUBMITTED';
 
 export default {
+  API_WATCHER,
+  CANCEL_TASK,
+  TEST_CONNECTION,
   UPDATE_PROFILE,
   UPDATE_PREFERENCES,
   USER_CHANGE_PASSWORD,
diff --git a/src/components/AFE/CsvParseEditor/Dialog.jsx b/src/components/AFE/CsvParseEditor/Dialog.jsx
index 9b16a44..99f9788 100644
--- a/src/components/AFE/CsvParseEditor/Dialog.jsx
+++ b/src/components/AFE/CsvParseEditor/Dialog.jsx
@@ -10,7 +10,7 @@ export default class CsvParseEditorDialog extends Component {
       height: '50vh',
       open: true,
     };
-    const dialogProps = { ...defaults, ...other };
+    const dialogProps = Object.assign({}, defaults, other);
 
     return (
       <EditorDialog
diff --git a/src/components/AFE/ErrorGridItem.jsx b/src/components/AFE/ErrorGridItem.jsx
index 8c4fa66..9b4f0b9 100644
--- a/src/components/AFE/ErrorGridItem.jsx
+++ b/src/components/AFE/ErrorGridItem.jsx
@@ -9,7 +9,7 @@ import CodePanel from './GenericEditor/CodePanel';
     border: `solid 1px ${theme.editor.panelBorder}`,
     overflow: 'hidden',
     minWidth: '150px',
-    minHeight: '100px',
+    minHeight: '120px',
     gridArea: 'error',
     marginBottom: theme.spacing.double,
   },
diff --git a/src/components/AFE/PanelGridItem.jsx b/src/components/AFE/PanelGridItem.jsx
index fe72b19..9e6bcc7 100644
--- a/src/components/AFE/PanelGridItem.jsx
+++ b/src/components/AFE/PanelGridItem.jsx
@@ -7,7 +7,7 @@ import { withStyles } from '@material-ui/core/styles';
     border: `solid 1px ${theme.editor.panelBorder}`,
     overflow: 'hidden',
     minWidth: '150px',
-    minHeight: '70px',
+    minHeight: '100px',
   },
   flexContainer: {
     display: 'flex',
diff --git a/src/components/AFE/UrlEditor/Dialog.jsx b/src/components/AFE/UrlEditor/Dialog.jsx
index 06b763b..f764a26 100644
--- a/src/components/AFE/UrlEditor/Dialog.jsx
+++ b/src/components/AFE/UrlEditor/Dialog.jsx
@@ -7,7 +7,7 @@ export default class UrlEditorDialog extends Component {
     const defaults = {
       open: true,
       width: '70vw',
-      height: '55vh',
+      height: '50vh',
     };
     const { id, rule, data, ...other } = this.props;
     const props = Object.assign({}, defaults, other);
diff --git a/src/components/AFE/UrlEditor/index.jsx b/src/components/AFE/UrlEditor/index.jsx
index d6980c3..68bfded 100644
--- a/src/components/AFE/UrlEditor/index.jsx
+++ b/src/components/AFE/UrlEditor/index.jsx
@@ -4,9 +4,9 @@ import Editor from '../HandlebarsEditor';
 
 @withStyles(() => ({
   gridTemplate: {
-    gridTemplateColumns: '1fr',
-    gridTemplateRows: '1fr 1fr 2fr 0fr',
-    gridTemplateAreas: '"rule" "result" "data" "error"',
+    gridTemplateColumns: '2fr 1fr',
+    gridTemplateRows: '2fr 1fr 0fr',
+    gridTemplateAreas: '"rule data" "result data" "error error"',
   },
 }))
 export default class UrlEditor extends Component {
diff --git a/src/components/AFE/XmlParseEditor/XmlParsePanel.jsx b/src/components/AFE/XmlParseEditor/XmlParsePanel.jsx
index 6023e16..c0027ea 100644
--- a/src/components/AFE/XmlParseEditor/XmlParsePanel.jsx
+++ b/src/components/AFE/XmlParseEditor/XmlParsePanel.jsx
@@ -3,14 +3,10 @@ import { connect } from 'react-redux';
 import FormGroup from '@material-ui/core/FormGroup';
 import FormControlLabel from '@material-ui/core/FormControlLabel';
 import Checkbox from '@material-ui/core/Checkbox';
-import Typography from '@material-ui/core/Typography';
-import Radio from '@material-ui/core/Radio';
-import RadioGroup from '@material-ui/core/RadioGroup';
 import TextField from '@material-ui/core/TextField';
 import { withStyles } from '@material-ui/core/styles';
 import actions from '../../../actions';
 import * as selectors from '../../../reducers';
-import helpTextMap from '../../../components/Help/helpTextMap';
 
 const mapStateToProps = (state, { editorId }) => ({
   editor: selectors.editor(state, editorId),
@@ -22,9 +18,6 @@ const mapDispatchToProps = (dispatch, { editorId }) => ({
 });
 
 @withStyles(theme => ({
-  helpText: {
-    whiteSpace: 'pre-line',
-  },
   container: {
     padding: '10px',
     backgroundColor: theme.palette.background.default,
@@ -43,7 +36,7 @@ class XmlParsePanel extends Component {
   render() {
     const { editor, patchEditor, classes } = this.props;
     const {
-      advanced = false,
+      leanJson = false,
       trimSpaces = false,
       stripNewLineChars = false,
       textNodeName,
@@ -56,43 +49,18 @@ class XmlParsePanel extends Component {
 
     return (
       <div className={classes.container}>
-        <FormGroup>
-          <TextField
-            label="Resource path"
-            placeholder="none"
-            multiline
-            rowsMax={4}
-            className={classes.textField}
-            defaultValue={resourcePath || ''}
-            InputLabelProps={{
-              shrink: true,
-            }}
-            onChange={e => patchEditor('resourcePath', e.target.value)}
-          />
-          <RadioGroup
-            row
-            onChange={() => {
-              patchEditor('advanced', !advanced);
-            }}>
-            {['Advanced', 'Simple'].map(label => (
-              <FormControlLabel
-                key={label}
-                control={
-                  <Radio
-                    checked={label === 'Advanced' ? advanced : !advanced}
-                  />
-                }
-                label={label}
+        <FormGroup column="true">
+          <FormControlLabel
+            control={
+              <Checkbox
+                onChange={() => {
+                  patchEditor('leanJson', !leanJson);
+                }}
               />
-            ))}
-          </RadioGroup>
-
-          {!advanced && (
-            <Typography variant="caption" className={classes.helpText}>
-              {helpTextMap['editor.xml.simple']}
-            </Typography>
-          )}
-          {advanced && (
+            }
+            label="Lean JSON"
+          />
+          {leanJson && (
             <Fragment>
               <FormControlLabel
                 control={
@@ -176,6 +144,18 @@ class XmlParsePanel extends Component {
                 }}
                 onChange={e => patchEditor('excludeNodes', e.target.value)}
               />
+              <TextField
+                label="Resource path"
+                placeholder="none"
+                multiline
+                rowsMax={4}
+                className={classes.textField}
+                defaultValue={resourcePath || ''}
+                InputLabelProps={{
+                  shrink: true,
+                }}
+                onChange={e => patchEditor('resourcePath', e.target.value)}
+              />
             </Fragment>
           )}
         </FormGroup>
diff --git a/src/components/AFE/XmlParseEditor/index.jsx b/src/components/AFE/XmlParseEditor/index.jsx
index 7935e2b..20c955f 100644
--- a/src/components/AFE/XmlParseEditor/index.jsx
+++ b/src/components/AFE/XmlParseEditor/index.jsx
@@ -23,7 +23,7 @@ const mapDispatchToProps = (dispatch, { editorId, rule, data }) => ({
       actions.editor.init(editorId, 'xmlParser', {
         data,
         autoEvaluate: true,
-        advanced: true,
+        leanJson: true,
         trimSpaces: false,
         ...rule,
       })
diff --git a/src/components/ArrowPopper/index.jsx b/src/components/ArrowPopper/index.jsx
index 0cfded3..c178cf8 100644
--- a/src/components/ArrowPopper/index.jsx
+++ b/src/components/ArrowPopper/index.jsx
@@ -90,40 +90,40 @@ export default class ArrowPopper extends Component {
       placement = 'bottom-end',
       classes,
       children,
-      onClose = () => {}, // default to noop.
+      onClose,
       className,
     } = this.props;
     const { arrowEl } = this.state;
 
     return (
-      <Popper
-        id={id}
-        anchorEl={anchorEl}
-        placement={placement}
-        disablePortal={false}
-        open={open}
-        className={classes.popper}
-        onClose={onClose}
-        modifiers={{
-          flip: {
-            enabled: true,
-          },
-          preventOverflow: {
-            enabled: true,
-            boundariesElement: 'scrollParent',
-          },
-          arrow: {
-            enabled: true,
-            element: arrowEl,
-          },
-        }}>
-        <span className={classes.arrow} ref={this.handleArrowEl} />
-        <ClickAwayListener onClickAway={onClose}>
+      <ClickAwayListener onClickAway={onClose}>
+        <Popper
+          id={id}
+          anchorEl={anchorEl}
+          placement={placement}
+          disablePortal={false}
+          open={open}
+          className={classes.popper}
+          onClose={onClose}
+          modifiers={{
+            flip: {
+              enabled: true,
+            },
+            preventOverflow: {
+              enabled: true,
+              boundariesElement: 'scrollParent',
+            },
+            arrow: {
+              enabled: true,
+              element: arrowEl,
+            },
+          }}>
+          <span className={classes.arrow} ref={this.handleArrowEl} />
           <Paper className={classNames(classes.paper, className)}>
             {children}
           </Paper>
-        </ClickAwayListener>
-      </Popper>
+        </Popper>
+      </ClickAwayListener>
     );
   }
 }
diff --git a/src/components/CodeEditor/index.jsx b/src/components/CodeEditor/index.jsx
index 4f05614..def0c21 100644
--- a/src/components/CodeEditor/index.jsx
+++ b/src/components/CodeEditor/index.jsx
@@ -53,7 +53,7 @@ class CodeEditor extends Component {
     const {
       name,
       theme,
-      value = '',
+      value,
       mode,
       readOnly,
       width,
@@ -64,14 +64,12 @@ class CodeEditor extends Component {
       enableAutocomplete,
       classes,
     } = this.props;
-    const valueAsString =
-      typeof value === 'string' ? value : JSON.stringify(value);
 
     return (
       <AceEditor
         name={name}
         className={classes.root}
-        value={valueAsString}
+        value={value}
         mode={mode}
         readOnly={readOnly}
         width={width || '100%'}
diff --git a/src/components/ConnectionForm/index.jsx b/src/components/ConnectionForm/index.jsx
new file mode 100644
index 0000000..7a9602b
--- /dev/null
+++ b/src/components/ConnectionForm/index.jsx
@@ -0,0 +1,183 @@
+import { Component, Fragment } from 'react';
+import { withStyles } from '@material-ui/core/styles';
+import Button from '@material-ui/core/Button';
+import Collapse from '@material-ui/core/Collapse';
+// import DoneIcon from '@material-ui/icons/Done';
+import { connect } from 'react-redux';
+import { FormFragment } from 'integrator-ui-forms/packages/core/dist';
+// import Chip from '@material-ui/core/Chip';
+// import CircularProgress from '@material-ui/core/CircularProgress';
+import PingSnackbar from '../../components/PingSnackbar';
+import formFactory from '../../formsMetadata/formFactory';
+import DynaForm from '../DynaForm';
+import DynaSubmit from '../../components/DynaForm/DynaSubmit';
+import actions from '../../actions';
+import * as selectors from '../../reducers/index';
+import { COMM_STATES } from '../../reducers/comms';
+
+// const CancellableSpinner = props => (
+//   <div>
+//     <CircularProgress />
+//     <Button
+//       size="small"
+//       variant="contained"
+//       color="secondary"
+//       onClick={props.onHandleCancel}>
+//       Click here to cancel this Test call
+//     </Button>
+//   </div>
+// );
+const mapStateToProps = state => ({
+  testConnectionCommState: selectors.testConnectionCommState(state),
+});
+const mapDispatchToProps = dispatch => ({
+  testConnection: (connection, resourceType, resourceId) => {
+    dispatch(
+      actions.resource.connections.testConnection(
+        connection,
+        resourceType,
+        resourceId
+      )
+    );
+  },
+  clearComms: () => {
+    dispatch(actions.clearComms());
+  },
+  cancelProcess: () => {
+    dispatch(actions.cancelTask());
+  },
+});
+
+@withStyles(theme => ({
+  formView: {
+    overflow: 'auto',
+    maxHeight: '500px',
+  },
+  chip: {
+    padding: theme.spacing.double,
+  },
+  actions: {
+    textAlign: 'right',
+  },
+  actionButton: {
+    marginTop: theme.spacing.double,
+    marginLeft: theme.spacing.double,
+  },
+}))
+class ConnectionForm extends Component {
+  state = {
+    advancedSettingsOpen: false,
+    // networkSnackBarError: false,
+  };
+  handleToggleAdvancedSettings = () => {
+    this.setState({ advancedSettingsOpen: !this.state.advancedSettingsOpen });
+  };
+  handleTestConnection = value => {
+    const { testConnection, resourceType, resource } = this.props;
+
+    testConnection(value, resourceType, resource._id);
+  };
+  handleCancel = () => {
+    this.props.cancelProcess();
+  };
+  componentDidMount() {
+    this.props.clearComms();
+  }
+  // handleCloseNetworkErrorChip = () => {
+  //   this.setState({ networkSnackBarError: false });
+  // };
+  handleClearComms = () => {
+    this.props.clearComms();
+  };
+  render() {
+    const {
+      formKey,
+      advancedSettingsOpen /* , networkSnackBarError */,
+    } = this.state;
+    const {
+      classes,
+      connection,
+      resourceType,
+      resource,
+      handleSubmit,
+      testConnectionCommState,
+      clearComms,
+      children,
+      ...rest
+    } = this.props;
+    // can we mode didMount
+    const disableFields = ['/type'];
+    const { fields, formValueToPatchSetConverter } = formFactory({
+      connection,
+      resourceType,
+      resource,
+      disableFields,
+    });
+    // props to disable
+    // how many can you run in the background
+    // name: /type
+    const [regularSettings, advancedSettings] = fields;
+
+    return (
+      <Fragment>
+        <PingSnackbar
+          commStatus={testConnectionCommState}
+          onHandleClose={this.handleClearComms}
+          onHandleCancelTask={this.handleCancel}
+        />
+        {/* {loading && <CancellableSpinner onHandleCancel={this.handleCancel} />}
+        {(failure || success) && (
+          <Chip
+            label={message}
+            // onDelete={this.handleCloseNetworkErrorChip}
+            color={failure ? 'primary' : 'secondary'}
+            className={classes.chip}
+            onDelete={() => {
+              this.props.clearComms();
+            }}
+            deleteIcon={success ? <DoneIcon /> : null}
+          />
+        )} */}
+        <DynaForm render key={formKey} resourceType={resourceType} {...rest}>
+          <div className={classes.formView}>
+            {children}
+            <FormFragment defaultFields={regularSettings} />
+            <Button onClick={this.handleToggleAdvancedSettings}>
+              Advanced Settings
+            </Button>
+            <Collapse in={advancedSettingsOpen}>
+              <FormFragment defaultFields={advancedSettings} />
+            </Collapse>
+          </div>
+          <div className={classes.actions}>
+            {/* TODO: use formValueToPatchSetConverter */}
+            <DynaSubmit
+              isValid={testConnectionCommState !== COMM_STATES.LOADING}
+              onClick={this.handleTestConnection}
+              className={classes.actionButton}
+              size="small"
+              variant="contained"
+              color="secondary">
+              Test
+            </DynaSubmit>
+            <DynaSubmit
+              onClick={value => {
+                handleSubmit(formValueToPatchSetConverter(value));
+              }}
+              className={classes.actionButton}
+              size="small"
+              variant="contained"
+              color="secondary">
+              Save
+            </DynaSubmit>
+          </div>
+        </DynaForm>
+      </Fragment>
+    );
+  }
+}
+
+export default connect(
+  mapStateToProps,
+  mapDispatchToProps
+)(ConnectionForm);
diff --git a/src/components/DynaForm/DynaSubmit.js b/src/components/DynaForm/DynaSubmit.js
index 72980a4..f251d22 100644
--- a/src/components/DynaForm/DynaSubmit.js
+++ b/src/components/DynaForm/DynaSubmit.js
@@ -4,16 +4,12 @@ import Button from '@material-ui/core/Button';
 
 class FormButton extends Component {
   render() {
-    const { isValid, onClick, children, className, value = {} } = this.props;
+    const { isValid, onClick, children, value = {}, ...rest } = this.props;
+
+    // console.log('DynaSubmit valid? ', isValid);
 
     return (
-      <Button
-        size="small"
-        variant="contained"
-        color="secondary"
-        className={className}
-        disabled={!isValid}
-        onClick={() => onClick(value)}>
+      <Button {...rest} disabled={!isValid} onClick={() => onClick(value)}>
         {children}
       </Button>
     );
diff --git a/src/components/DynaForm/fields/DynaCheckbox.js b/src/components/DynaForm/fields/DynaCheckbox.js
index 4a0eabf..be067e0 100644
--- a/src/components/DynaForm/fields/DynaCheckbox.js
+++ b/src/components/DynaForm/fields/DynaCheckbox.js
@@ -8,10 +8,10 @@ class MaterialCheckbox extends React.Component {
     const {
       disabled,
       id,
-      // isValid,
+      isValid,
       name,
       onFieldChange,
-      value = '',
+      value,
       label,
     } = this.props;
 
@@ -22,8 +22,8 @@ class MaterialCheckbox extends React.Component {
             key={id}
             name={name}
             disabled={disabled}
-            // isInvalid={!isValid}
-            value={typeof value === 'string' ? value : value.toString()}
+            isInvalid={!isValid}
+            value={value}
             checked={value}
             onChange={evt => onFieldChange(id, evt.target.checked)}
           />
diff --git a/src/components/DynaForm/fields/DynaCsvParse.js b/src/components/DynaForm/fields/DynaCsvParse.js
deleted file mode 100644
index 43e3703..0000000
--- a/src/components/DynaForm/fields/DynaCsvParse.js
+++ /dev/null
@@ -1,81 +0,0 @@
-import React, { Fragment } from 'react';
-import { withStyles } from '@material-ui/core/styles';
-import Button from '@material-ui/core/Button';
-import { FieldWrapper } from 'integrator-ui-forms/packages/core/dist';
-import CsvParseEditorDialog from '../../../components/AFE/CsvParseEditor/Dialog';
-
-@withStyles(() => ({
-  textField: {
-    minWidth: 200,
-  },
-  editorButton: {
-    // float: 'right',
-  },
-}))
-class DynaCsvParse extends React.Component {
-  state = {
-    showEditor: false,
-  };
-
-  handleEditorClick = () => {
-    this.setState({ showEditor: !this.state.showEditor });
-  };
-
-  handleClose = (shouldCommit, editorValues) => {
-    const { id, onFieldChange } = this.props;
-
-    if (shouldCommit) {
-      const {
-        columnDelimiter,
-        hasHeaderRow,
-        keyColumns,
-        rowsToSkip,
-        trimSpaces,
-      } = editorValues;
-
-      onFieldChange(id, {
-        columnDelimiter,
-        hasHeaderRow,
-        keyColumns,
-        rowsToSkip,
-        trimSpaces,
-      });
-    }
-
-    this.handleEditorClick();
-  };
-
-  render() {
-    const { showEditor } = this.state;
-    const { classes, id, value, label, sampleData } = this.props;
-
-    return (
-      <Fragment>
-        {showEditor && (
-          <CsvParseEditorDialog
-            title="CSV parse options"
-            id={id}
-            data={sampleData}
-            rule={value}
-            onClose={this.handleClose}
-          />
-        )}
-        <Button
-          variant="contained"
-          // color="secondary"
-          onClick={this.handleEditorClick}
-          className={classes.editorButton}>
-          {label}
-        </Button>
-      </Fragment>
-    );
-  }
-}
-
-const WrappedDynaCsvParse = props => (
-  <FieldWrapper {...props}>
-    <DynaCsvParse />
-  </FieldWrapper>
-);
-
-export default WrappedDynaCsvParse;
diff --git a/src/components/DynaForm/fields/DynaEditor.js b/src/components/DynaForm/fields/DynaEditor.js
deleted file mode 100644
index 48a6508..0000000
--- a/src/components/DynaForm/fields/DynaEditor.js
+++ /dev/null
@@ -1,137 +0,0 @@
-import { Component, Fragment } from 'react';
-import { withStyles } from '@material-ui/core/styles';
-import { FieldWrapper } from 'integrator-ui-forms/packages/core/dist';
-import FormHelperText from '@material-ui/core/FormHelperText';
-import FormLabel from '@material-ui/core/FormLabel';
-import IconButton from '@material-ui/core/IconButton';
-import OpenInNewIcon from 'mdi-react/OpenInNewIcon';
-import Dialog from '@material-ui/core/Dialog';
-import DialogActions from '@material-ui/core/DialogActions';
-import DialogContent from '@material-ui/core/DialogContent';
-import Button from '@material-ui/core/Button';
-import DialogTitle from '@material-ui/core/DialogTitle';
-import CodeEditor from '../../../components/CodeEditor';
-
-@withStyles(theme => ({
-  container: {
-    marginTop: theme.spacing.unit,
-    overflowY: 'off',
-  },
-  label: {
-    fontSize: '12px',
-  },
-  editorButton: {
-    float: 'right',
-  },
-  inlineEditorContainer: {
-    border: '1px solid rgb(0,0,0,0.1)',
-    marginRight: theme.spacing.unit,
-    marginTop: theme.spacing.unit,
-    height: theme.spacing.unit * 10,
-  },
-  editorContainer: {
-    border: '1px solid rgb(0,0,0,0.1)',
-    height: '50vh',
-    width: '65vh',
-  },
-}))
-class EditorField extends Component {
-  state = {
-    showEditor: false,
-  };
-
-  handleEditorClick = () => {
-    this.setState({ showEditor: !this.state.showEditor });
-  };
-
-  handleUpdate(value) {
-    const { id, mode, onFieldChange } = this.props;
-    let sanitizedVal = value;
-
-    if (mode === 'json') {
-      try {
-        sanitizedVal = JSON.parse(value);
-      } catch (e) {
-        return;
-      }
-    }
-
-    onFieldChange(id, sanitizedVal);
-  }
-
-  render() {
-    const { showEditor } = this.state;
-    const {
-      classes,
-      id,
-      mode,
-      value,
-      label,
-      description,
-      errorMessages,
-      isValid,
-    } = this.props;
-    const editorDialog = (
-      <Dialog
-        open
-        onClose={this.handleEditorClick}
-        aria-labelledby="form-dialog-title">
-        <DialogTitle id="form-dialog-title">{label}</DialogTitle>
-        <DialogContent>
-          <div className={classes.editorContainer}>
-            <CodeEditor
-              name={id}
-              value={value}
-              mode={mode}
-              onChange={value => this.handleUpdate(value)}
-            />
-          </div>
-        </DialogContent>
-        <DialogActions>
-          <Button
-            onClick={this.handleEditorClick}
-            variant="contained"
-            size="small"
-            color="secondary">
-            Done
-          </Button>
-        </DialogActions>
-      </Dialog>
-    );
-
-    return (
-      <Fragment>
-        <IconButton
-          onClick={this.handleEditorClick}
-          className={classes.editorButton}>
-          <OpenInNewIcon />
-        </IconButton>
-        <div className={classes.container}>
-          {showEditor && editorDialog}
-
-          <FormLabel className={classes.label}>{label}</FormLabel>
-
-          <div className={classes.inlineEditorContainer}>
-            <CodeEditor
-              name={`${id}-inline`}
-              value={value}
-              mode={mode}
-              onChange={value => this.handleUpdate(value)}
-            />
-          </div>
-          <FormHelperText className={classes.helpText}>
-            {isValid ? description : errorMessages}
-          </FormHelperText>
-        </div>
-      </Fragment>
-    );
-  }
-}
-
-const DynaKeyValue = props => (
-  <FieldWrapper {...props}>
-    <EditorField />
-  </FieldWrapper>
-);
-
-export default DynaKeyValue;
diff --git a/src/components/DynaForm/fields/DynaKeyValue.jsx b/src/components/DynaForm/fields/DynaKeyValue.jsx
deleted file mode 100644
index a30baf1..0000000
--- a/src/components/DynaForm/fields/DynaKeyValue.jsx
+++ /dev/null
@@ -1,121 +0,0 @@
-import { Component } from 'react';
-import Input from '@material-ui/core/Input';
-import { withStyles } from '@material-ui/core/styles';
-import { FieldWrapper } from 'integrator-ui-forms/packages/core/dist';
-import FormHelperText from '@material-ui/core/FormHelperText';
-import FormLabel from '@material-ui/core/FormLabel';
-
-@withStyles(theme => ({
-  container: {
-    // border: 'solid 1px',
-    // borderColor: theme.palette.text.disabled,
-    // backgroundColor: theme.palette.background.default,
-    marginTop: theme.spacing.unit,
-    overflowY: 'off',
-  },
-  input: {
-    flex: '1 1 auto',
-    marginRight: theme.spacing.double,
-  },
-  rowContainer: {
-    display: 'flex',
-  },
-  label: {
-    fontSize: '12px',
-  },
-}))
-class KeyValueTable extends Component {
-  state = {
-    rule: [],
-  };
-
-  handleUpdate(row, event, field) {
-    const { value } = event.target;
-    const { id, onFieldChange } = this.props;
-    const { rule } = this.state;
-
-    // TODO: Why are all these event fn being called here?
-    // Test if it is even needed...
-    event.preventDefault();
-    event.stopPropagation();
-    event.nativeEvent.stopImmediatePropagation();
-
-    if (row !== undefined) {
-      rule[row][field] = value;
-    } else {
-      rule.push({ [field]: value });
-    }
-
-    // console.log(`row: ${row || 'new'}.${field} = ${value}`);
-
-    this.setState({ rule });
-    onFieldChange(id, rule);
-  }
-
-  render() {
-    const {
-      classes,
-      label,
-      keyName = 'key',
-      valueName = 'value',
-      description,
-      errorMessages,
-      isValid,
-    } = this.props;
-    const { rule } = this.state;
-    const tableData = rule ? rule.map((r, n) => ({ ...r, row: n })) : [];
-    // console.log(rule, tableData);
-    const handleKeyUpdate = row => event =>
-      this.handleUpdate(row, event, keyName);
-    const handleValueUpdate = row => event =>
-      this.handleUpdate(row, event, valueName);
-
-    return (
-      <div className={classes.container}>
-        <FormLabel className={classes.label}>{label}</FormLabel>
-        {tableData.map(r => (
-          <div className={classes.rowContainer} key={r.row}>
-            <Input
-              autoFocus
-              defaultValue={r[keyName]}
-              placeholder={keyName}
-              className={classes.input}
-              onChange={handleKeyUpdate(r.row)}
-            />
-            <Input
-              defaultValue={r[valueName]}
-              placeholder={valueName}
-              className={classes.input}
-              onChange={handleValueUpdate(r.row)}
-            />
-          </div>
-        ))}
-        <div key="new" className={classes.rowContainer}>
-          <Input
-            value=""
-            placeholder={keyName}
-            className={classes.input}
-            onChange={handleKeyUpdate()}
-          />
-          <Input
-            value=""
-            placeholder={valueName}
-            className={classes.input}
-            onChange={handleValueUpdate()}
-          />
-        </div>
-        <FormHelperText className={classes.helpText}>
-          {isValid ? description : errorMessages}
-        </FormHelperText>
-      </div>
-    );
-  }
-}
-
-const DynaKeyValue = props => (
-  <FieldWrapper {...props}>
-    <KeyValueTable />
-  </FieldWrapper>
-);
-
-export default DynaKeyValue;
diff --git a/src/components/DynaForm/fields/DynaRelativeUri.js b/src/components/DynaForm/fields/DynaRelativeUri.js
index bd78a79..895074f 100644
--- a/src/components/DynaForm/fields/DynaRelativeUri.js
+++ b/src/components/DynaForm/fields/DynaRelativeUri.js
@@ -1,80 +1,25 @@
-import React, { Fragment } from 'react';
-import { connect } from 'react-redux';
+// @flow
+import React from 'react';
 import { withStyles } from '@material-ui/core/styles';
 import TextField from '@material-ui/core/TextField';
-import IconButton from '@material-ui/core/IconButton';
-// import EditIcon from 'mdi-react/EditIcon';
-import OpenInNewIcon from 'mdi-react/OpenInNewIcon';
+// import FormHelperText from '@material-ui/core/FormHelperText';
 import { FieldWrapper } from 'integrator-ui-forms/packages/core/dist';
-import * as selectors from '../../../reducers';
-import UrlEditorDialog from '../../../components/AFE/UrlEditor/Dialog';
-
-const mapStateToProps = (state, ownProps) => {
-  const { connectionId } = ownProps;
-
-  if (!connectionId) return {};
-
-  const connection = selectors.resource(state, 'connections', connectionId);
-
-  return { connection };
-};
 
 @withStyles(() => ({
   textField: {
     minWidth: 200,
   },
-  editorButton: {
-    float: 'right',
-  },
 }))
-class DynaRelativeUri extends React.Component {
-  state = {
-    showEditor: false,
-  };
-
-  handleEditorClick = () => {
-    this.setState({ showEditor: !this.state.showEditor });
-  };
-
-  handleClose = (shouldCommit, editorValues) => {
-    const { template } = editorValues;
-    const { id, onFieldChange } = this.props;
-
-    if (shouldCommit) {
-      onFieldChange(id, template);
-      // console.log(id, editorValues);
-    }
-
-    this.handleEditorClick();
-  };
-
-  getSampleData = () => {
-    const { connection } = this.props;
-
-    if (!connection) return '{}';
-
-    return JSON.stringify(
-      {
-        connection: {
-          _id: connection._id,
-          name: connection.name,
-        },
-      },
-      null,
-      2
-    );
-  };
-
+class MaterialUiTextField extends React.Component {
   render() {
-    const { showEditor } = this.state;
+    const { classes } = this.props;
     const {
-      classes,
-      connection = {},
       disabled,
       errorMessages,
       id,
       isValid,
       name,
+      description,
       onFieldChange,
       placeholder,
       required,
@@ -87,55 +32,38 @@ class DynaRelativeUri extends React.Component {
       onFieldChange(id, value);
     };
 
-    let description = '';
-    const { type } = connection || {};
+    // let description = 'The description!';
+    // const { type } = connection;
+
+    // console.log(connection);
 
-    if (type === 'http' || type === 'rest') {
-      description = `Relative to: ${connection[type].baseURI}`;
-    }
+    // if (type === 'http' || type === 'rest') {
+    //   description = `Relative to: ${connection[type].baseURI}`;
+    // }
 
     return (
-      <Fragment>
-        {showEditor && (
-          <UrlEditorDialog
-            title="Relative URI Editor"
-            id={id}
-            data={this.getSampleData()}
-            rule={value}
-            onClose={this.handleClose}
-          />
-        )}
-        <IconButton
-          onClick={this.handleEditorClick}
-          className={classes.editorButton}>
-          <OpenInNewIcon />
-        </IconButton>
-        <TextField
-          key={id}
-          name={name}
-          label={label}
-          className={classes.textField}
-          placeholder={placeholder}
-          helperText={isValid ? description : errorMessages}
-          disabled={disabled}
-          required={required}
-          error={!isValid}
-          value={value}
-          onChange={handleFieldChange}
-        />
-      </Fragment>
+      <TextField
+        // autoComplete="off"
+        key={id}
+        name={name}
+        label={label}
+        className={classes.textField}
+        placeholder={placeholder}
+        helperText={isValid ? description : errorMessages}
+        disabled={disabled}
+        required={required}
+        error={!isValid}
+        value={value}
+        onChange={handleFieldChange}
+      />
     );
   }
 }
 
-const ConnectedDynaRelativeUri = connect(
-  mapStateToProps,
-  null
-)(DynaRelativeUri);
-const FieldWrappedDynaRelativeUri = props => (
+const DynaRelativeUri = props => (
   <FieldWrapper {...props}>
-    <ConnectedDynaRelativeUri {...props.fieldOpts} />
+    <MaterialUiTextField {...props.fieldOpts} />
   </FieldWrapper>
 );
 
-export default FieldWrappedDynaRelativeUri;
+export default DynaRelativeUri;
diff --git a/src/components/DynaForm/fields/DynaSelect.js b/src/components/DynaForm/fields/DynaSelect.js
index 7a0c822..a01019b 100644
--- a/src/components/DynaForm/fields/DynaSelect.js
+++ b/src/components/DynaForm/fields/DynaSelect.js
@@ -35,20 +35,17 @@ class MaterialUiSelect extends React.Component {
       (itemsSoFar, option) =>
         itemsSoFar.concat(
           option.items.map(item => {
-            let label;
-            let value;
-
             if (typeof item === 'string') {
-              label = item;
-              value = item;
-            } else {
-              ({ value } = item);
-              label = item.label || item.value;
+              return (
+                <MenuItem key={item} value={item}>
+                  {item}
+                </MenuItem>
+              );
             }
 
             return (
-              <MenuItem key={value} value={value}>
-                {label}
+              <MenuItem key={item.value} value={item.value}>
+                {item.label || item.value}
               </MenuItem>
             );
           })
@@ -58,9 +55,7 @@ class MaterialUiSelect extends React.Component {
 
     return (
       <FormControl key={id} disabled={disabled} className={classes.root}>
-        <InputLabel shrink={!!value} htmlFor={id}>
-          {label}
-        </InputLabel>
+        <InputLabel htmlFor={id}>{label}</InputLabel>
         <Select
           value={value}
           onChange={evt => {
diff --git a/src/components/DynaForm/fields/DynaSelectResource.js b/src/components/DynaForm/fields/DynaSelectResource.js
deleted file mode 100644
index 13853c5..0000000
--- a/src/components/DynaForm/fields/DynaSelectResource.js
+++ /dev/null
@@ -1,106 +0,0 @@
-import React from 'react';
-import { connect } from 'react-redux';
-import { withStyles } from '@material-ui/core/styles';
-import Input from '@material-ui/core/Input';
-import InputLabel from '@material-ui/core/InputLabel';
-import MenuItem from '@material-ui/core/MenuItem';
-import FormHelperText from '@material-ui/core/FormHelperText';
-import FormControl from '@material-ui/core/FormControl';
-import Select from '@material-ui/core/Select';
-import { FieldWrapper } from 'integrator-ui-forms/packages/core/dist';
-import * as selectors from '../../../reducers';
-
-const mapStateToProps = (state, ownProps) => {
-  const { resourceType, filter, excludeFilter } = ownProps;
-
-  if (!resourceType) return {};
-
-  const { resources } = selectors.resourceList(state, { type: resourceType });
-
-  // console.log('from dyna select', resources);
-
-  return {
-    resources: resources.filter(r => {
-      if (filter) {
-        const keys = Object.keys(filter);
-
-        for (let i = 0; i < keys.length; i += 1) {
-          const key = keys[i];
-
-          if (r[key] !== filter[key]) return false;
-        }
-      }
-
-      if (excludeFilter) {
-        const keys = Object.keys(excludeFilter);
-
-        for (let i = 0; i < keys.length; i += 1) {
-          const key = keys[i];
-
-          if (r[key] === excludeFilter[key]) return false;
-        }
-      }
-
-      return true;
-    }),
-  };
-};
-
-@withStyles(() => ({
-  textField: {
-    minWidth: 200,
-  },
-}))
-class DynaSelectResource extends React.Component {
-  render() {
-    const {
-      description,
-      disabled,
-      id,
-      name,
-      resources = [],
-      value,
-      label,
-      onFieldChange,
-    } = this.props;
-    const availableResourceOptions = resources.map(conn => {
-      const label = conn.name;
-      const value = conn._id;
-
-      return (
-        <MenuItem key={value} value={value}>
-          {label}
-        </MenuItem>
-      );
-    });
-
-    return (
-      <FormControl key={id} disabled={disabled}>
-        <InputLabel shrink={!!value} htmlFor={id}>
-          {label}
-        </InputLabel>
-        <Select
-          value={value}
-          onChange={evt => {
-            onFieldChange(id, evt.target.value);
-          }}
-          input={<Input name={name} id={id} />}>
-          {availableResourceOptions}
-        </Select>
-        {description && <FormHelperText>{description}</FormHelperText>}
-      </FormControl>
-    );
-  }
-}
-
-const ConnectedDynaSelectResource = connect(
-  mapStateToProps,
-  null
-)(DynaSelectResource);
-const FieldWrappedDynaSelectResource = props => (
-  <FieldWrapper {...props}>
-    <ConnectedDynaSelectResource {...props.fieldOpts} />
-  </FieldWrapper>
-);
-
-export default FieldWrappedDynaSelectResource;
diff --git a/src/components/DynaForm/fields/DynaText.js b/src/components/DynaForm/fields/DynaText.js
index 11369e5..86b0a68 100644
--- a/src/components/DynaForm/fields/DynaText.js
+++ b/src/components/DynaForm/fields/DynaText.js
@@ -2,6 +2,7 @@
 import React from 'react';
 import { withStyles } from '@material-ui/core/styles';
 import TextField from '@material-ui/core/TextField';
+// import FormHelperText from '@material-ui/core/FormHelperText';
 import { FieldWrapper } from 'integrator-ui-forms/packages/core/dist';
 
 @withStyles(() => ({
@@ -13,8 +14,8 @@ import { FieldWrapper } from 'integrator-ui-forms/packages/core/dist';
 }))
 class MaterialUiTextField extends React.Component {
   render() {
+    const { classes } = this.props;
     const {
-      classes,
       description,
       disabled,
       errorMessages,
@@ -27,17 +28,12 @@ class MaterialUiTextField extends React.Component {
       value,
       label,
       multiline,
-      valueDelimiter,
       rowsMax,
     } = this.props;
     const handleFieldChange = event => {
       const { value } = event.target;
 
-      if (!valueDelimiter) {
-        return onFieldChange(id, value);
-      }
-
-      onFieldChange(id, value.split(valueDelimiter));
+      onFieldChange(id, value);
     };
 
     return (
diff --git a/src/components/DynaForm/index.js b/src/components/DynaForm/index.js
index 0a11f11..38ae4d1 100644
--- a/src/components/DynaForm/index.js
+++ b/src/components/DynaForm/index.js
@@ -1,55 +1,14 @@
 import { Component } from 'react';
-import { Form, FormFragment } from 'integrator-ui-forms/packages/core/dist';
-import { withStyles } from '@material-ui/core/styles';
-import ExpansionPanel from '@material-ui/core/ExpansionPanel';
-import ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';
-import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';
-import Typography from '@material-ui/core/Typography';
-import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
+import { Form } from 'integrator-ui-forms/packages/core/dist';
 import getRenderer from './renderer';
 
-@withStyles(theme => ({
-  fieldContainer: {
-    border: 'solid 1px',
-    backgroundColor: theme.palette.background.default,
-    borderColor: 'rgb(0,0,0,0.1)',
-    maxHeight: `60vh`,
-    overflowY: 'auto',
-    padding: theme.spacing.unit,
-  },
-  details: {
-    display: 'block',
-    paddingRight: theme.spacing.unit,
-  },
-}))
 export default class DynaForm extends Component {
   render() {
-    const { classes, children, fieldMeta, ...rest } = this.props;
-    const { fields, fieldSets } = fieldMeta;
+    const { children, ...rest } = this.props;
     const renderer = getRenderer();
 
-    if (!fields && !fieldSets) {
-      return null;
-    }
-
     return (
       <Form {...rest} renderer={renderer}>
-        <div className={classes.fieldContainer}>
-          {fields && <FormFragment defaultFields={fields} />}
-          {fieldSets &&
-            fieldSets.map(set => (
-              <ExpansionPanel key={set.header}>
-                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>
-                  <Typography className={classes.heading}>
-                    {set.header}
-                  </Typography>
-                </ExpansionPanelSummary>
-                <ExpansionPanelDetails className={classes.details}>
-                  <FormFragment defaultFields={set.fields} />
-                </ExpansionPanelDetails>
-              </ExpansionPanel>
-            ))}
-        </div>
         {children}
       </Form>
     );
diff --git a/src/components/DynaForm/renderer.js b/src/components/DynaForm/renderer.js
index f64f455..c1bfa78 100644
--- a/src/components/DynaForm/renderer.js
+++ b/src/components/DynaForm/renderer.js
@@ -1,67 +1,40 @@
-import { Fragment } from 'react';
-import { withStyles } from '@material-ui/core/styles';
 import DynaMultiSelect from './fields/DynaMultiSelect';
 import DynaRadioGroup from './fields/DynaRadioGroup';
 import DynaSelect from './fields/DynaSelect';
-import DynaSelectResource from './fields/DynaSelectResource';
 import DynaText from './fields/DynaText';
 import DynaCheckbox from './fields/DynaCheckbox';
 import DynaRelativeUri from './fields/DynaRelativeUri';
-import DynaKeyValue from './fields/DynaKeyValue';
-import DynaEditor from './fields/DynaEditor';
-import DynaCsvParse from './fields/DynaCsvParse';
-import Help from '../Help';
-
-const inputs = {
-  text: DynaText,
-  editor: DynaEditor,
-  textarea: DynaText,
-  checkbox: DynaCheckbox,
-  select: DynaSelect,
-  selectresource: DynaSelectResource,
-  multiselect: DynaMultiSelect,
-  radiogroup: DynaRadioGroup,
-  relativeuri: DynaRelativeUri,
-  keyvalue: DynaKeyValue,
-  csvparse: DynaCsvParse,
-};
-const HelpWrapper = withStyles({
-  helpIcon: { float: 'right' },
-})(props => {
-  const { helpKey, helpText, classes } = props;
-
-  // console.log('helpwrapper initialized');
-
-  return (
-    <Fragment>
-      {(helpKey || helpText) && (
-        <Help
-          className={classes.helpIcon}
-          helpKey={helpKey}
-          helpText={helpText}
-        />
-      )}
-      {props.children}
-    </Fragment>
-  );
-});
 
 function getRenderer() {
   return function renderer(field) {
     // (field, onChange, onFieldFocus, onFieldBlur) => {
+    const { id, type /* , label, misc = {} */ } = field;
 
-    const { id, type, helpKey, helpText } = field;
-    const DynaInput = inputs[type];
+    switch (type) {
+      case 'text':
+        return <DynaText key={id} {...field} />;
 
-    if (!DynaInput) {
-      return <div>No mapped field for type: [{type}]</div>;
-    }
+      case 'textarea':
+        return <DynaText key={id} {...field} />;
+
+      case 'checkbox':
+        return <DynaCheckbox key={id} {...field} />;
 
-    return (
-      <HelpWrapper key={id} helpKey={helpKey} helpText={helpText}>
-        <DynaInput {...field} />
-      </HelpWrapper>
-    );
+      case 'select':
+        return <DynaSelect key={id} {...field} />;
+
+      case 'multiselect':
+        return <DynaMultiSelect key={id} {...field} />;
+
+      case 'radiogroup':
+        return <DynaRadioGroup key={id} {...field} />;
+
+      case 'relativeUri':
+        return <DynaRelativeUri key={id} {...field} />;
+
+      default:
+        return <div>No mapped field</div>;
+    }
   };
 }
 
diff --git a/src/components/Help/helpTextMap.js b/src/components/Help/helpTextMap.js
index 8b1784a..4f9e0d6 100644
--- a/src/components/Help/helpTextMap.js
+++ b/src/components/Help/helpTextMap.js
@@ -112,8 +112,6 @@ export default {
     'The data format that should be used for all requests sent to, or responses received from (via HTTP) the API being connected to.  Typically a single API will only support one media type (data format) and will publish that info right at the top of their API guides. If the mediaType foe request/response are not the same, it is possible to override the mediaType for specific endpoints by using the export success/error media type fields.',
   'connection.http.baseURI':
     "The common part of an API's URL - used across all the different HTTP endpoints you will invoke.  Using a base URI in your connection makes it easier to configure all your exports and imports (because all you need then is a Relative URI).",
-  'connection.http.headers':
-    "In some rare cases, it may be necessary to include custom HTTP headers with your API requests.  The appropriate 'content-type' header is automatically added by integrator.io based on the mediaType value described in the connection associated with this request (typically 'application/json'). Note that if the authentication method described in the associated connection requires a header value, this will also be added automatically.  This header field is used in the rare case that an API requires additional headers other than these two.",
   'connection.http.disableStrictSSL':
     'An optional flag that (if set) skips verifying the SSL certificate, allowing self-signed or expired certs.  It is highly recommended (for hopefully obvious reasons) that you never set this flag for any production data connections.  In general, use at your own risk.',
   'connection.http.concurrencyLevel':
@@ -360,8 +358,6 @@ export default {
   'connector.repository.name': '.',
   'export._id':
     'System generated primary unique identifier for your export.  For API users, this value should be used for GET, PUT and DELETE requests.',
-  'editor.xml.simple':
-    'Simple parsing means the code is converted to JSON without any user configurations.This typically generates a more complex and difficult to read JSON.\nIf you would like to have more control over what the JSON output looks like, use the Advanced options.',
   'export.name':
     "Name your export so that you can easily reference it from other parts of the application.  For example: 'Salesforce - Query All Accounts'",
   'export._connectionId':
diff --git a/src/components/Help/index.js b/src/components/Help/index.js
index ee1361d..83bd054 100644
--- a/src/components/Help/index.js
+++ b/src/components/Help/index.js
@@ -1,13 +1,22 @@
-import { Component, Fragment } from 'react';
+import { Component, Fragment as span } from 'react';
 import { withStyles } from '@material-ui/core/styles';
 import IconButton from '@material-ui/core/IconButton';
 import Typography from '@material-ui/core/Typography';
 import HelpIcon from 'mdi-react/HelpIcon';
-import ClickAwayListener from '@material-ui/core/ClickAwayListener';
 import ArrowPopper from '../ArrowPopper';
 import helpTextMap from './helpTextMap';
 
 @withStyles(theme => ({
+  flex: {
+    display: 'flex',
+  },
+  childrenStyle: {
+    flex: 3,
+  },
+  helpStyle: {
+    textAlign: 'left',
+    flex: 1,
+  },
   helpPopper: {
     maxWidth: '350px',
     maxHeight: '300px',
@@ -34,27 +43,27 @@ export default class Help extends Component {
 
   render() {
     const { anchorEl } = this.state;
-    const { classes, className, helpKey, helpText } = this.props;
+    const { classes, className, helpKey, children } = this.props;
     const open = !!anchorEl;
 
     return (
-      <Fragment>
-        <ClickAwayListener onClickAway={this.handleClose}>
+      <div className={classes.flex}>
+        <span className={classes.childrenStyle}>{children}</span>
+        <span className={classes.helpStyle}>
           <IconButton className={className} onClick={this.handleMenu}>
             <HelpIcon fontSize="small" />
           </IconButton>
-        </ClickAwayListener>
-        <ArrowPopper
-          placement="left"
-          className={classes.helpPopper}
-          id="helpBubble"
-          open={open}
-          anchorEl={anchorEl}>
-          <Typography variant="caption">
-            {helpText || helpTextMap[helpKey]}
-          </Typography>
-        </ArrowPopper>
-      </Fragment>
+          <ArrowPopper
+            placement="left"
+            className={classes.helpPopper}
+            id="waffleBox"
+            onClose={this.handleClose}
+            open={open}
+            anchorEl={anchorEl}>
+            <Typography variant="caption">{helpTextMap[helpKey]}</Typography>
+          </ArrowPopper>
+        </span>
+      </div>
     );
   }
 }
diff --git a/src/components/PingSnackbar/index.jsx b/src/components/PingSnackbar/index.jsx
new file mode 100644
index 0000000..422c2e6
--- /dev/null
+++ b/src/components/PingSnackbar/index.jsx
@@ -0,0 +1,183 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import classNames from 'classnames';
+import Button from '@material-ui/core/Button';
+import CheckCircleIcon from '@material-ui/icons/CheckCircle';
+import ErrorIcon from '@material-ui/icons/Error';
+import InfoIcon from '@material-ui/icons/Info';
+import CloseIcon from '@material-ui/icons/Close';
+import green from '@material-ui/core/colors/green';
+import amber from '@material-ui/core/colors/amber';
+import IconButton from '@material-ui/core/IconButton';
+import Snackbar from '@material-ui/core/Snackbar';
+import SnackbarContent from '@material-ui/core/SnackbarContent';
+import WarningIcon from '@material-ui/icons/Warning';
+import { withStyles } from '@material-ui/core/styles';
+import LinearProgress from '@material-ui/core/LinearProgress';
+import { COMM_STATES } from '../../reducers/comms';
+
+const variantIcon = {
+  success: CheckCircleIcon,
+  warning: WarningIcon,
+  error: ErrorIcon,
+  info: InfoIcon,
+};
+const styles1 = theme => ({
+  success: {
+    backgroundColor: green[600],
+  },
+  error: {
+    backgroundColor: theme.palette.error.dark,
+  },
+  info: {
+    backgroundColor: theme.palette.primary.dark,
+  },
+  warning: {
+    backgroundColor: amber[700],
+  },
+  icon: {
+    fontSize: 20,
+  },
+  iconVariant: {
+    opacity: 0.9,
+    marginRight: theme.spacing.unit,
+  },
+  message: {
+    display: 'flex',
+    alignItems: 'center',
+  },
+  w: theme.spacing.unit * 4,
+  flexGrow: 0,
+  justifyContent: 'center',
+  textAlign: 'center',
+});
+
+function MySnackbarContent(props) {
+  const { classes, className, message, onClose, variant, ...other } = props;
+  const Icon = variantIcon[variant];
+
+  return (
+    <SnackbarContent
+      className={classNames(classes[variant], className)}
+      aria-describedby="client-snackbar"
+      message={
+        <span id="client-snackbar" className={classes.message}>
+          <Icon className={classNames(classes.icon, classes.iconVariant)} />
+          {message}
+        </span>
+      }
+      action={
+        variant !== 'info' && [
+          <IconButton
+            key="close"
+            aria-label="Close"
+            color="inherit"
+            className={classes.close}
+            onClick={onClose}>
+            <CloseIcon className={classes.icon} />
+          </IconButton>,
+        ]
+      }
+      {...other}
+    />
+  );
+}
+
+MySnackbarContent.propTypes = {
+  classes: PropTypes.object.isRequired,
+  className: PropTypes.string,
+  message: PropTypes.node,
+  onClose: PropTypes.func,
+  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,
+};
+
+const MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);
+const styles2 = theme => ({
+  margin: {
+    marginTop: theme.spacing.unit,
+  },
+});
+const commStateToVariantType = {
+  success: 'success',
+  loading: 'info',
+  error: 'error',
+};
+const CancellableSpinner = props => (
+  <div>
+    <div>
+      <Button
+        size="small"
+        variant="contained"
+        color="secondary"
+        onClick={props.onHandleCancel}>
+        Click here to cancel this Test call
+      </Button>
+    </div>
+    <div>
+      <p />
+    </div>
+    <LinearProgress />
+  </div>
+);
+
+class CustomizedSnackbars extends React.Component {
+  generateMessageBasedOnState = (commState, messages, onHandleCancel) => {
+    if (commState === COMM_STATES.LOADING)
+      return <CancellableSpinner onHandleCancel={onHandleCancel} />;
+    else if (commState === COMM_STATES.ERROR) {
+      const errors = messages.match(/\[(.*?)\]/g);
+
+      if (!errors) {
+        return messages;
+      }
+
+      return (
+        <ul>
+          {errors.map(msg => {
+            const removedBraces = msg.substring(1, msg.length - 1);
+
+            return <li key={removedBraces}>{removedBraces}</li>;
+          })}
+        </ul>
+      );
+    } else if (commState === COMM_STATES.SUCCESS) {
+      return messages;
+    }
+  };
+  render() {
+    const { commStatus, onHandleClose, onHandleCancelTask } = this.props;
+    const { commState, message } = commStatus;
+    const variant = commStateToVariantType[commState];
+    const msg = this.generateMessageBasedOnState(
+      commState,
+      message,
+      onHandleCancelTask
+    );
+
+    if (!commState) return null;
+
+    return (
+      <div>
+        <Snackbar
+          anchorOrigin={{
+            vertical: 'top',
+            horizontal: 'center',
+          }}
+          open
+          autoHideDuration={6000}>
+          <MySnackbarContentWrapper
+            onClose={onHandleClose}
+            variant={variant || 'info'}
+            message={msg}
+          />
+        </Snackbar>
+      </div>
+    );
+  }
+}
+
+CustomizedSnackbars.propTypes = {
+  classes: PropTypes.object.isRequired,
+};
+
+export default withStyles(styles2)(CustomizedSnackbars);
diff --git a/src/components/ResourceForm/index.js b/src/components/ResourceForm/index.js
index 81e36a6..42c1309 100644
--- a/src/components/ResourceForm/index.js
+++ b/src/components/ResourceForm/index.js
@@ -4,12 +4,10 @@ import Button from '@material-ui/core/Button';
 import formFactory from '../../formsMetadata/formFactory';
 import DynaForm from '../DynaForm';
 import DynaSubmit from '../../components/DynaForm/DynaSubmit';
-import { sanitizePatchSet } from '../../formsMetadata/utils';
 
 @withStyles(theme => ({
   actions: {
     textAlign: 'right',
-    padding: theme.spacing.unit / 2,
   },
   actionButton: {
     marginTop: theme.spacing.double,
@@ -43,14 +41,14 @@ export default class ResourceForm extends Component {
       children,
       ...rest
     } = this.props;
-    const { fieldMeta, formValueToPatchSetConverter } = formFactory({
+    const { fields, formValueToPatchSetConverter } = formFactory({
       connection,
       resourceType,
       resource,
     });
 
     return (
-      <DynaForm key={formKey} {...rest} fieldMeta={fieldMeta}>
+      <DynaForm key={formKey} {...rest} defaultFields={fields}>
         {children}
         <div className={classes.actions}>
           <Button
@@ -61,15 +59,11 @@ export default class ResourceForm extends Component {
             Cancel
           </Button>
           <DynaSubmit
-            onClick={value =>
-              handleSubmit(
-                sanitizePatchSet({
-                  patchSet: formValueToPatchSetConverter(value),
-                  fieldMeta,
-                })
-              )
-            }
-            className={classes.actionButton}>
+            onClick={value => handleSubmit(formValueToPatchSetConverter(value))}
+            className={classes.actionButton}
+            size="small"
+            variant="contained"
+            color="secondary">
             Save
           </DynaSubmit>
         </div>
diff --git a/src/formsMetadata/definitions/common.js b/src/formsMetadata/definitions/common.js
index 3d0a3eb..7d19327 100644
--- a/src/formsMetadata/definitions/common.js
+++ b/src/formsMetadata/definitions/common.js
@@ -1,20 +1,20 @@
-export default {
-  fields: [
-    {
-      id: 'CommonName',
-      name: '/name',
-      defaultValue: '{{name}}',
-      type: 'text',
-      label: 'Name',
-    },
-    {
-      id: 'CommonDescription',
-      name: '/description',
-      defaultValue: '{{description}}',
-      type: 'text',
-      multiline: true,
-      maxRows: 5,
-      label: 'Description',
-    },
-  ],
-};
+export default [
+  {
+    id: 'Name',
+    name: '/name',
+    type: 'text',
+    label: 'Name',
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+  },
+  {
+    id: 'description',
+    name: '/description',
+    type: 'textarea',
+    label: 'Description',
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+  },
+];
diff --git a/src/formsMetadata/definitions/connections/common.js b/src/formsMetadata/definitions/connections/common.js
new file mode 100644
index 0000000..262925c
--- /dev/null
+++ b/src/formsMetadata/definitions/connections/common.js
@@ -0,0 +1,331 @@
+const connectionTypes = [
+  {
+    _id: 'amazonmws',
+    name: 'Amazon MWS',
+  },
+  {
+    _id: 'ebay',
+    name: 'eBay',
+  },
+  {
+    _id: 'ebay-xml',
+    name: 'eBay (XML)',
+  },
+  {
+    _id: 'ftp',
+    name: 'FTP',
+  },
+  {
+    _id: 'google',
+    name: 'Google',
+  },
+  {
+    _id: 'http',
+    name: 'HTTP',
+  },
+  {
+    _id: 'netsuite',
+    name: 'NetSuite',
+  },
+  {
+    _id: 'postgresql',
+    name: 'PostgreSQL',
+  },
+  {
+    _id: 'mssql',
+    name: 'Microsoft SQL',
+  },
+  {
+    _id: 'mysql',
+    name: 'MySQL',
+  },
+  {
+    _id: 'rest',
+    name: 'REST API',
+  },
+  {
+    _id: 's3',
+    name: 'Amazon S3',
+  },
+  {
+    _id: 'salesforce',
+    name: 'Salesforce',
+  },
+  {
+    _id: 'wrapper',
+    name: 'Wrapper',
+  },
+  {
+    _id: 'googledrive',
+    name: 'Google Drive',
+  },
+  {
+    _id: 'anaplan',
+    name: 'Anaplan',
+  },
+  {
+    _id: 'tsheets',
+    name: 'TSheets',
+  },
+  {
+    _id: 'box',
+    name: 'Box',
+  },
+  {
+    _id: 'exacterp',
+    name: 'Exact ERP',
+  },
+  {
+    _id: 'steelbrick',
+    name: 'SteelBrick',
+  },
+  {
+    _id: 'doubleclick',
+    name: 'DoubleClick',
+  },
+  {
+    _id: 'etsy',
+    name: 'Etsy',
+  },
+  {
+    _id: 'splunk',
+    name: 'Splunk',
+  },
+  {
+    _id: 'newegg',
+    name: 'Newegg',
+  },
+  {
+    _id: 'taxjar',
+    name: 'Taxjar',
+  },
+  {
+    _id: 'coupa',
+    name: 'Coupa',
+  },
+  {
+    _id: 'zohocrm',
+    name: 'Zoho CRM',
+  },
+  {
+    _id: 'zohodesk',
+    name: 'Zoho Desk',
+  },
+  {
+    _id: 'microsoftdynamics365',
+    name: 'Microsoft Dynamics 365',
+  },
+  {
+    _id: 'greenhouse',
+    name: 'Greenhouse',
+  },
+  {
+    _id: 'quip',
+    name: 'Quip',
+  },
+  {
+    _id: 'shippo',
+    name: 'Shippo',
+  },
+  {
+    _id: 'zohobooks',
+    name: 'Zoho Books',
+  },
+  {
+    _id: 'pitneybowes',
+    name: 'Pitney Bowes',
+  },
+  {
+    _id: 'easypost',
+    name: 'EasyPost',
+  },
+  {
+    _id: 'microsoftbusinesscentral',
+    name: 'Microsoft Dynamics 365 Business Central',
+  },
+  {
+    _id: 'expensify',
+    name: 'Expensify',
+  },
+  {
+    _id: 'microsoftoutlookcalendar',
+    name: 'Microsoft Outlook Calendar',
+  },
+  {
+    _id: 'microsoftoutlookmail',
+    name: 'Microsoft Outlook Mail',
+  },
+  {
+    _id: 'microsoftoutlookcontacts',
+    name: 'Microsoft Outlook Contacts',
+  },
+  {
+    _id: 'microsoftonenote',
+    name: 'Microsoft OneNote',
+  },
+  {
+    _id: 'pdffiller',
+    name: 'PDFfiller',
+  },
+  /* {
+      _id: 'signnow',
+      name: 'SignNow'
+    }, */
+  {
+    _id: 'acton',
+    name: 'Act-On',
+  },
+  {
+    _id: 'acumatica',
+    name: 'Acumatica',
+  },
+  {
+    _id: 'mongodb',
+    name: 'MongoDB',
+  },
+  {
+    _id: 'microsoftoffice365',
+    name: 'Microsoft Office 365',
+  },
+  {
+    _id: 'zohomail',
+    name: 'Zoho Mail',
+  },
+  {
+    _id: 'zoom',
+    name: 'Zoom',
+  },
+  {
+    _id: 'myobessentials',
+    name: 'MYOB Essentials',
+  },
+  {
+    _id: 'returnly',
+    name: 'Returnly',
+  },
+  {
+    _id: 'klaviyo',
+    name: 'Klaviyo',
+  },
+  {
+    _id: 'powerbi',
+    name: 'Power BI',
+  },
+  {
+    _id: 'mailgun',
+    name: 'Mailgun',
+  },
+  {
+    _id: 'procurify',
+    name: 'Procurify',
+  },
+  {
+    _id: 'strata',
+    name: 'Strata',
+  },
+  {
+    _id: 'aptrinsic',
+    name: 'Aptrinsic',
+  },
+  {
+    _id: 'concur',
+    name: 'Concur',
+  },
+  {
+    _id: 'zimbra',
+    name: 'Zimbra',
+  },
+  {
+    _id: 'grms',
+    name: 'GRMS',
+  },
+  {
+    _id: 'retailops',
+    name: 'RetailOps',
+  },
+  {
+    _id: 'parseur',
+    name: 'Parseur',
+  },
+  {
+    _id: 'hybris',
+    name: 'Hybris',
+  },
+  {
+    _id: 'authorize.net',
+    name: 'Authorize.Net',
+  },
+  {
+    _id: 'propack',
+    name: 'Propack (P3PL)',
+  },
+  {
+    _id: 'as2',
+    name: 'AS2',
+  },
+  {
+    _id: 'outreach',
+    name: 'Outreach',
+  },
+  {
+    _id: 'constantcontactv3',
+    name: 'Constant Contact',
+  },
+  {
+    _id: 'merchantesolutions',
+    name: 'MERCHANT e-SOLUTIONS',
+  },
+  {
+    _id: 'dunandbradstreet',
+    name: 'Dun & Bradstreet',
+  },
+  {
+    _id: 'skubana',
+    name: 'Skubana',
+  },
+  {
+    _id: 'trinet',
+    name: 'TriNet',
+  },
+  {
+    _id: 'pacejet',
+    name: 'Pacejet',
+  },
+];
+
+export default [
+  {
+    id: 'Name',
+    name: '/name',
+    type: 'text',
+    label: 'Name',
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+  },
+
+  {
+    id: 'ConnectionTypes',
+    name: '/type',
+    type: 'select',
+    label: 'ConnectionTypes',
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+    visible: true,
+    required: false,
+    disabled: false,
+    visibleWhen: [],
+    requiredWhen: [],
+    disabledWhen: [],
+    options: [
+      {
+        heading: 'ConnectionTypes',
+        items: connectionTypes.map(connection => ({
+          label: connection.name,
+          value: connection._id,
+        })),
+      },
+    ],
+  },
+];
diff --git a/src/formsMetadata/definitions/connections/custom/rest/jira.js b/src/formsMetadata/definitions/connections/custom/rest/jira.js
index fe4d123..dddd9d9 100644
--- a/src/formsMetadata/definitions/connections/custom/rest/jira.js
+++ b/src/formsMetadata/definitions/connections/custom/rest/jira.js
@@ -1,6 +1,19 @@
-import { defaultPatchSetConverter } from '../../../../utils';
+import {
+  defaultValueInitializer,
+  defaultPatchSetConverter,
+} from '../../../../utils';
 
 export default {
+  // Initializers get the
+  initializer: dataModel => {
+    const formValues = defaultValueInitializer(dataModel);
+
+    // console.log('custom initializer', formValues);
+
+    return formValues;
+  },
+  // TODO: purge values you choose to ignore
+  // create own converter
   converter: formValues => {
     const fixedValues = {
       '/rest/authType': 'basic',
@@ -16,43 +29,76 @@ export default {
 
     return patchSet;
   },
-
   fields: [
     {
       id: 'Name',
       name: '/name',
-      helpKey: 'connection.name',
-      defaultValue: r => r.name,
       type: 'text',
       label: 'Name',
+      description: 'this is the description',
+      placeholder: '',
+      defaultValue: '',
+      visible: true,
+      required: true,
+      disabled: false,
+    },
+    {
+      id: 'type',
+      name: '/type',
+      type: 'select',
+      label: 'Connection Type',
+      description: '',
+      placeholder: '',
+      defaultValue: '',
+      options: [
+        {
+          items: [
+            {
+              label: 'Jira',
+              value: 'jira',
+            },
+            {
+              label: 'REST',
+              value: 'rest',
+            },
+          ],
+        },
+      ],
+      visible: true,
+      required: true,
+      disabled: true,
+      visibleWhen: [],
+      requiredWhen: [],
+      disabledWhen: [],
     },
     {
       id: 'baseURI',
       name: '/rest/baseURI',
-      helpKey: 'connection.rest.baseURI',
-      defaultValue: r => r.rest.baseURI,
       type: 'text',
       label: 'Base URI',
+      description: '',
+      placeholder: '',
+      defaultValue: '',
       required: true,
     },
     {
       id: 'Username',
       name: '/rest/basicAuth/username',
-      helpKey: 'connection.rest.basicAuth.username',
-      defaultValue: r => r.rest.basicAuth && r.rest.basicAuth.username,
       type: 'text',
       label: 'Username',
+      placeholder: '',
+      defaultValue: '',
       required: true,
     },
     {
       id: 'Password',
       name: '/rest/basicAuth/password',
-      helpKey: 'connection.rest.basicAuth.password',
-      defaultValue: r => r.rest.basicAuth && r.rest.basicAuth.password,
       type: 'text',
       label: 'Password',
       description:
         'Note: for security reasons this field must always be re-entered.',
+      placeholder: '',
+      defaultValue: '',
       required: true,
     },
   ],
diff --git a/src/formsMetadata/definitions/connections/ftp.js b/src/formsMetadata/definitions/connections/ftp.js
new file mode 100644
index 0000000..53be2de
--- /dev/null
+++ b/src/formsMetadata/definitions/connections/ftp.js
@@ -0,0 +1,274 @@
+import common from './common';
+
+const regularSettings = [
+  {
+    id: 'Host',
+    name: '/ftp/hostURI',
+    type: 'text',
+    label: 'Host',
+    description:
+      'If the FTP server is behind a firewall please whitelist the following IP addresses: 52.2.63.213, 52.7.99.234, and 52.71.48.248.',
+    placeholder: 'Host',
+    defaultValue: '',
+    options: [],
+    visible: true,
+    required: true,
+    disabled: false,
+    visibleWhen: [],
+    requiredWhen: [],
+    disabledWhen: [],
+  },
+  {
+    id: 'Protocol',
+    name: '/ftp/type',
+    type: 'select',
+    label: 'Protocol',
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+    options: [
+      {
+        heading: 'Protocol',
+        items: [
+          {
+            label: 'FTP',
+            value: 'ftp',
+          },
+          {
+            label: 'SFTP',
+            value: 'sftp',
+          },
+          {
+            label: 'FTPS',
+            value: 'ftps',
+          },
+        ],
+      },
+    ],
+  },
+  {
+    id: 'Username',
+    name: '/ftp/username',
+    type: 'text',
+    label: 'Username',
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+    options: [],
+    visible: true,
+    required: true,
+    disabled: false,
+    visibleWhen: [],
+    requiredWhen: [],
+    disabledWhen: [],
+  },
+  {
+    id: 'Password',
+    name: '/ftp/password',
+    type: 'text',
+    label: 'Password',
+    description:
+      'Note: for security reasons this field must always be re-entered.',
+    placeholder: '',
+    defaultValue: '',
+    options: [],
+    visible: true,
+    required: false,
+    disabled: false,
+    visibleWhen: [],
+    requiredWhen: [],
+    disabledWhen: [],
+  },
+];
+const advancedSettings = [
+  {
+    id: 'Port',
+    name: '/ftp/port',
+    type: 'text',
+    label: 'Port',
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+    options: [],
+    visible: true,
+    required: true,
+    disabled: false,
+    visibleWhen: [],
+    requiredWhen: [],
+    validWhen: {
+      fallsWithinNumericalRange: {
+        min: 0,
+        max: 65535,
+        message: 'The value must be more than 0 and less than 65535',
+      },
+      matchesRegEx: {
+        pattern: '^[\\d]+$',
+        message: 'Only numbers allowed',
+      },
+    },
+    disabledWhen: [],
+  },
+  {
+    id: 'Passive Mode',
+    name: '/ftp/usePassiveMode',
+    type: 'checkbox',
+    label: 'Use Passive Mode',
+    description: 'Use Passive Mode',
+    placeholder: '',
+    defaultValue: '',
+  },
+  {
+    id: 'User Directory Root',
+    name: '/ftp/usePassiveMode',
+    type: 'checkbox',
+    label: 'User Directory Root',
+    description: 'User Directory is Root',
+    placeholder: '',
+    defaultValue: '',
+  },
+  {
+    id: 'Entry Parser',
+    name: '/ftp/entryParser',
+    type: 'select',
+    label: 'Entry Parser',
+    description: '',
+    placeholder: 'Please Select(Optional)',
+    defaultValue: '',
+    options: [
+      {
+        heading: 'Protocol',
+        items: [
+          {
+            label: 'AS/400',
+            value: 'AS/400',
+          },
+          {
+            label: 'MACOS-PETER',
+            value: 'MACOS-PETER',
+          },
+          {
+            label: 'MVS',
+            value: 'MVS',
+          },
+          {
+            label: 'NETWARE',
+            value: 'NETWARE',
+          },
+
+          {
+            label: 'OS/2',
+            value: 'OS/2',
+          },
+          {
+            label: 'OS/400',
+            value: 'OS/400',
+          },
+          {
+            label: 'UNIX',
+            value: 'UNIX',
+          },
+          {
+            label: "UNIX-TRIM'",
+            value: "UNIX-TRIM'",
+          },
+          {
+            label: 'UNKNOWN-TYPE',
+            value: 'UNKNOWN-TYPE',
+          },
+          {
+            label: 'VMS',
+            value: 'VMS',
+          },
+          {
+            label: 'WINDOWS',
+            value: 'WINDOWS',
+          },
+        ],
+      },
+    ],
+  },
+  {
+    id: 'enablePgpEncryptionForm',
+    name: 'enablePgpEncryptionForm',
+    type: 'checkbox',
+    label: 'Use PGP Encryption',
+    description: 'User Directory is Root',
+    placeholder: '',
+    defaultValue: '',
+  },
+
+  {
+    id: 'PGP Public Key',
+    name: '/ftp/pgpEncryptKey',
+    type: 'text',
+    label: 'PGP Public Key',
+    description: '',
+    placeholder:
+      'Note: for security reasons this field must always be re-entered.',
+    defaultValue: '',
+    options: [],
+    visible: true,
+    required: true,
+    disabled: false,
+    visibleWhen: [
+      {
+        id: 'isPgpEncryptionEnabled',
+        field: 'enablePgpEncryptionForm',
+        is: [true],
+      },
+    ],
+    requiredWhen: [],
+    disabledWhen: [],
+  },
+  {
+    id: 'PGP Private Key',
+    name: '/ftp/pgpDecryptKey',
+    type: 'text',
+    label: 'PGP Private Key',
+    description: '',
+    placeholder:
+      'Note: for security reasons this field must always be re-entered.',
+    defaultValue: '',
+    options: [],
+    visible: true,
+    required: true,
+    disabled: false,
+    visibleWhen: [
+      {
+        id: 'isPgpEncryptionEnabled',
+        field: 'enablePgpEncryptionForm',
+        is: [true],
+      },
+    ],
+    requiredWhen: [],
+    disabledWhen: [],
+  },
+  {
+    id: 'PGP Passphrase',
+    name: '/ftp/pgpPassphrase',
+    type: 'text',
+    label: 'PGP Passphrase',
+    description: '',
+    placeholder:
+      'Note: for security reasons this field must always be re-entered.',
+    defaultValue: '',
+    options: [],
+    visible: true,
+    required: true,
+    disabled: false,
+    visibleWhen: [
+      {
+        id: 'isPgpEncryptionEnabled',
+        field: 'enablePgpEncryptionForm',
+        is: [true],
+      },
+    ],
+    requiredWhen: [],
+    disabledWhen: [],
+  },
+];
+// HEADING for each Fragment
+// collapse
+const regularSettingsIncludingCommon = [...common, ...regularSettings];
+
+export default [regularSettingsIncludingCommon, advancedSettings];
diff --git a/src/formsMetadata/definitions/connections/http.js b/src/formsMetadata/definitions/connections/http.js
index 77f435e..05527a8 100644
--- a/src/formsMetadata/definitions/connections/http.js
+++ b/src/formsMetadata/definitions/connections/http.js
@@ -1,186 +1,68 @@
-export default {
-  fields: [
-    // #region Main
-    // name
-    {
-      id: 'ConnectionName',
+export default [
+  {
+    id: 'Name',
+    name: '/name',
+    type: 'text',
+    label: 'Name',
+    description: 'this is the description',
+    placeholder: '',
+    defaultValue: '',
+    options: [],
+    visible: true,
+    required: true,
+    disabled: false,
+    visibleWhen: [],
+    requiredWhen: [],
+    disabledWhen: [],
+    omitWhenHidden: true,
+    valueDelimiter: '',
+    useChangesAsValues: false,
+    shouldMatchRegex: false,
+    hasMinLength: false,
+    hasMaxLength: false,
+    hasNumericalRange: false,
+    shouldCompareTo: false,
+  },
+  {
+    id: 'description',
+    name: '/description',
+    type: 'textarea',
+    label: 'Description',
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+  },
+  {
+    id: 'baseURI',
+    name: '/http/baseURI',
+    type: 'text',
+    label: 'Base URI',
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+    required: true,
+    validWhen: {
+      lengthIsGreaterThan: {
+        length: 3,
+        message: 'The value must have more than 3 characterrs',
+      },
+      lengthIsLessThan: {
+        length: 6,
+        message: 'The value must less than 6 characters',
+      },
+      fallsWithinNumericalRange: {
+        min: 150,
+        max: 80000,
+        message: 'The value must be more than 150 and less than 80000',
+      },
+      matchesRegEx: {
+        pattern: '^[\\d]+$',
+        message: 'Only numbers allowed',
+      },
+      isNot: {
+        values: ['2500', '4001'],
+        message: 'The value cannot be 2500 nor 4001',
+      },
     },
-
-    // baseURI
-    {
-      id: 'baseURI',
-    },
-
-    // media type
-    {
-      id: 'mediaType',
-    },
-
-    // header
-    {
-      id: 'HttpHeader',
-    },
-    // #endregion
-  ],
-  fieldSets: [
-    {
-      header: 'Authentication',
-      collapsed: false,
-      fields: [
-        // #region Auth
-        // auth type
-        {
-          id: 'AuthenticationType',
-        },
-
-        // auth fail code
-        {
-          id: 'AuthFailStatusCode',
-        },
-
-        // auth fail path
-        {
-          id: 'AuthenticationFailPath',
-        },
-
-        // auth fail values
-        {
-          id: 'AuthenticationFailValues',
-        },
-
-        // unencrypted
-        {
-          id: 'Unencrypted',
-        },
-
-        // encrypted
-        {
-          id: 'Encrypted',
-        },
-        // #endregion
-      ],
-    },
-    {
-      header: 'Ping Configuration',
-      collapsed: true,
-      fields: [
-        // #region PING
-        // Ping Relative URI:
-        {
-          id: 'PingRelativeURI',
-        },
-
-        // Ping Method:
-        {
-          id: 'PingMethod',
-        },
-
-        // Ping Success Path:
-        {
-          id: 'PingSuccessPath',
-        },
-
-        // Ping Success Values:
-        {
-          id: 'PingSuccessValues',
-        },
-
-        // Ping Error Path
-        {
-          id: 'PingErrorPath',
-        },
-        // #endregion
-      ],
-    },
-    {
-      header: 'API Rate Limits Configuration (optional)',
-      collapsed: true,
-      fields: [
-        // #region API Rate Limits
-        // Limit
-        {
-          id: 'Limit',
-        },
-
-        // Fail Status Code:
-        {
-          id: 'LimitStatusCode',
-        },
-
-        // Fail Path:
-        {
-          id: 'RateLimitFailPath',
-        },
-
-        // Fail Values:
-        {
-          id: 'RateLimitFailValues',
-        },
-
-        // Retry Header:
-        {
-          id: 'LimitRetryHeader',
-        },
-        // #endregion
-      ],
-    },
-    {
-      header: 'Refresh Token Configuration (optional)',
-      collapsed: true,
-      fields: [
-        // #region Refresh Token
-        // RefreshToken
-        {
-          id: 'RefreshToken',
-        },
-
-        // RefreshRelativeURI:
-        {
-          id: 'RefreshRelativeURI',
-        },
-
-        // RefreshMediaType:
-        {
-          id: 'RefreshMediaType',
-        },
-
-        // RefreshMethod:
-        {
-          id: 'RefreshMethod',
-        },
-
-        // RefreshBody
-        {
-          id: 'RefreshBody',
-        },
-        // RefreshTokenPath:
-        {
-          id: 'RefreshTokenPath',
-        },
-        // #endregion
-      ],
-    },
-    {
-      header: 'Advanced (optional)',
-      collapsed: true,
-      fields: [
-        // #region Advanced
-        // Disable Strict SSL:
-        {
-          id: 'DisableStrictSSL',
-        },
-
-        // Borrow Concurrency From:
-        {
-          id: 'BorrowConcurrencyFrom',
-        },
-
-        // Concurrency Level:
-        {
-          id: 'ConcurrencyLevel',
-        },
-        // #endregion
-      ],
-    },
-  ],
-};
+  },
+];
diff --git a/src/formsMetadata/definitions/connections/index.js b/src/formsMetadata/definitions/connections/index.js
index 8981fec..3712ed5 100644
--- a/src/formsMetadata/definitions/connections/index.js
+++ b/src/formsMetadata/definitions/connections/index.js
@@ -1,7 +1,9 @@
 import http from './http';
 import custom from './custom';
+import ftp from './ftp';
 
 export default {
   http,
   custom,
+  ftp,
 };
diff --git a/src/formsMetadata/definitions/exports/ftp.js b/src/formsMetadata/definitions/exports/ftp.js
deleted file mode 100644
index 01fc3ea..0000000
--- a/src/formsMetadata/definitions/exports/ftp.js
+++ /dev/null
@@ -1,19 +0,0 @@
-export default {
-  fields: [
-    // #region Main
-    // name
-    {
-      id: 'ExportName',
-    },
-    // description
-    {
-      id: 'ExportDescription',
-    },
-
-    // csv parse options
-    {
-      id: 'export.file.csv',
-    },
-    // #endregion
-  ],
-};
diff --git a/src/formsMetadata/definitions/exports/http.js b/src/formsMetadata/definitions/exports/http.js
index ccf15cb..2eae13c 100644
--- a/src/formsMetadata/definitions/exports/http.js
+++ b/src/formsMetadata/definitions/exports/http.js
@@ -1,26 +1,111 @@
-export default {
-  fields: [
-    {
-      id: 'ExportName',
+export default [
+  {
+    id: 'Name',
+    name: '/name',
+    type: 'text',
+    label: 'Name',
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+    options: [],
+    visible: true,
+    required: true,
+    disabled: false,
+    visibleWhen: [],
+    requiredWhen: [],
+    disabledWhen: [],
+    omitWhenHidden: true,
+    valueDelimiter: '',
+    useChangesAsValues: false,
+    shouldMatchRegex: false,
+    hasMinLength: false,
+    hasMaxLength: false,
+    hasNumericalRange: false,
+    shouldCompareTo: false,
+  },
+  {
+    id: 'description',
+    name: '/description',
+    type: 'textarea',
+    label: 'Description',
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+  },
+  {
+    id: 'method',
+    name: '/http/method',
+    type: 'select',
+    label: 'HTTP method',
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+    options: [
+      {
+        items: [
+          {
+            value: 'GET',
+          },
+          {
+            value: 'POST',
+          },
+        ],
+      },
+    ],
+    visible: true,
+    required: true,
+    disabled: false,
+    visibleWhen: [],
+    requiredWhen: [],
+    disabledWhen: [],
+  },
+  {
+    id: 'relativeUri',
+    name: '/http/relativeURI',
+    type: 'relativeUri',
+    label: 'Relative URI',
+    visible: true,
+    required: true,
+    validWhen: {
+      lengthIsGreaterThan: {
+        length: 3,
+        message: 'The value must have more than 3 characterrs',
+      },
+      lengthIsLessThan: {
+        length: 6,
+        message: 'The value must less than 6 characters',
+      },
+      fallsWithinNumericalRange: {
+        min: 150,
+        max: 80000,
+        message: 'The value must be more than 150 and less than 80000',
+      },
+      matchesRegEx: {
+        pattern: '^[\\d]+$',
+        message: 'Only numbers allowed',
+      },
+      isNot: {
+        values: ['2500', '4001'],
+        message: 'The value cannot be 2500 nor 4001',
+      },
     },
-    {
-      id: 'ExportDescription',
-    },
-    {
-      id: 'ExportHttpMethod',
-    },
-    {
-      id: 'ExportHttpRelativeURI',
-    },
-    {
-      id: 'ExportHttpBody',
-      visibleWhen: [
-        {
-          id: 'isPost',
-          field: 'ExportHttpMethod',
-          is: ['POST'],
-        },
-      ],
-    },
-  ],
-};
+  },
+  {
+    id: 'body',
+    name: '/http/body',
+    type: 'text',
+    multiline: true,
+    rowsMax: 5,
+    label: 'HTTP Body',
+    visibleWhen: [
+      {
+        id: 'isPost',
+        field: 'method',
+        is: ['POST'],
+      },
+    ],
+    description: '',
+    placeholder: '',
+    defaultValue: '',
+  },
+];
diff --git a/src/formsMetadata/definitions/exports/index.js b/src/formsMetadata/definitions/exports/index.js
index e2c444a..20590f6 100644
--- a/src/formsMetadata/definitions/exports/index.js
+++ b/src/formsMetadata/definitions/exports/index.js
@@ -1,7 +1,5 @@
 import http from './http';
-import ftp from './ftp';
 
 export default {
   http,
-  ftp,
 };
diff --git a/src/formsMetadata/formFactory.js b/src/formsMetadata/formFactory.js
index 37a5114..986f33b 100644
--- a/src/formsMetadata/formFactory.js
+++ b/src/formsMetadata/formFactory.js
@@ -1,12 +1,10 @@
-import masterFieldHash from './masterFieldHash';
 import formMeta from './definitions';
-import { defaultPatchSetConverter } from './utils';
+import { defaultValueInitializer, defaultPatchSetConverter } from './utils';
 
 const getResourceFormAssets = (connection, resourceType, resource) => {
   let fields = formMeta.common;
-  let fieldSets = [];
-  let converter;
-  let initializer;
+  let converter = defaultPatchSetConverter;
+  let initializer = defaultValueInitializer;
   let meta;
 
   switch (resourceType) {
@@ -18,11 +16,19 @@ const getResourceFormAssets = (connection, resourceType, resource) => {
           meta = meta[resource.assistant];
         }
       } else {
-        meta = formMeta.connections[resource.type];
+        meta = formMeta[resourceType][resource.type];
       }
 
       if (meta) {
-        ({ fields, fieldSets, converter, initializer } = meta);
+        if (Array.isArray(meta)) {
+          fields = meta;
+        } else {
+          fields = meta.fields || [];
+          // patch set
+          converter = meta.converter || defaultPatchSetConverter;
+          // maps store to fields
+          initializer = meta.initializer || defaultValueInitializer;
+        }
       }
 
       break;
@@ -35,9 +41,7 @@ const getResourceFormAssets = (connection, resourceType, resource) => {
         if (meta) {
           meta = meta[connection.type];
 
-          if (meta) {
-            ({ fields, fieldSets, converter, initializer } = meta);
-          }
+          if (meta) fields = meta;
         }
       }
 
@@ -47,64 +51,64 @@ const getResourceFormAssets = (connection, resourceType, resource) => {
       break;
   }
 
-  return {
-    fieldMeta: { fields, fieldSets },
-    converter: converter || defaultPatchSetConverter,
-    initializer,
-  };
+  return { fields, converter, initializer };
 };
 
-const setDefaults = (fields, resource) => {
-  if (!fields || fields.length === 0) return fields;
+const setDefaults = (arrayOfFields, values) => {
+  if (!values || !arrayOfFields) return arrayOfFields;
 
-  return fields.map(f => {
-    const merged = { ...masterFieldHash[f.id], ...f };
+  const addDefaultValue = f => {
+    if (f.name[0] !== '/') return f;
 
-    Object.keys(merged).forEach(key => {
-      if (typeof merged[key] === 'function') {
-        merged[key] = merged[key](resource);
-      }
-    });
+    if (f && values[f.name]) {
+      return { ...f, defaultValue: values[f.name] };
+    }
 
-    return merged;
+    return f;
+  };
+
+  return arrayOfFields.map(fields => {
+    if (Array.isArray(fields))
+      return fields.map(field => addDefaultValue(field));
+
+    if (fields.name[0] !== '/') return fields;
+
+    return addDefaultValue(fields);
   });
 };
 
-const getFieldsWithDefaults = (fieldMeta, resource) => {
-  const filled = [];
-  const { fields, fieldSets } = fieldMeta;
+const disableRelevantFields = (arrayOfFields, fieldsToDisable) => {
+  if (!fieldsToDisable || fieldsToDisable === []) return arrayOfFields;
 
-  if (fieldSets) {
-    fieldSets.forEach(set => {
-      const { fields, ...rest } = set;
+  const disableField = f => {
+    if (fieldsToDisable.includes(f.name)) {
+      return { ...f, disabled: true };
+    }
 
-      filled.push({
-        ...rest,
-        fields: setDefaults(fields, resource),
-      });
-    });
-  }
-
-  return {
-    fields: setDefaults(fields, resource),
-    fieldSets: filled,
+    return f;
   };
+
+  return arrayOfFields.map(fields => {
+    if (Array.isArray(fields)) return fields.map(field => disableField(field));
+
+    return disableField(fields);
+  });
 };
 
-export default ({ resourceType, connection, resource = {} }) => {
-  const { fieldMeta, converter, initializer } = getResourceFormAssets(
+export default ({ resourceType, connection, resource = {}, disableFields }) => {
+  const { fields, converter, initializer } = getResourceFormAssets(
     connection,
     resourceType,
     resource
   );
-  let metaWithDefaults = getFieldsWithDefaults(fieldMeta, resource);
-
-  if (initializer) {
-    metaWithDefaults = initializer({ resource, fieldMeta: metaWithDefaults });
-  }
+  const fieldsAfterDisabling = disableRelevantFields(fields, disableFields);
+  const fieldsWithDefaults = setDefaults(
+    fieldsAfterDisabling,
+    initializer(resource)
+  );
 
   return {
-    fieldMeta: metaWithDefaults,
+    fields: fieldsWithDefaults,
     formValueToPatchSetConverter: converter,
   };
 };
diff --git a/src/formsMetadata/masterFieldHash.js b/src/formsMetadata/masterFieldHash.js
deleted file mode 100644
index 017aaa1..0000000
--- a/src/formsMetadata/masterFieldHash.js
+++ /dev/null
@@ -1,487 +0,0 @@
-export default {
-  // TODO: The current set of field ids for connections is hand coded and not
-  // the correct format. We should use a camel case version of the field's
-  // json path.
-  // #region Connection
-  ConnectionName: {
-    id: 'ConnectionName',
-    name: '/name',
-    helpKey: 'connection.name',
-    defaultValue: r => r.name,
-    type: 'text',
-    label: 'Name',
-  },
-  ConnectionDescription: {
-    id: 'ConnectionDescription',
-    name: '/description',
-    helpKey: 'connection.description',
-    defaultValue: r => r.description,
-    type: 'text',
-    multiline: true,
-    rowsMax: 5,
-    label: 'Description',
-  },
-  baseURI: {
-    id: 'ConnectionBaseURI',
-    name: '/http/baseURI',
-    helpKey: 'connection.http.baseURI',
-    defaultValue: r => r.http.baseURI,
-    type: 'text',
-    label: 'Base URI',
-    required: true,
-  },
-  mediaType: {
-    id: 'ConnectionMediaType',
-    name: '/http/mediaType',
-    helpKey: 'connection.http.mediaType',
-    defaultValue: r => r.http.mediaType,
-
-    type: 'select',
-    label: 'Media Type',
-    options: [
-      {
-        items: [
-          {
-            label: 'JSON',
-            value: 'json',
-          },
-          {
-            label: 'XML',
-            value: 'xml',
-          },
-        ],
-      },
-    ],
-    visible: true,
-    required: true,
-  },
-  HttpHeader: {
-    id: 'ConnectionHttpHeader',
-    name: '/http/headers',
-    helpKey: 'connection.http.headers',
-    defaultValue: r => r.http.headers,
-    label: 'HTTP Headers',
-    type: 'keyvalue',
-    keyName: 'name',
-    valueName: 'value',
-    description: 'If needed, add any custom headers this application requires.',
-  },
-
-  AuthenticationType: {
-    id: 'ConnectionAuthenticationType',
-    name: '/http/auth/type',
-    helpKey: 'connection.http.auth.type',
-    defaultValue: r => r.http.auth.type,
-    type: 'select',
-    label: 'Authentication Type',
-    description: '',
-    placeholder: '',
-    options: [
-      {
-        items: [
-          {
-            label: 'Custom',
-            value: 'custom',
-          },
-          {
-            label: 'Basic',
-            value: 'basic',
-          },
-          {
-            label: 'Token',
-            value: 'token',
-          },
-        ],
-      },
-    ],
-    visible: true,
-    required: false,
-  },
-  AuthFailStatusCode: {
-    id: 'ConnectionAuthFailStatusCode',
-    name: '/http/auth/failStatusCode',
-    helpKey: 'connection.http.auth.failStatusCode',
-    defaultValue: r => r.http.auth.failStatusCode,
-    type: 'text',
-    label: 'Authentication Fail Status Code',
-    description: '',
-    placeholder: 'optional',
-  },
-  AuthenticationFailPath: {
-    id: 'ConnectionAuthenticationFailPath ',
-    name: '/http/auth/failPath',
-    helpKey: 'connection.http.auth.failPath',
-    defaultValue: r => r.http.auth.failPath,
-    type: 'text',
-    label: 'Authentication Fail Path',
-    description: '',
-    placeholder: 'optional',
-  },
-  AuthenticationFailValues: {
-    id: 'ConnectionAuthenticationFailValues',
-    name: '/http/auth/failValues',
-    helpKey: 'connection.http.auth.failValues',
-    defaultValue: r => r.http.auth.failValues,
-    valueDelimiter: ',',
-    type: 'text',
-    label: 'Authentication Fail Values',
-    description: 'Separate multiple values with commas.',
-    placeholder: 'optional',
-  },
-  Unencrypted: {
-    id: 'ConnectionUnencrypted',
-    name: '/http/unencrypted',
-    helpKey: 'connection.http.unencrypted',
-    defaultValue: r => r.http.unencrypted,
-    type: 'editor',
-    mode: 'json',
-    label: 'Unencrypted',
-    description: 'Place any non-sesitive custom connection information here.',
-    placeholder: '{"field": "value"}',
-  },
-  Encrypted: {
-    id: 'ConnectionEncrypted',
-    name: '/http/encrypted',
-    helpKey: 'connection.http.encrypted',
-    defaultValue: r => r.http.encrypted,
-    type: 'editor',
-    mode: 'json',
-    label: 'Encrypted',
-    description: 'Place your sesitive custom connetion information here.',
-    placeholder: '{"field": "value"}',
-  },
-
-  PingRelativeURI: {
-    id: 'ConnectionPingRelativeURI',
-    name: '/http/ping/relativeURI',
-    helpKey: 'connection.http.ping.relativeURI',
-    defaultValue: r => r.http.ping.relativeURI,
-    connectionId: r => r._id,
-    type: 'relativeuri',
-    label: 'Relative URI',
-    description: '',
-    placeholder: 'optional',
-  },
-  PingMethod: {
-    id: 'ConnectionPingMethod',
-    name: '/http/ping/method',
-    helpKey: 'connection.http.ping.method',
-    defaultValue: r => r.http.ping.method,
-    type: 'select',
-    label: 'Ping Method',
-    description: '',
-    options: [
-      {
-        items: ['GET', 'PUT', 'POST'],
-      },
-    ],
-  },
-  PingSuccessPath: {
-    id: 'ConnectionPingSuccessPath',
-    name: '/http/ping/successPath',
-    helpKey: 'connection.http.ping.successPath',
-    defaultValue: r => r.http.ping.successPath,
-    type: 'text',
-    label: 'Success Path',
-    description: '',
-    placeholder: 'optional',
-  },
-  PingSuccessValues: {
-    id: 'ConnectionPingSuccessValues',
-    name: '/http/ping/successValues',
-    helpKey: 'connection.http.ping.successValues',
-    defaultValue: r => r.http.ping.successValues,
-    valueDelimiter: ',',
-    type: 'text',
-    label: 'Success Values',
-    description: '',
-    placeholder: 'optional',
-  },
-  PingErrorPath: {
-    id: 'ConnectionPingErrorPath',
-    name: '/http/ping/errorPath',
-    helpKey: 'connection.http.ping.errorPath',
-    defaultValue: r => r.http.ping.errorPath,
-    type: 'text',
-    label: 'Error Path',
-    description: '',
-    placeholder: 'optional',
-  },
-  Limit: {
-    id: 'ConnectionLimit',
-    name: '/http/rateLimit/limit',
-    helpKey: 'connection.http.rateLimit.limit',
-    defaultValue: r => r.http && r.http.rateLimit && r.http.rateLimit.limit,
-    type: 'text',
-    label: 'Limit',
-    placeholder: 'optional',
-  },
-  LimitStatusCode: {
-    id: 'ConnectionLimitStatusCode',
-    name: '/http/rateLimit/failStatusCode',
-    helpKey: 'connection.http.rateLimit.failStatusCode',
-    defaultValue: r =>
-      r.http && r.http.rateLimit && r.http.rateLimit.failStatusCode,
-    type: 'text',
-    label: 'Fail Status Code',
-    placeholder: 'optional',
-  },
-  RateLimitFailPath: {
-    id: 'ConnectionRateLimitFailPath',
-    name: '/http/rateLimit/failPath',
-    helpKey: 'connection.http.rateLimit.failPath',
-    defaultValue: r => r.http && r.http.rateLimit && r.http.rateLimit.failPath,
-    type: 'text',
-    label: 'Fail Path',
-    placeholder: 'optional',
-  },
-  RateLimitFailValues: {
-    id: 'ConnectionRateLimitFailValues',
-    name: '/http/rateLimit/failValues',
-    helpKey: 'connection.http.rateLimit.failValues',
-    defaultValue: r =>
-      r.http && r.http.rateLimit && r.http.rateLimit.failValues,
-    valueDelimiter: ',',
-    type: 'text',
-    label: 'Fail Values',
-    placeholder: 'optional',
-  },
-  LimitRetryHeader: {
-    id: 'ConnectionLimitRetryHeader',
-    name: '/http/rateLimit/retryHeader',
-    helpKey: 'connection.http.rateLimit.retryHeader',
-    defaultValue: r =>
-      r.http && r.http.rateLimit && r.http.rateLimit.retryHeader,
-    type: 'text',
-    label: 'Retry Header',
-    placeholder: 'optional',
-  },
-  RefreshToken: {
-    id: 'ConnectionRefreshToken',
-    name: '/http/auth/token/refreshToken',
-    helpKey: 'connection.http.auth.token.refreshToken',
-    defaultValue: r =>
-      r.http &&
-      r.http.auth &&
-      r.http.auth.token &&
-      r.http.auth.token.refreshToken,
-    type: 'text',
-    label: 'Refresh Token',
-  },
-  RefreshRelativeURI: {
-    id: 'ConnectionRefreshRelativeURI',
-    name: '/http/auth/token/refreshRelativeURI',
-    helpKey: 'connection.http.auth.token.refreshRelativeURI',
-    defaultValue: r =>
-      r.http &&
-      r.http.auth &&
-      r.http.auth.token &&
-      r.http.auth.token.refreshRelativeURI,
-    connectionId: r => r._id,
-    type: 'relativeuri',
-    label: 'Relative URI',
-  },
-  RefreshMediaType: {
-    id: 'ConnectionRefreshMediaType',
-    name: '/http/auth/token/refreshMediaType',
-    helpKey: 'connection.http.auth.token.refreshMediaType',
-    defaultValue: r =>
-      r.http &&
-      r.http.auth &&
-      r.http.auth.token &&
-      r.http.auth.token.refreshMediaType,
-    type: 'select',
-    options: [
-      {
-        items: ['XML', 'JSON'],
-      },
-    ],
-    label: 'Media type',
-  },
-  RefreshMethod: {
-    id: 'ConnectionRefreshMethod',
-    name: '/http/auth/token/refreshMethod',
-    helpKey: 'connection.http.auth.token.refreshMethod',
-    defaultValue: r =>
-      r.http &&
-      r.http.auth &&
-      r.http.auth.token &&
-      r.http.auth.token.refreshMethod,
-    type: 'select',
-    options: [
-      {
-        items: ['GET', 'PUT', 'POST'],
-      },
-    ],
-    label: 'HTTP method',
-  },
-  RefreshBody: {
-    id: 'ConnectionRefreshBody',
-    name: '/http/auth/token/refreshBody',
-    helpKey: 'connection.http.auth.token.refreshBody',
-    defaultValue: r =>
-      r.http &&
-      r.http.auth &&
-      r.http.auth.token &&
-      r.http.auth.token.refreshBody,
-    type: 'editor',
-    mode: '{{http.auth.token.refreshMethod}}',
-    label: 'HTTP body',
-  },
-  RefreshTokenPath: {
-    id: 'ConnectionRefreshTokenPath',
-    name: '/http/auth/token/refreshTokenPath',
-    helpKey: 'connection.http.auth.token.refreshTokenPath',
-    defaultValue: r =>
-      r.http &&
-      r.http.auth &&
-      r.http.auth.token &&
-      r.http.auth.token.refreshTokenPath,
-    type: 'text',
-    label: 'Token Path',
-  },
-  DisableStrictSSL: {
-    id: 'ConnectionDisableStrictSSL',
-    name: '/http/disableStrictSSL',
-    helpKey: 'connection.http.disableStrictSSL',
-    defaultValue: r => r.http.disableStrictSSL,
-    type: 'checkbox',
-    label: 'Disable Strict SSL',
-  },
-  BorrowConcurrencyFrom: {
-    id: 'ConnectionBorrowConcurrencyFrom',
-    name: '/_borrowConcurrencyFromConnectionId',
-    helpKey: 'connection._borrowConcurrencyFromConnectionId',
-    resourceType: 'connections',
-    defaultValue: r => r._borrowConcurrencyFromConnectionId,
-    filter: r => ({ type: r.type }),
-    excludeFilter: r => ({ _id: r._id }),
-    type: 'selectresource',
-    label: 'Borrow Concurrency From',
-  },
-  ConcurrencyLevel: {
-    id: 'ConnectionConcurrencyLevel',
-    name: '/http/concurrencyLevel',
-    helpKey: 'connection.http.concurrencyLevel',
-    defaultValue: r => r.http.concurrencyLevel,
-    type: 'select',
-    options: [
-      {
-        items: [
-          { label: ' ', value: 0 },
-          { label: '1', value: 1 },
-          { label: '2', value: 2 },
-          { label: '3', value: 3 },
-          { label: '4', value: 4 },
-          { label: '5', value: 5 },
-          { label: '6', value: 6 },
-          { label: '7', value: 7 },
-          { label: '8', value: 8 },
-          { label: '9', value: 9 },
-          { label: '10', value: 10 },
-          { label: '11', value: 11 },
-          { label: '12', value: 12 },
-          { label: '13', value: 13 },
-          { label: '14', value: 14 },
-          { label: '15', value: 15 },
-          { label: '16', value: 16 },
-          { label: '17', value: 17 },
-          { label: '18', value: 18 },
-          { label: '19', value: 19 },
-          { label: '20', value: 20 },
-          { label: '21', value: 21 },
-          { label: '22', value: 22 },
-          { label: '23', value: 23 },
-          { label: '24', value: 24 },
-          { label: '25', value: 25 },
-        ],
-      },
-    ],
-    label: 'Concurrency Level',
-  },
-  // #endregion Connection
-
-  // #region Export
-  'export.file.csv': {
-    id: 'export.file.csv',
-    name: '/file/csv',
-    type: 'csvparse',
-    helpText: 'Use this editor to preview how your parse options affect your ',
-    label: 'Configure CSV parse options',
-    defaultValue: r => r.file && r.file.csv,
-    sampleData: r => r.sampleData,
-  },
-
-  ExportName: {
-    id: 'ExportName',
-    name: '/name',
-    helpKey: 'export.name',
-    defaultValue: r => r.name,
-    type: 'text',
-    label: 'Name',
-  },
-  ExportDescription: {
-    id: 'ExportDescription',
-    name: '/description',
-    helpKey: 'export.description',
-    defaultValue: r => r.description,
-    type: 'text',
-    multiline: true,
-    rowsMax: 4,
-    label: 'Description',
-  },
-  ExportHttpMethod: {
-    id: 'ExportHttpMethod',
-    name: '/http/method',
-    helpKey: 'export.http.method',
-    defaultValue: r => r.http.method,
-    type: 'select',
-    label: 'HTTP method',
-    options: [
-      {
-        items: ['GET', 'POST'],
-      },
-    ],
-  },
-  ExportHttpRelativeURI: {
-    id: 'ExportHttpRelativeURI',
-    name: '/http/relativeURI',
-    helpKey: 'export.http.relativeURI',
-    defaultValue: r => r.http.relativeURI,
-    connectionId: r => r._connectionId,
-    type: 'relativeuri',
-    label: 'Relative URI',
-    required: true,
-  },
-  ExportHttpBody: {
-    id: 'ExportHttpBody',
-    name: '/http/body',
-    helpKey: 'export.http.body',
-    defaultValue: r => r.http.body,
-    type: 'editor',
-    mode: 'json',
-    label: 'HTTP Body',
-  },
-  // #endregion Export
-
-  // #region Import
-  'import.name': {
-    id: 'import.name',
-    name: '/name',
-    helpKey: 'import.name',
-    defaultValue: r => r.name,
-    type: 'text',
-    label: 'Name',
-  },
-  'import.description': {
-    id: 'import.description',
-    name: '/description',
-    helpKey: 'import.description',
-    defaultValue: r => r.description,
-    type: 'text',
-    multiline: true,
-    rowsMax: 4,
-    label: 'Description',
-  },
-  // #endregion Import
-};
diff --git a/src/formsMetadata/utils.js b/src/formsMetadata/utils.js
index c717a1e..f3e3381 100644
--- a/src/formsMetadata/utils.js
+++ b/src/formsMetadata/utils.js
@@ -1,7 +1,7 @@
 export const defaultValueInitializer = values => {
   const results = {};
   const recurse = (values, path) => {
-    if (Array.isArray(values) || typeof values !== 'object') {
+    if (typeof values !== 'object') {
       results[path] = values;
 
       return;
@@ -15,11 +15,6 @@ export const defaultValueInitializer = values => {
   return results;
 };
 
-export const defaultInitializer = ({ resource, fieldMeta }) => ({
-  formValues: defaultValueInitializer(resource),
-  fieldMeta,
-});
-
 export const defaultPatchSetConverter = values =>
   Object.keys(values).map(key => ({
     op: 'replace',
@@ -27,99 +22,7 @@ export const defaultPatchSetConverter = values =>
     value: values[key],
   }));
 
-export const getFieldById = ({ meta, id }) => {
-  let field;
-
-  if (meta.fields) {
-    field = meta.fields.find(f => f.id === id);
-
-    if (field) return field;
-  }
-
-  if (meta.fieldSets && meta.fieldSets.length > 0) {
-    meta.fieldSets.some(set => {
-      field = set.fields.find(f => f.id === id);
-
-      // break out of 'some' iterations as soon as any callback finds a field.
-      return !!field;
-    });
-  }
-
-  return field;
-};
-
-export const getFieldByName = ({ fieldMeta, name }) => {
-  let field;
-
-  if (fieldMeta.fields) {
-    field = fieldMeta.fields.find(f => f.name === name);
-
-    if (field) return field;
-  }
-
-  if (fieldMeta.fieldSets && fieldMeta.fieldSets.length > 0) {
-    fieldMeta.fieldSets.some(set => {
-      field = set.fields.find(f => f.name === name);
-
-      // break out of 'some' iterations as soon as any callback finds a field.
-      return !!field;
-    });
-  }
-
-  return field;
-};
-
-export const sanitizePatchSet = ({ patchSet, fieldMeta }) => {
-  if (!fieldMeta || !patchSet) return patchSet;
-
-  const newSet = [];
-
-  patchSet.forEach(patch => {
-    const field = getFieldByName({ name: patch.path, fieldMeta });
-
-    if (patch.op === 'replace' && field.defaultValue !== patch.value) {
-      newSet.push(patch);
-    }
-  });
-
-  return newSet;
-};
-
-export const replaceField = ({ meta, field }) => {
-  if (meta.fields) {
-    for (let i = 0; i < meta.fields.length; i += 1) {
-      if (meta.fields[i].id === field.id) {
-        // we WANT to modify the meta since the calling function should
-        // already be dealing with a copy.
-        meta.fields[i] = field; // eslint-disable-line
-
-        // break as soon as replacement occurres.
-        return meta;
-      }
-    }
-  }
-
-  if (meta.fieldSets && meta.fieldSets.length > 0) {
-    for (let i = 0; i < meta.fieldSets.length; i += 1) {
-      const set = meta.fieldSets[i];
-
-      for (let j = 0; j < set.fields.length; j += 1) {
-        if (set.fields[j].id === field.id) {
-          set.fields[j] = field;
-
-          return meta;
-        }
-      }
-    }
-  }
-
-  return meta;
-};
-
 export default {
-  getFieldById,
-  replaceField,
-  defaultInitializer,
   defaultValueInitializer,
   defaultPatchSetConverter,
 };
diff --git a/src/reducers/index.js b/src/reducers/index.js
index e1f521e..f2c33f4 100644
--- a/src/reducers/index.js
+++ b/src/reducers/index.js
@@ -7,7 +7,11 @@ import resourceDefaults from './resourceDefaults';
 import auth from './authentication';
 import user, * as fromUser from './user';
 import actionTypes from '../actions/types';
-import { changePasswordParams, changeEmailParams } from '../sagas/api/apiPaths';
+import {
+  changePasswordParams,
+  changeEmailParams,
+  pingConnectionParams,
+} from '../sagas/api/apiPaths';
 
 const combinedReducers = combineReducers({
   session,
@@ -235,6 +239,31 @@ export function changeEmailMsg(state) {
 
 // #endregion PASSWORD & EMAIL update selectors for modals
 
+export function testConnectionCommState(state) {
+  if (
+    state &&
+    state.comms &&
+    state.comms[pingConnectionParams.path] &&
+    state.comms[pingConnectionParams.path].status
+  ) {
+    const comm = state.comms[pingConnectionParams.path];
+    // const commState = {
+    //   success: comm.status === fromComms.COMM_STATES.SUCCESS,
+    //   failure: comm.status === fromComms.COMM_STATES.ERROR,
+    //   loading: comm.status === fromComms.COMM_STATES.LOADING,
+    //   message: comm.message,
+    // };
+    const commState = {
+      commState: comm.status,
+      message: comm.message,
+    };
+
+    return commState;
+  }
+
+  return { success: null, failure: null, message: null };
+}
+
 export function themeName(state) {
   return fromUser.appTheme((state && state.user) || null);
 }
@@ -268,11 +297,11 @@ export function processors(state) {
 export function integratorLicense(state) {
   const preferences = userPreferences(state);
 
-  // console.log(
-  //   `integratorLicense#1 preferences.defaultAShareId : ${
-  //     preferences.defaultAShareId
-  //   }`
-  // );
+  console.log(
+    `integratorLicense#1 preferences.defaultAShareId : ${
+      preferences.defaultAShareId
+    }`
+  );
 
   return fromUser.integratorLicense(state.user, preferences.defaultAShareId);
 }
diff --git a/src/reducers/session/editors/processorLogic/xmlParser.js b/src/reducers/session/editors/processorLogic/xmlParser.js
index 028a73e..dfe111c 100644
--- a/src/reducers/session/editors/processorLogic/xmlParser.js
+++ b/src/reducers/session/editors/processorLogic/xmlParser.js
@@ -17,7 +17,7 @@ const requestBody = editor => {
           type: 'xml',
           version: 1,
           rules: {
-            V0_json: !editor.advanced,
+            V0_json: !editor.leanJson,
             trimSpaces: editor.trimSpaces,
             stripNewLineChars: editor.stripNewLineChars,
             attributePrefix: editor.attributePrefix,
diff --git a/src/reducers/session/editors/test.js b/src/reducers/session/editors/test.js
index fa8b1cb..c431d8d 100644
--- a/src/reducers/session/editors/test.js
+++ b/src/reducers/session/editors/test.js
@@ -239,7 +239,7 @@ describe('editor selectors', () => {
         processor: 'xmlParser',
         valid: {
           initOpts: {
-            advanced: true,
+            leanJson: true,
             trimSpaces: true,
             stripNewLineChars: true,
             attributePrefix: '@',
@@ -275,7 +275,7 @@ describe('editor selectors', () => {
         },
         invalid: {
           initOpts: {
-            advanced: true,
+            leanJson: true,
             data: '',
           },
           violations: {
diff --git a/src/reducers/user/org/users/test.js b/src/reducers/user/org/users/test.js
index 67b96e2..4a401ef 100644
--- a/src/reducers/user/org/users/test.js
+++ b/src/reducers/user/org/users/test.js
@@ -1,5 +1,5 @@
 /* global describe, test, expect */
-import reducer from './';
+import reducer, * as selectors from './';
 import actions from '../../../../actions';
 
 describe('users (ashares) reducers', () => {
diff --git a/src/reducers/user/preferences/index.js b/src/reducers/user/preferences/index.js
index 9d5fe91..1da5976 100644
--- a/src/reducers/user/preferences/index.js
+++ b/src/reducers/user/preferences/index.js
@@ -51,7 +51,7 @@ export default (state = { environment: 'production' }, action) => {
 export function userPreferences(state) {
   if (!state) return {};
 
-  const { defaultAShareId, accounts = {} } = state;
+  const { defaultAShareId, accounts } = state;
   let mergedPreferences;
 
   if (!defaultAShareId || defaultAShareId === 'own') {
diff --git a/src/sagas/api/apiPaths.js b/src/sagas/api/apiPaths.js
index 88177a2..6b74969 100644
--- a/src/sagas/api/apiPaths.js
+++ b/src/sagas/api/apiPaths.js
@@ -64,6 +64,12 @@ export const updatePreferencesParams = {
   path: '/preferences',
 };
 
+export const pingConnectionParams = {
+  opts: {
+    method: 'POST',
+  },
+  path: '/connections/ping',
+};
 export const requestTrialLicenseParams = {
   opts: {
     method: 'POST',
diff --git a/src/sagas/api/index.js b/src/sagas/api/index.js
index 25a5aff..892e59e 100644
--- a/src/sagas/api/index.js
+++ b/src/sagas/api/index.js
@@ -76,10 +76,9 @@ export async function throwExceptionUsingTheResponse(response) {
   });
 }
 
-export function checkToThrowSessionValidationException(response) {
+function checkToThrowSessionValidationException(response) {
   // when session is invalidated then we
   // expect to get a 200 response with the response url being the sign in page
-  console.log('check to throw ', response);
 
   if (response.status === 200) {
     const { host, protocol } = getHostAndProtocol();
@@ -92,10 +91,44 @@ export function checkToThrowSessionValidationException(response) {
   }
 }
 
-export async function introduceNetworkLatency() {
+async function introduceNetworkLatency() {
   await delay(process.env.ADD_NETWORK_LATENCY || 0);
 }
 
+const NonIdempotentRequests = ['POST'];
+
+export const apiWatcherAction = (path, opts) => {
+  let { options, req } = createAppropriatePathAndOptions(path, opts);
+
+  if (!options || !options.method) {
+    if (!options) options = {};
+    options.method = 'GET';
+  }
+
+  // all request bodies we stringify
+  if (options && options.body) {
+    options.body = JSON.stringify(options.body);
+  }
+
+  if (NonIdempotentRequests.includes(options.method)) {
+    return {
+      url: req,
+      responseType: 'text',
+      ...options,
+      method: options.method,
+    };
+  }
+
+  delete options.body;
+
+  return {
+    url: req,
+    responseType: 'text',
+    ...options,
+    method: options.method,
+  };
+};
+
 export const api = async (path, opts = {}) => {
   const { options, req } = createAppropriatePathAndOptions(path, opts);
 
@@ -106,6 +139,8 @@ export const api = async (path, opts = {}) => {
 
   // for development only to slow down local api calls
   // lets built for a good UX that can deal with high latency calls...
+  // if (req === '/api/connections/ping')
+
   await introduceNetworkLatency();
 
   try {
diff --git a/src/sagas/authentication/index.js b/src/sagas/authentication/index.js
index 49ed5d4..d273885 100644
--- a/src/sagas/authentication/index.js
+++ b/src/sagas/authentication/index.js
@@ -1,11 +1,4 @@
-import {
-  call,
-  put,
-  takeEvery,
-  takeLatest,
-  all,
-  select,
-} from 'redux-saga/effects';
+import { call, put, takeEvery, all, select } from 'redux-saga/effects';
 import actions from '../../actions';
 import actionTypes from '../../actions/types';
 import { authParams, logoutParams, getCSRFParams } from '../api/apiPaths';
@@ -18,7 +11,6 @@ import {
 } from '../../utils/session';
 import * as selectors from '../../reducers';
 import { intializationResources } from '../../reducers/data';
-import { createAppropriatePathAndOptions } from '../api';
 
 export function* retrievingOrgDetails() {
   yield all([
@@ -170,12 +162,10 @@ export function* initializeApp() {
 
 export function* invalidateSession() {
   try {
-    const csrfToken = yield call(getCSRFToken);
-    const logoutOpts = { ...logoutParams.opts, body: { csrfToken } };
-
+    logoutParams.opts.body._csrf = yield call(getCSRFToken);
     yield call(apiCallWithRetry, {
       path: logoutParams.path,
-      opts: logoutOpts,
+      opts: logoutParams.opts,
       message: 'Logging out user',
     });
     yield call(removeCSRFToken);
@@ -187,7 +177,7 @@ export function* invalidateSession() {
 }
 
 export const authenticationSagas = [
-  takeLatest(actionTypes.USER_LOGOUT, invalidateSession),
+  takeEvery(actionTypes.USER_LOGOUT, invalidateSession),
   takeEvery(actionTypes.INIT_SESSION, initializeApp),
   takeEvery(actionTypes.AUTH_REQUEST, auth),
 ];
diff --git a/src/sagas/editor/index.js b/src/sagas/editor/index.js
index 4fbe96a..52336ac 100644
--- a/src/sagas/editor/index.js
+++ b/src/sagas/editor/index.js
@@ -67,13 +67,6 @@ export function* refreshHelperFunctions() {
       resourceType: 'processors',
       message: 'Getting Helper functions',
     });
-
-    // if the response is undefined
-    // the call must have failed for some collection call failure
-    // it could be because of an authentication issue
-    // In that case don't update helperfunctions in localStorage
-    // and its timestamp
-    if (!allHelperFunctions) return;
     // destructuring for handlebars helperFunctions
     const {
       handlebars: { helperFunctions: tmpHelperFunctions },
diff --git a/src/sagas/editor/test.js b/src/sagas/editor/test.js
index 6942ecd..3f9c923 100644
--- a/src/sagas/editor/test.js
+++ b/src/sagas/editor/test.js
@@ -281,20 +281,4 @@ describe('refreshHelperFunctions saga', () => {
     );
     clear();
   });
-  test(`should exit gracefully when the getResource api call fails and should not alter localStorage Helperfunctions as well`, () => {
-    localStorage.getItem = jest.fn().mockImplementationOnce(() => null);
-    localStorage.setItem = jest.fn();
-
-    const saga = refreshHelperFunctions();
-    const getResourceEffect = saga.next(undefined).value;
-
-    expect(getResourceEffect).toEqual(
-      call(getResource, {
-        resourceType: 'processors',
-        message: 'Getting Helper functions',
-      })
-    );
-
-    expect(saga.next().done).toEqual(true);
-  });
 });
diff --git a/src/sagas/index.js b/src/sagas/index.js
index 2e83ac4..b3eb29d 100644
--- a/src/sagas/index.js
+++ b/src/sagas/index.js
@@ -1,70 +1,129 @@
-import { all, call, put, take, race } from 'redux-saga/effects';
-import { createRequestInstance, sendRequest } from 'redux-saga-requests';
+import { delay } from 'redux-saga';
+import { all, call, put, take } from 'redux-saga/effects';
+import {
+  createRequestInstance,
+  watchRequests,
+  success,
+  error,
+  abort,
+} from 'redux-saga-requests';
 import { createDriver } from 'redux-saga-requests-fetch';
 import actions from '../actions';
-import actionsTypes from '../actions/types';
+import actionTypes from '../actions/types';
 import { resourceSagas } from './resources';
 import { userSagas } from './users';
 import editorSagas from './editor';
-import {
-  onRequestSaga,
-  onSuccessSaga,
-  onErrorSaga,
-  onAbortSaga,
-} from './requestInterceptors';
 import { authenticationSagas } from './authentication';
-import { logoutParams } from './api/apiPaths';
+import { api, apiWatcherAction } from './api';
+
+const tryCount = 3;
 
 export function* unauthenticateAndDeleteProfile() {
   yield put(actions.auth.failure('Authentication Failure'));
   yield put(actions.user.profile.delete());
 }
 
-// TODO: decide if we this saga has to have takeLatest
-// api call
+function WatcherException(status, message) {
+  this.status = status;
+  this.message = message;
+}
+
+const validActions = [
+  success(actionTypes.API_WATCHER),
+  error(actionTypes.API_WATCHER),
+  abort(actionTypes.API_WATCHER),
+];
+
+function* apiWatcher(path, opts) {
+  const apiWatcherActionPayload = apiWatcherAction(path, opts);
+
+  yield put(actions.apiWatcher.request(apiWatcherActionPayload));
+  const actionTaken = yield take(action => {
+    if (validActions.includes(action.type)) {
+      return (
+        action.meta.requestAction.request.url === apiWatcherActionPayload.url
+      );
+    }
+
+    return false;
+  });
+
+  if (actionTaken.type === error(actionTypes.API_WATCHER)) {
+    if (actionTaken.error && actionTaken.error.response) {
+      const respStatus = actionTaken.error.response.status;
+
+      throw new WatcherException(respStatus, actionTaken.error);
+    }
+
+    return null;
+  }
+
+  if (actionTaken.type === abort(actionTypes.API_WATCHER)) {
+    throw new WatcherException('ABORTED', '');
+  }
+
+  // if (actionTaken.response.status === 204) return null;
+  if (actionTaken.data === '') return;
+
+  return JSON.parse(actionTaken.data);
+}
+
 export function* apiCallWithRetry(args) {
-  const { opts, path } = args;
+  const { path, opts, message = path, hidden = false } = args;
   const method = (opts && opts.method) || 'GET';
-  const apiRequestAction = {
-    type: 'API_WATCHER',
-    request: { url: path, method, args },
-  };
-
-  try {
-    let apiResp;
-
-    if (path !== logoutParams.path) {
-      [apiResp] = yield race([
-        call(sendRequest, apiRequestAction, {
-          dispatchRequestAction: true,
-        }),
-        take(actionsTypes.USER_LOGOUT),
-      ]);
-    } else {
-      apiResp = yield call(sendRequest, apiRequestAction, {
-        dispatchRequestAction: true,
-      });
-    }
 
-    const { response } = apiResp;
+  yield put(actions.api.request(path, message, hidden, method));
+
+  for (let i = 0; i < tryCount; i += 1) {
+    try {
+      const successResponse = yield call(apiWatcher, path, opts);
 
-    return response;
-  } catch (error) {
-    throw error;
+      yield put(actions.api.complete(path));
+
+      return successResponse;
+    } catch (error) {
+      if (error.status === 'ABORTED') throw error;
+
+      if (error.status >= 400 && error.status < 500) {
+        // give up and let the parent saga try.
+        yield put(actions.api.complete(path));
+
+        // All api calls should have this behavior
+        // & CSRF expiration failure should dispatch these actions
+        if (error.status === 401 || error.status === 403) {
+          yield call(unauthenticateAndDeleteProfile);
+        }
+
+        throw error;
+      }
+
+      if (i < tryCount - 1) {
+        yield call(delay, 2000);
+        yield put(actions.api.retry(path));
+      } else {
+        // attempts failed after 'tryCount' attempts
+        // this time yield an error...
+        yield put(actions.api.failure(path, error.message));
+        // the parent saga may need to know if there was an error for
+        // its own "Data story"...
+        throw error;
+      }
+    }
   }
 }
 
 export default function* rootSaga() {
   yield createRequestInstance({
     driver: createDriver(window.fetch, {
+      // optional - it works like axios baseURL, prepending all relative urls
       AbortController: window.AbortController, // optional, if your browser supports AbortController or you use a polyfill like https://github.com/mo/abortcontroller-polyfill
     }),
-    onRequest: onRequestSaga,
-    onSuccess: onSuccessSaga,
-    onError: onErrorSaga,
-    onAbort: onAbortSaga,
   });
   yield all([
+    watchRequests({
+      takeLatest: false,
+      abortOn: [actionTypes.CANCEL_TASK, actionTypes.USER_LOGOUT],
+    }),
     ...resourceSagas,
     ...editorSagas,
     ...userSagas,
diff --git a/src/sagas/requestInterceptors.js b/src/sagas/requestInterceptors.js
deleted file mode 100644
index b43f73a..0000000
--- a/src/sagas/requestInterceptors.js
+++ /dev/null
@@ -1,116 +0,0 @@
-import { delay } from 'redux-saga';
-import { call, put, select } from 'redux-saga/effects';
-import { sendRequest } from 'redux-saga-requests';
-import actions from '../actions';
-import {
-  createAppropriatePathAndOptions,
-  introduceNetworkLatency,
-  APIException,
-  checkToThrowSessionValidationException,
-  throwExceptionUsingTheResponse,
-} from './api/index';
-import { unauthenticateAndDeleteProfile } from '.';
-import { resourceStatus } from '../reducers/index';
-
-const tryCount = 3;
-
-export function* onRequestSaga(request) {
-  const { path, opts, message = path, hidden = false } = request.args;
-  const method = (opts && opts.method) || 'GET';
-
-  yield put(actions.api.request(path, message, hidden, method));
-
-  const { options, req } = createAppropriatePathAndOptions(path, opts);
-
-  // all request bodies we stringify
-  if (options && options.body) {
-    options.body = JSON.stringify(options.body);
-  }
-
-  // for development only to slow down local api calls
-  // lets built for a good UX that can deal with high latency calls...
-
-  yield introduceNetworkLatency();
-  const requestPayload = {
-    url: req,
-    method,
-    ...options,
-    meta: {
-      path,
-    },
-    responseType: 'text',
-  };
-
-  return requestPayload;
-}
-
-export function* onSuccessSaga(response, action) {
-  const { path } = action.request.meta;
-
-  yield put(actions.api.complete(path));
-
-  // if error in response
-  if (response.status >= 400 && response.status < 600) {
-    throwExceptionUsingTheResponse(response);
-  }
-
-  // This api does not support 204 very well so
-  // we expect all responses to be of type text
-
-  try {
-    checkToThrowSessionValidationException(response);
-  } catch (e) {
-    yield call(unauthenticateAndDeleteProfile);
-
-    return null;
-  }
-
-  // if 204
-  if (response.data === '') return undefined;
-
-  response.data = JSON.parse(response.data);
-
-  return response.data;
-}
-
-export function* onErrorSaga(error, action) {
-  const { path } = action.request.meta;
-  const { retryCount } = select(resourceStatus, path);
-
-  if (error.status >= 400 && error.status < 500) {
-    // give up and let the parent saga try.
-    yield put(actions.api.complete(path));
-
-    // All api calls should have this behavior
-    // & CSRF expiration failure should dispatch these actions
-    if (error.status === 401 || error.status === 403) {
-      yield call(unauthenticateAndDeleteProfile);
-    }
-
-    throw new APIException(error);
-  }
-  // TODO: Use select effect to get the retry count
-
-  if (retryCount < tryCount - 1) {
-    yield call(delay, 2000);
-    yield put(actions.api.retry(path));
-    yield call(sendRequest, action, { silent: true });
-  } else {
-    // attempts failed after 'tryCount' attempts
-    // this time yield an error...
-    yield put(actions.api.failure(path, error.message));
-    // the parent saga may need to know if there was an error for
-    // its own "Data story"...
-    throw new APIException(error);
-  }
-
-  // not related token error, we pass it like nothing happened
-  return { error };
-}
-
-export function onAbortSaga(action) {
-  // do sth, for example an action dispatch
-  //
-
-  console.log('check act ', action);
-}
diff --git a/src/sagas/resources/connections/index.js b/src/sagas/resources/connections/index.js
new file mode 100644
index 0000000..b6aaced
--- /dev/null
+++ b/src/sagas/resources/connections/index.js
@@ -0,0 +1,68 @@
+import { call, put, takeEvery, select } from 'redux-saga/effects';
+import jsonpatch from 'fast-json-patch';
+import actionTypes from '../../../actions/types';
+import actions from '../../../actions';
+import { apiCallWithRetry } from '../../index';
+import { pingConnectionParams } from '../../api/apiPaths';
+import * as selectors from '../../../reducers/index';
+
+// ping exception
+function PingException(response) {
+  this.message = response.errors
+    .map(error => error.message)
+    .reduce((initialValue, iter) => initialValue + iter, '');
+}
+
+function* createPayload({ formFieldValues, resourceType, resourceId }) {
+  const patchOperations = Object.keys(formFieldValues).map(key => ({
+    op: 'add',
+    path: key,
+    value: formFieldValues[key],
+  }));
+  // TODO: Select resource Data staged changes should be included
+  const connectionResource = yield select(
+    selectors.resource,
+    resourceType,
+    resourceId
+  );
+
+  return jsonpatch.applyPatch(connectionResource, patchOperations).newDocument;
+}
+
+function* pingConnection({ connection, resourceType, resourceId }) {
+  try {
+    const connectionPayload = yield call(createPayload, {
+      formFieldValues: connection,
+      resourceType,
+      resourceId,
+    });
+    const resp = yield call(apiCallWithRetry, {
+      path: pingConnectionParams.path,
+      opts: { body: connectionPayload, ...pingConnectionParams.opts },
+      hidden: true,
+    });
+
+    if (resp && resp.errors) throw new PingException(resp);
+    yield put(
+      actions.api.complete(
+        pingConnectionParams.path,
+        'Connection is working fine!'
+      )
+    );
+  } catch (errors) {
+    if (errors.status === 'ABORTED') {
+      yield put(
+        actions.api.complete(
+          pingConnectionParams.path,
+          'Task has been cancelled'
+        )
+      );
+
+      return;
+    }
+
+    yield put(actions.api.failure(pingConnectionParams.path, errors.message));
+  }
+}
+
+export default [takeEvery(actionTypes.TEST_CONNECTION, pingConnection)];
diff --git a/src/sagas/resources/index.js b/src/sagas/resources/index.js
index 2d05e47..9777ae2 100644
--- a/src/sagas/resources/index.js
+++ b/src/sagas/resources/index.js
@@ -5,6 +5,7 @@ import actionTypes from '../../actions/types';
 import { apiCallWithRetry } from '../index';
 import * as selectors from '../../reducers';
 import util from '../../utils/array';
+import resourceConnections from './connections/index';
 
 export function* getRequestOptions(path) {
   const opts = {
@@ -117,4 +118,5 @@ export const resourceSagas = [
   takeEvery(actionTypes.RESOURCE.REQUEST, getResource),
   takeEvery(actionTypes.RESOURCE.REQUEST_COLLECTION, getResourceCollection),
   takeEvery(actionTypes.RESOURCE.STAGE_COMMIT, commitStagedChanges),
+  ...resourceConnections,
 ];
diff --git a/src/views/CustomForms/index.jsx b/src/views/CustomForms/index.jsx
index 10be8e5..252093f 100644
--- a/src/views/CustomForms/index.jsx
+++ b/src/views/CustomForms/index.jsx
@@ -2,6 +2,7 @@ import { hot } from 'react-hot-loader';
 import { Component } from 'react';
 import Typography from '@material-ui/core/Typography';
 import Paper from '@material-ui/core/Paper';
+import { Options } from 'integrator-ui-forms/packages/core/dist';
 import { withStyles } from '@material-ui/core/styles';
 import Help from '../../components/Help';
 import DynaForm from '../../components/DynaForm';
@@ -21,7 +22,7 @@ function optionsHandler(options) {
   return allData;
 }
 
-export const getOptions = async (fieldId, fields) => {
+export const getOptions: () => Promise<Options> = (fieldId, fields) => {
   const path = '/processors/javascript';
   const opts = {
     method: 'POST',
@@ -38,12 +39,7 @@ export const getOptions = async (fieldId, fields) => {
   options.body = JSON.stringify(options.body);
 
   return fetch(req, options)
-    .then(response => {
-      if (response.status >= 400 && response.status < 600)
-        throw new Error('Error in fetching our opts');
-
-      return response.json();
-    })
+    .then(response => response.json())
     .then(resp => resp.data);
 };
 
@@ -56,153 +52,152 @@ export const getOptions = async (fieldId, fields) => {
 }))
 export default class CustomForms extends Component {
   render() {
-    const fieldMeta = {
-      fields: [
-        {
-          id: 'relativeUri',
-          name: '/http/relativeURI',
-          defaultValue: 'override me!',
-          type: 'relativeUri',
-          label: 'Relative URI',
-          visible: true,
-          required: true,
-          validWhen: {
-            lengthIsGreaterThan: {
-              length: 3,
-              message: 'The value must have more than 3 characterrs',
-            },
-            lengthIsLessThan: {
-              length: 6,
-              message: 'The value must less than 6 characters',
-            },
-            fallsWithinNumericalRange: {
-              min: 150,
-              max: 80000,
-              message: 'The value must be more than 150 and less than 80000',
-            },
-            matchesRegEx: {
-              pattern: '^[\\d]+$',
-              message: 'Only numbers allowed',
-            },
-            isNot: {
-              values: ['2500', '4001'],
-              message: 'The value cannot be 2500 nor 4001',
-            },
+    const fields = [
+      {
+        id: 'relativeUri',
+        name: '/http/relativeURI',
+        defaultValue: 'override me!',
+        type: 'relativeUri',
+        label: 'Relative URI',
+        visible: true,
+        required: true,
+        validWhen: {
+          lengthIsGreaterThan: {
+            length: 3,
+            message: 'The value must have more than 3 characterrs',
+          },
+          lengthIsLessThan: {
+            length: 6,
+            message: 'The value must less than 6 characters',
+          },
+          fallsWithinNumericalRange: {
+            min: 150,
+            max: 80000,
+            message: 'The value must be more than 150 and less than 80000',
+          },
+          matchesRegEx: {
+            pattern: '^[\\d]+$',
+            message: 'Only numbers allowed',
+          },
+          isNot: {
+            values: ['2500', '4001'],
+            message: 'The value cannot be 2500 nor 4001',
           },
         },
-        {
-          id: 'conn',
-          name: 'conn',
-          type: 'select',
-          label: 'Connection',
-          description: 'First choose a connection before continuing',
-          placeholder: 'Required',
-          defaultValue: '',
-          options: [
-            {
-              heading: 'Connections',
-              items: [
-                {
-                  label: 'NetSuite',
-                  value: 'ns',
-                },
-                {
-                  label: 'REST',
-                  value: 'rest',
-                },
-              ],
-            },
-          ],
-        },
-        {
-          id: 'type',
-          name: 'type',
-          type: 'select',
-          label: 'Record Type',
-          description: '',
-          placeholder: '',
-          defaultValue: '',
-          options: [
-            {
-              items: ['Contact', 'Order'],
-            },
-          ],
-          visible: false,
-          omitWhenHidden: true,
-          visibleWhen: [
-            {
-              id: 'isNetsuite',
-              field: 'conn',
-              is: ['ns'],
-            },
-          ],
-        },
-        {
-          id: 'fields',
-          name: 'fields',
-          type: 'multiselect',
-          label: 'Fields',
-          description: 'Choose which fields to include in your export record.',
-          placeholder: '',
-          defaultValue: [],
-          refreshOptionsOnChangesTo: 'type',
-          visible: false,
-          visibleWhen: [
-            {
-              id: 'hasType',
-              field: 'type',
-              isNot: [''],
-            },
-          ],
-        },
+      },
 
-        // REST
-        {
-          id: 'method',
-          name: 'method',
-          type: 'select',
-          label: 'HTTP Method',
-          description: 'What HTTP Verb should be used to make your request?',
-          placeholder: '',
-          defaultValue: 'GET',
-          options: [
-            {
-              items: ['GET', 'POST', 'PUT', 'DELETE'],
-            },
-          ],
-          visible: false,
-          omitWhenHidden: true,
-          visibleWhen: [
-            {
-              id: 'isREST',
-              field: 'conn',
-              is: ['rest'],
-            },
-          ],
-        },
-        {
-          id: 'body',
-          name: 'body',
-          type: 'textarea',
-          label: 'HTTP Request Body',
-          description: 'POST and PUT requests can have a body. ',
-          placeholder: 'optional',
-          multiline: true,
-          rows: 4,
-          maxRows: 6,
-          defaultValue: '',
-          visible: false,
-          omitWhenHidden: true,
-          visibleWhen: [
-            {
-              id: 'allowsBody',
-              field: 'method',
-              is: ['POST', 'PUT'],
-            },
-          ],
-        },
-      ],
-    };
+      {
+        id: 'conn',
+        name: 'conn',
+        type: 'select',
+        label: 'Connection',
+        description: 'First choose a connection before continuing',
+        placeholder: 'Required',
+        defaultValue: '',
+        options: [
+          {
+            heading: 'Connections',
+            items: [
+              {
+                label: 'NetSuite',
+                value: 'ns',
+              },
+              {
+                label: 'REST',
+                value: 'rest',
+              },
+            ],
+          },
+        ],
+      },
+      {
+        id: 'type',
+        name: 'type',
+        type: 'select',
+        label: 'Record Type',
+        description: '',
+        placeholder: '',
+        defaultValue: '',
+        options: [
+          {
+            items: ['Contact', 'Order'],
+          },
+        ],
+        visible: false,
+        omitWhenHidden: true,
+        visibleWhen: [
+          {
+            id: 'isNetsuite',
+            field: 'conn',
+            is: ['ns'],
+          },
+        ],
+      },
+      {
+        id: 'fields',
+        name: 'fields',
+        type: 'multiselect',
+        label: 'Fields',
+        description: 'Choose which fields to include in your export record.',
+        placeholder: '',
+        defaultValue: [],
+        refreshOptionsOnChangesTo: 'type',
+        visible: false,
+        visibleWhen: [
+          {
+            id: 'hasType',
+            field: 'type',
+            isNot: [''],
+          },
+        ],
+      },
+
+      // REST
+      {
+        id: 'method',
+        name: 'method',
+        type: 'select',
+        label: 'HTTP Method',
+        description: 'What HTTP Verb should be used to make your request?',
+        placeholder: '',
+        defaultValue: 'GET',
+        options: [
+          {
+            items: ['GET', 'POST', 'PUT', 'DELETE'],
+          },
+        ],
+        visible: false,
+        omitWhenHidden: true,
+        visibleWhen: [
+          {
+            id: 'isREST',
+            field: 'conn',
+            is: ['rest'],
+          },
+        ],
+      },
+      {
+        id: 'body',
+        name: 'body',
+        type: 'textarea',
+        label: 'HTTP Request Body',
+        description: 'POST and PUT requests can have a body. ',
+        placeholder: 'optional',
+        multiline: true,
+        rows: 4,
+        maxRows: 6,
+        defaultValue: '',
+        visible: false,
+        omitWhenHidden: true,
+        visibleWhen: [
+          {
+            id: 'allowsBody',
+            field: 'method',
+            is: ['POST', 'PUT'],
+          },
+        ],
+      },
+    ];
     const { classes } = this.props;
 
     return (
@@ -212,11 +207,11 @@ export default class CustomForms extends Component {
         <Help helpKey="connection.type" />
 
         <DynaForm
-          fieldMeta={fieldMeta}
+          defaultValues={{ '/http/relativeURI': 'path/to/nowhere' }}
+          defaultFields={fields}
           optionsHandler={getOptions}
           // onChange={(a, b, c, d) => console.log(a, b, c, d)}
         />
-        <Help helpKey="connection.type" />
       </Paper>
     );
   }
diff --git a/src/views/Resources/Edit.jsx b/src/views/Resources/Edit.jsx
index 7edc7b1..6c08826 100644
--- a/src/views/Resources/Edit.jsx
+++ b/src/views/Resources/Edit.jsx
@@ -8,14 +8,14 @@ import Button from '@material-ui/core/Button';
 import TimeAgo from 'react-timeago';
 import actions from '../../actions';
 import LoadResources from '../../components/LoadResources';
-import ResourceForm from '../../components/ResourceForm';
+import ConnectionForm from '../../components/ConnectionForm';
 import * as selectors from '../../reducers';
 import ConflictAlertDialog from './ConflictAlertDialog';
 
 const mapStateToProps = (state, { match }) => {
   const { id, resourceType } = match.params;
   const resourceData = selectors.resourceData(state, resourceType, id);
-  const { _connectionId } = resourceData.merged ? resourceData.merged : {};
+  const { _connectionId } = resourceData.merged;
   const connection = _connectionId
     ? selectors.resource(state, 'connections', _connectionId)
     : null;
@@ -34,8 +34,6 @@ const mapDispatchToProps = (dispatch, { match }) => {
   return {
     handlePatchResource: patchSet => {
       // console.log('patchSet Handled', patchSet);
-
-      // return null;
       // TODO: Optionally we let the patchStaged action also take a
       // boolean flag to auto-commit?
       dispatch(actions.resource.patchStaged(id, patchSet));
@@ -61,10 +59,8 @@ const mapDispatchToProps = (dispatch, { match }) => {
   };
 };
 
-const toName = (token, upper, trim) =>
-  upper
-    ? token.charAt(0).toUpperCase() + token.slice(1, trim)
-    : token.slice(0, trim);
+const toName = resourceType =>
+  resourceType.charAt(0).toUpperCase() + resourceType.slice(1, -1);
 const prettyDate = dateString => {
   const options = {
     weekday: 'long',
@@ -83,15 +79,15 @@ const prettyDate = dateString => {
 @withStyles(theme => ({
   editableFields: {
     paddingTop: theme.spacing.unit,
-    minHeight: '50%',
-    maxHeight: `calc(100vh - ${theme.spacing.unit * 27}px)`,
-    overflowY: 'hidden',
   },
-  // textField: {
-  //   marginLeft: theme.spacing.unit,
-  //   marginRight: theme.spacing.unit,
-  //   width: `calc(100% - ${theme.spacing.double}px)`,
-  // },
+  relatedContent: {
+    textDecoration: 'none',
+  },
+  textField: {
+    marginLeft: theme.spacing.unit,
+    marginRight: theme.spacing.unit,
+    width: `calc(100% - ${theme.spacing.double}px)`,
+  },
   dates: {
     color: theme.palette.text.secondary,
   },
@@ -109,42 +105,25 @@ class Edit extends Component {
       handleConflict,
     } = this.props;
     const { /* master , */ merged, patch, conflict } = resourceData;
-
-    if (!merged) {
-      return (
-        <Typography variant="h5">
-          No {toName(resourceType, true, -1)} found with id {id}.
-        </Typography>
-      );
-    }
-
-    let type = connection ? connection.type : merged.type;
-    const assistant = connection ? connection.assistant : merged.assistant;
-
-    if (assistant) {
-      type = assistant;
-    }
-
     // const conflict = [{ op: 'replace', path: '/name', value: 'Tommy Boy' }];
     const hasPatch = patch && patch.length > 0;
-    // console.log(patch, merged);
 
-    return (
+    // console.log(patch, merged);
+    // TODO:Connection Type like FTP
+    return merged ? (
       <LoadResources required resources={[resourceType]}>
         <Typography variant="h5">
-          {`${toName(type, true)} ${toName(resourceType, false, -1)}`}
+          {`${toName(resourceType)}: ${merged.name || ''}`}
         </Typography>
-
+        <Typography variant="subtitle1">ID: {merged._id}</Typography>
         <Typography variant="caption" className={classes.dates}>
           Last Modified: {prettyDate(merged.lastModified)}
         </Typography>
-
         {hasPatch && (
           <Typography variant="caption" className={classes.dates}>
             Unsaved changes made <TimeAgo date={Date(patch.lastChange)} />.
           </Typography>
         )}
-
         {connection && (
           <Link
             key="conn"
@@ -157,7 +136,7 @@ class Edit extends Component {
         )}
 
         <div className={classes.editableFields}>
-          <ResourceForm
+          <ConnectionForm
             key={id}
             connection={connection}
             resourceType={resourceType}
@@ -176,6 +155,10 @@ class Edit extends Component {
           )}
         </div>
       </LoadResources>
+    ) : (
+      <Typography variant="h5">
+        No {toName(resourceType)} found with id {id}.
+      </Typography>
     );
   }
 }
diff --git a/src/views/Resources/FilteredResources.jsx b/src/views/Resources/FilteredResources.jsx
index 6933646..7d558b7 100644
--- a/src/views/Resources/FilteredResources.jsx
+++ b/src/views/Resources/FilteredResources.jsx
@@ -11,7 +11,7 @@ import ListItemText from '@material-ui/core/ListItemText';
 import Avatar from '@material-ui/core/Avatar';
 import ImageIcon from '@material-ui/icons/Image';
 import Button from '@material-ui/core/Button';
-// import shortid from 'shortid';
+import shortid from 'shortid';
 import actions from '../../actions';
 
 const mapDispatchToProps = (dispatch, { list }) => ({
@@ -46,22 +46,20 @@ class FilteredResources extends Component {
     const resourceType = list.type;
     const daysOld = lastModified => (
       <span>
-        Modified <TimeAgo date={lastModified} />.
+        Modified <TimeAgo date={lastModified} /> ago.
       </span>
     );
 
-    if (!list.count) return null;
-
     return (
       <div className={classes.root}>
         <Typography variant="h5">
-          {resourceType.charAt(0).toUpperCase() + resourceType.slice(1)}
+          {resourceType.toUpperCase()}
           <Switch>
             <Route
               path="/pg/resources/:resourceType/add/:id"
               render={() => null}
             />
-            {/*  Hide the "Add" until we have a good implementation for it.
+
             <Route
               render={() => (
                 <Button
@@ -75,38 +73,41 @@ class FilteredResources extends Component {
                 </Button>
               )}
             />
-          */}
           </Switch>
         </Typography>
 
-        <List>
-          {list.resources.map(r => (
-            <ListItem
-              className={classes.listItem}
-              button
-              key={r._id}
-              component={Link}
-              to={`/pg/resources/${resourceType}/edit/${r._id}`}>
-              <Avatar>
-                <ImageIcon />
-              </Avatar>
-              <ListItemText
-                primary={r.name || r._id}
-                secondary={daysOld(r.lastModified)}
-                secondaryTypographyProps={{ variant: 'caption' }}
-              />
-            </ListItem>
-          ))}
+        {!list.count ? (
+          <Typography variant="h6">None.</Typography>
+        ) : (
+          <List>
+            {list.resources.map(r => (
+              <ListItem
+                className={classes.listItem}
+                button
+                key={r._id}
+                component={Link}
+                to={`/pg/resources/${resourceType}/edit/${r._id}`}>
+                <Avatar>
+                  <ImageIcon />
+                </Avatar>
+                <ListItemText
+                  primary={r.name || r._id}
+                  secondary={daysOld(r.lastModified)}
+                  secondaryTypographyProps={{ variant: 'caption' }}
+                />
+              </ListItem>
+            ))}
 
-          {list.filtered > list.count && (
-            <Button
-              onClick={handleMore(list.count + 2)}
-              size="small"
-              variant="outlined">
-              Show more results ({list.filtered - list.count} left)
-            </Button>
-          )}
-        </List>
+            {list.filtered > list.count && (
+              <Button
+                onClick={handleMore(list.count + 2)}
+                size="small"
+                variant="outlined">
+                Show more results ({list.filtered - list.count} left)
+              </Button>
+            )}
+          </List>
+        )}
       </div>
     );
   }
