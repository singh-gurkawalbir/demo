export default {
  // #region resource import
  // #region netsuite
  importNetsuiteAccount: {
    type: 'text',
    helpKey: 'import.netsuite.account',
    name: '/netsuite/account',
    id: 'importNetsuiteAccount',
    defaultValue: '{{netsuite.account}}',
  },
  importNetsuiteTokenId: {
    type: 'text',
    helpKey: 'import.netsuite.tokenId',
    name: '/netsuite/tokenId',
    id: 'importNetsuiteTokenId',
    defaultValue: '{{netsuite.tokenId}}',
  },
  importNetsuiteTokenSecret: {
    type: 'text',
    helpKey: 'import.netsuite.tokenSecret',
    name: '/netsuite/tokenSecret',
    id: 'importNetsuiteTokenSecret',
    defaultValue: '{{netsuite.tokenSecret}}',
  },
  importNetsuiteEnvironment: {
    type: 'radiogroup',
    helpKey: 'import.netsuite.environment',
    name: '/netsuite/environment',
    id: 'importNetsuiteEnvironment',
    defaultValue: '{{netsuite.environment}}',
    options: [
      {
        items: [
          { label: 'Production', value: 'production' },
          { label: 'Sandbox', value: 'sandbox' },
          { label: 'Beta', value: 'beta' },
          { label: 'Sandbox2.0', value: 'sandbox2.0' },
        ],
      },
    ],
  },
  importNetsuiteRoleId: {
    type: 'text',
    helpKey: 'import.netsuite.roleId',
    name: '/netsuite/roleId',
    id: 'importNetsuiteRoleId',
    defaultValue: '{{netsuite.roleId}}',
  },
  importNetsuiteEmail: {
    type: 'text',
    helpKey: 'import.netsuite.email',
    name: '/netsuite/email',
    id: 'importNetsuiteEmail',
    defaultValue: '{{netsuite.email}}',
  },
  importNetsuitePassword: {
    type: 'text',
    helpKey: 'import.netsuite.password',
    name: '/netsuite/password',
    id: 'importNetsuitePassword',
    defaultValue: '{{netsuite.password}}',
  },
  importNetsuiteRequestLevelCredentials: {
    type: 'checkbox',
    helpKey: 'import.netsuite.requestLevelCredentials',
    name: '/netsuite/requestLevelCredentials',
    id: 'importNetsuiteRequestLevelCredentials',
    defaultValue: false,
  },
  importNetsuiteDataCenterURLs: {
    type: 'text',
    helpKey: 'import.netsuite.dataCenterURLs',
    name: '/netsuite/dataCenterURLs',
    id: 'importNetsuiteDataCenterURLs',
    defaultValue: '{{netsuite.dataCenterURLs}}',
  },
  importNetsuiteAccountName: {
    type: 'text',
    helpKey: 'import.netsuite.accountName',
    name: '/netsuite/accountName',
    id: 'importNetsuiteAccountName',
    defaultValue: '{{netsuite.accountName}}',
  },
  importNetsuiteRoleName: {
    type: 'text',
    helpKey: 'import.netsuite.roleName',
    name: '/netsuite/roleName',
    id: 'importNetsuiteRoleName',
    defaultValue: '{{netsuite.roleName}}',
  },
  importNetsuiteConcurrencyLevelRESTlet: {
    type: 'text',
    helpKey: 'import.netsuite.concurrencyLevelRESTlet',
    name: '/netsuite/concurrencyLevelRESTlet',
    id: 'importNetsuiteConcurrencyLevelRESTlet',
    defaultValue: '{{netsuite.concurrencyLevelRESTlet}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importNetsuiteConcurrencyLevelWebServices: {
    type: 'text',
    helpKey: 'import.netsuite.concurrencyLevelWebServices',
    name: '/netsuite/concurrencyLevelWebServices',
    id: 'importNetsuiteConcurrencyLevelWebServices',
    defaultValue: '{{netsuite.concurrencyLevelWebServices}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importNetsuiteConcurrencyLevel: {
    type: 'text',
    helpKey: 'import.netsuite.concurrencyLevel',
    name: '/netsuite/concurrencyLevel',
    id: 'importNetsuiteConcurrencyLevel',
    defaultValue: '{{netsuite.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importNetsuiteWsdlVersion: {
    type: 'radiogroup',
    helpKey: 'import.netsuite.wsdlVersion',
    name: '/netsuite/wsdlVersion',
    id: 'importNetsuiteWsdlVersion',
    defaultValue: '{{netsuite.wsdlVersion}}',
    options: [
      {
        items: [
          { label: 'Current', value: 'current' },
          { label: 'Next', value: 'next' },
        ],
      },
    ],
  },
  importNetsuiteApplicationId: {
    type: 'text',
    helpKey: 'import.netsuite.applicationId',
    name: '/netsuite/applicationId',
    id: 'importNetsuiteApplicationId',
    defaultValue: '{{netsuite.applicationId}}',
  },
  // #endregion netsuite
  // #region salesforce
  importSalesforceSandbox: {
    type: 'checkbox',
    helpKey: 'import.salesforce.sandbox',
    name: '/salesforce/sandbox',
    id: 'importSalesforceSandbox',
    defaultValue: false,
  },
  importSalesforceBaseURI: {
    type: 'text',
    helpKey: 'import.salesforce.baseURI',
    name: '/salesforce/baseURI',
    id: 'importSalesforceBaseURI',
    defaultValue: '{{salesforce.baseURI}}',
  },
  importSalesforceOauth2FlowType: {
    type: 'radiogroup',
    helpKey: 'import.salesforce.oauth2FlowType',
    name: '/salesforce/oauth2FlowType',
    id: 'importSalesforceOauth2FlowType',
    defaultValue: '{{salesforce.oauth2FlowType}}',
    options: [
      {
        items: [
          { label: 'JwtBearerToken', value: 'jwtBearerToken' },
          { label: 'RefreshToken', value: 'refreshToken' },
        ],
      },
    ],
  },
  importSalesforceUsername: {
    type: 'text',
    helpKey: 'import.salesforce.username',
    name: '/salesforce/username',
    id: 'importSalesforceUsername',
    defaultValue: '{{salesforce.username}}',
  },
  importSalesforceBearerToken: {
    type: 'text',
    helpKey: 'import.salesforce.bearerToken',
    name: '/salesforce/bearerToken',
    id: 'importSalesforceBearerToken',
    defaultValue: '{{salesforce.bearerToken}}',
  },
  importSalesforceRefreshToken: {
    type: 'text',
    helpKey: 'import.salesforce.refreshToken',
    name: '/salesforce/refreshToken',
    id: 'importSalesforceRefreshToken',
    defaultValue: '{{salesforce.refreshToken}}',
  },
  importSalesforcePackagedOAuth: {
    type: 'checkbox',
    helpKey: 'import.salesforce.packagedOAuth',
    name: '/salesforce/packagedOAuth',
    id: 'importSalesforcePackagedOAuth',
    defaultValue: false,
  },
  importSalesforceScopes: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'import.salesforce.scopes',
    name: '/salesforce/scopes',
    id: 'importSalesforceScopes',
    defaultValue: '{{salesforce.scope}}',
    validWhen: [],
  },
  importSalesforceInfo: {
    type: 'text',
    helpKey: 'import.salesforce.info',
    name: '/salesforce/info',
    id: 'importSalesforceInfo',
    defaultValue: '{{salesforce.info}}',
  },
  importSalesforceConcurrencyLevel: {
    type: 'text',
    helpKey: 'import.salesforce.concurrencyLevel',
    name: '/salesforce/concurrencyLevel',
    id: 'importSalesforceConcurrencyLevel',
    defaultValue: '{{salesforce.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  // #endregion salesforce
  // #region ftp
  importFtpHostURI: {
    type: 'text',
    helpKey: 'import.ftp.hostURI',
    name: '/ftp/hostURI',
    id: 'importFtpHostURI',
    defaultValue: '{{ftp.hostURI}}',
  },
  importFtpUsername: {
    type: 'text',
    helpKey: 'import.ftp.username',
    name: '/ftp/username',
    id: 'importFtpUsername',
    defaultValue: '{{ftp.username}}',
  },
  importFtpPassword: {
    type: 'text',
    helpKey: 'import.ftp.password',
    name: '/ftp/password',
    id: 'importFtpPassword',
    defaultValue: '{{ftp.password}}',
  },
  importFtpAuthKey: {
    type: 'text',
    helpKey: 'import.ftp.authKey',
    name: '/ftp/authKey',
    id: 'importFtpAuthKey',
    defaultValue: '{{ftp.authKey}}',
  },
  importFtpPort: {
    type: 'text',
    helpKey: 'import.ftp.port',
    name: '/ftp/port',
    id: 'importFtpPort',
    defaultValue: '{{ftp.port}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importFtpUsePassiveMode: {
    type: 'checkbox',
    helpKey: 'import.ftp.usePassiveMode',
    name: '/ftp/usePassiveMode',
    id: 'importFtpUsePassiveMode',
    defaultValue: false,
  },
  importFtpEntryParser: {
    type: 'radiogroup',
    helpKey: 'import.ftp.entryParser',
    name: '/ftp/entryParser',
    id: 'importFtpEntryParser',
    defaultValue: '{{ftp.entryParser}}',
    options: [
      {
        items: [
          { label: 'UNIX', value: 'UNIX' },
          { label: 'UNIX-TRIM', value: 'UNIX-TRIM' },
          { label: 'VMS', value: 'VMS' },
          { label: 'WINDOWS', value: 'WINDOWS' },
          { label: 'OS/2', value: 'OS/2' },
          { label: 'OS/400', value: 'OS/400' },
          { label: 'AS/400', value: 'AS/400' },
          { label: 'MVS', value: 'MVS' },
          { label: 'UNKNOWN-TYPE', value: 'UNKNOWN-TYPE' },
          { label: 'NETWARE', value: 'NETWARE' },
          { label: 'MACOS-PETER', value: 'MACOS-PETER' },
        ],
      },
    ],
  },
  importFtpUserDirectoryIsRoot: {
    type: 'checkbox',
    helpKey: 'import.ftp.userDirectoryIsRoot',
    name: '/ftp/userDirectoryIsRoot',
    id: 'importFtpUserDirectoryIsRoot',
    defaultValue: false,
  },
  importFtpUseImplicitFtps: {
    type: 'checkbox',
    helpKey: 'import.ftp.useImplicitFtps',
    name: '/ftp/useImplicitFtps',
    id: 'importFtpUseImplicitFtps',
    defaultValue: false,
  },
  importFtpRequireSocketReUse: {
    type: 'checkbox',
    helpKey: 'import.ftp.requireSocketReUse',
    name: '/ftp/requireSocketReUse',
    id: 'importFtpRequireSocketReUse',
    defaultValue: false,
  },
  importFtpPgpEncryptKey: {
    type: 'text',
    helpKey: 'import.ftp.pgpEncryptKey',
    name: '/ftp/pgpEncryptKey',
    id: 'importFtpPgpEncryptKey',
    defaultValue: '{{ftp.pgpEncryptKey}}',
  },
  importFtpPgpDecryptKey: {
    type: 'text',
    helpKey: 'import.ftp.pgpDecryptKey',
    name: '/ftp/pgpDecryptKey',
    id: 'importFtpPgpDecryptKey',
    defaultValue: '{{ftp.pgpDecryptKey}}',
  },
  importFtpPgpPassphrase: {
    type: 'text',
    helpKey: 'import.ftp.pgpPassphrase',
    name: '/ftp/pgpPassphrase',
    id: 'importFtpPgpPassphrase',
    defaultValue: '{{ftp.pgpPassphrase}}',
  },
  // #endregion ftp
  // #region s3
  importS3AccessKeyId: {
    type: 'text',
    helpKey: 'import.s3.accessKeyId',
    name: '/s3/accessKeyId',
    id: 'importS3AccessKeyId',
    defaultValue: '{{s3.accessKeyId}}',
  },
  importS3SecretAccessKey: {
    type: 'text',
    helpKey: 'import.s3.secretAccessKey',
    name: '/s3/secretAccessKey',
    id: 'importS3SecretAccessKey',
    defaultValue: '{{s3.secretAccessKey}}',
  },
  importS3PingBucket: {
    type: 'text',
    helpKey: 'import.s3.pingBucket',
    name: '/s3/pingBucket',
    id: 'importS3PingBucket',
    defaultValue: '{{s3.pingBucket}}',
  },
  // #endregion s3
  // #region rest
  importRestMediaType: {
    type: 'radiogroup',
    helpKey: 'import.rest.mediaType',
    name: '/rest/mediaType',
    id: 'importRestMediaType',
    defaultValue: '{{rest.mediaType}}',
    options: [
      {
        items: [
          { label: 'Json', value: 'json' },
          { label: 'Urlencoded', value: 'urlencoded' },
          { label: 'Xml', value: 'xml' },
          { label: 'Csv', value: 'csv' },
        ],
      },
    ],
  },
  importRestBaseURI: {
    type: 'text',
    helpKey: 'import.rest.baseURI',
    name: '/rest/baseURI',
    id: 'importRestBaseURI',
    defaultValue: '{{rest.baseURI}}',
  },
  importRestBearerToken: {
    type: 'text',
    helpKey: 'import.rest.bearerToken',
    name: '/rest/bearerToken',
    id: 'importRestBearerToken',
    defaultValue: '{{rest.bearerToken}}',
  },
  importRestTokenLocation: {
    type: 'radiogroup',
    helpKey: 'import.rest.tokenLocation',
    name: '/rest/tokenLocation',
    id: 'importRestTokenLocation',
    defaultValue: '{{rest.tokenLocation}}',
    options: [
      {
        items: [
          { label: 'Header', value: 'header' },
          { label: 'Url', value: 'url' },
        ],
      },
    ],
  },
  importRestTokenParam: {
    type: 'text',
    helpKey: 'import.rest.tokenParam',
    name: '/rest/tokenParam',
    id: 'importRestTokenParam',
    defaultValue: '{{rest.tokenParam}}',
  },
  importRestScopes: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'import.rest.scopes',
    name: '/rest/scopes',
    id: 'importRestScopes',
    defaultValue: '{{rest.scope}}',
    validWhen: [],
  },
  importRestScopeDelimiter: {
    type: 'text',
    helpKey: 'import.rest.scopeDelimiter',
    name: '/rest/scopeDelimiter',
    id: 'importRestScopeDelimiter',
    defaultValue: '{{rest.scopeDelimiter}}',
  },
  importRestRefreshToken: {
    type: 'text',
    helpKey: 'import.rest.refreshToken',
    name: '/rest/refreshToken',
    id: 'importRestRefreshToken',
    defaultValue: '{{rest.refreshToken}}',
  },
  importRestOauthTokenURI: {
    type: 'text',
    helpKey: 'import.rest.oauthTokenURI',
    name: '/rest/oauthTokenURI',
    id: 'importRestOauthTokenURI',
    defaultValue: '{{rest.oauthTokenURI}}',
  },
  importRestDisableStrictSSL: {
    type: 'checkbox',
    helpKey: 'import.rest.disableStrictSSL',
    name: '/rest/disableStrictSSL',
    id: 'importRestDisableStrictSSL',
    defaultValue: false,
  },
  importRestAuthType: {
    type: 'radiogroup',
    helpKey: 'import.rest.authType',
    name: '/rest/authType',
    id: 'importRestAuthType',
    defaultValue: '{{rest.authType}}',
    options: [
      {
        items: [
          { label: 'Basic', value: 'basic' },
          { label: 'Token', value: 'token' },
          { label: 'Oauth', value: 'oauth' },
          { label: 'Custom', value: 'custom' },
          { label: 'Cookie', value: 'cookie' },
          { label: 'Jwt', value: 'jwt' },
          { label: 'Hmac', value: 'hmac' },
          { label: 'Wsse', value: 'wsse' },
        ],
      },
    ],
  },
  importRestAuthURI: {
    type: 'text',
    helpKey: 'import.rest.authURI',
    name: '/rest/authURI',
    id: 'importRestAuthURI',
    defaultValue: '{{rest.authURI}}',
  },
  importRestAuthHeader: {
    type: 'text',
    helpKey: 'import.rest.authHeader',
    name: '/rest/authHeader',
    id: 'importRestAuthHeader',
    defaultValue: '{{rest.authHeader}}',
  },
  importRestRetryHeader: {
    type: 'text',
    helpKey: 'import.rest.retryHeader',
    name: '/rest/retryHeader',
    id: 'importRestRetryHeader',
    defaultValue: '{{rest.retryHeader}}',
  },
  importRestAuthScheme: {
    type: 'radiogroup',
    helpKey: 'import.rest.authScheme',
    name: '/rest/authScheme',
    id: 'importRestAuthScheme',
    defaultValue: '{{rest.authScheme}}',
    options: [
      {
        items: [
          { label: 'MAC', value: 'MAC' },
          { label: 'OAuth', value: 'OAuth' },
          { label: 'Bearer', value: 'Bearer' },
          { label: 'Hmac', value: 'Hmac' },
          { label: ' ', value: ' ' },
        ],
      },
    ],
  },
  importRestBasicAuthUsername: {
    type: 'text',
    helpKey: 'import.rest.basicAuth.username',
    name: '/rest/basicAuth/username',
    id: 'importRestBasicAuthUsername',
    defaultValue: '{{rest.basicAuth.username}}',
  },
  importRestBasicAuthPassword: {
    type: 'text',
    helpKey: 'import.rest.basicAuth.password',
    name: '/rest/basicAuth/password',
    id: 'importRestBasicAuthPassword',
    defaultValue: '{{rest.basicAuth.password}}',
  },
  importRestCookieAuthUri: {
    type: 'text',
    helpKey: 'import.rest.cookieAuth.uri',
    name: '/rest/cookieAuth/uri',
    id: 'importRestCookieAuthUri',
    defaultValue: '{{rest.cookieAuth.uri}}',
  },
  importRestCookieAuthBody: {
    type: 'text',
    helpKey: 'import.rest.cookieAuth.body',
    name: '/rest/cookieAuth/body',
    id: 'importRestCookieAuthBody',
    defaultValue: '{{rest.cookieAuth.body}}',
  },
  importRestCookieAuthMethod: {
    type: 'text',
    helpKey: 'import.rest.cookieAuth.method',
    name: '/rest/cookieAuth/method',
    id: 'importRestCookieAuthMethod',
    defaultValue: '{{rest.cookieAuth.method}}',
  },
  importRestCookieAuthSuccessStatusCode: {
    type: 'text',
    helpKey: 'import.rest.cookieAuth.successStatusCode',
    name: '/rest/cookieAuth/successStatusCode',
    id: 'importRestCookieAuthSuccessStatusCode',
    defaultValue: '{{rest.cookieAuth.successStatusCode}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importRestHeaders: {
    type: 'keyvalue',
    keyName: 'name',
    valueName: 'value',
    valueType: 'keyvalue',
    helpKey: 'import.rest.headers',
    name: '/rest/headers',
    id: 'importRestHeaders',
    defaultValue: '{{rest.headers}}',
  },
  importRestEncrypted: {
    type: 'text',
    helpKey: 'import.rest.encrypted',
    name: '/rest/encrypted',
    id: 'importRestEncrypted',
    defaultValue: '{{rest.encrypted}}',
  },
  importRestEncrypteds: {
    type: 'editor',
    valueType: 'editorExpression',
    helpKey: 'import.rest.encrypteds',
    name: '/rest/encrypteds',
    id: 'importRestEncrypteds',
    defaultValue: '{{rest.encrypted}}',
  },
  importRestUnencrypted: {
    type: 'text',
    helpKey: 'import.rest.unencrypted',
    name: '/rest/unencrypted',
    id: 'importRestUnencrypted',
    defaultValue: '{{rest.unencrypted}}',
  },
  importRestUnencrypteds: {
    type: 'editor',
    valueType: 'editorExpression',
    helpKey: 'import.rest.unencrypteds',
    name: '/rest/unencrypteds',
    id: 'importRestUnencrypteds',
    defaultValue: '{{rest.unencrypted}}',
  },
  importRestOauthAccessTokenPath: {
    type: 'text',
    helpKey: 'import.rest.oauth.accessTokenPath',
    name: '/rest/oauth/accessTokenPath',
    id: 'importRestOauthAccessTokenPath',
    defaultValue: '{{rest.oauth.accessTokenPath}}',
  },
  importRestOauthGrantType: {
    type: 'radiogroup',
    helpKey: 'import.rest.oauth.grantType',
    name: '/rest/oauth/grantType',
    id: 'importRestOauthGrantType',
    defaultValue: '{{rest.oauth.grantType}}',
    options: [
      {
        items: [
          { label: 'Authorizecode', value: 'authorizecode' },
          { label: 'Password', value: 'password' },
        ],
      },
    ],
  },
  importRestOauthUsername: {
    type: 'text',
    helpKey: 'import.rest.oauth.username',
    name: '/rest/oauth/username',
    id: 'importRestOauthUsername',
    defaultValue: '{{rest.oauth.username}}',
  },
  importRestOauthPassword: {
    type: 'text',
    helpKey: 'import.rest.oauth.password',
    name: '/rest/oauth/password',
    id: 'importRestOauthPassword',
    defaultValue: '{{rest.oauth.password}}',
  },
  importRestRefreshTokenMethod: {
    type: 'text',
    helpKey: 'import.rest.refreshTokenMethod',
    name: '/rest/refreshTokenMethod',
    id: 'importRestRefreshTokenMethod',
    defaultValue: '{{rest.refreshTokenMethod}}',
  },
  importRestRefreshTokenBody: {
    type: 'text',
    helpKey: 'import.rest.refreshTokenBody',
    name: '/rest/refreshTokenBody',
    id: 'importRestRefreshTokenBody',
    defaultValue: '{{rest.refreshTokenBody}}',
  },
  importRestRefreshTokenURI: {
    type: 'text',
    helpKey: 'import.rest.refreshTokenURI',
    name: '/rest/refreshTokenURI',
    id: 'importRestRefreshTokenURI',
    defaultValue: '{{rest.refreshTokenURI}}',
  },
  importRestRefreshTokenPath: {
    type: 'text',
    helpKey: 'import.rest.refreshTokenPath',
    name: '/rest/refreshTokenPath',
    id: 'importRestRefreshTokenPath',
    defaultValue: '{{rest.refreshTokenPath}}',
  },
  importRestRefreshTokenMediaType: {
    type: 'radiogroup',
    helpKey: 'import.rest.refreshTokenMediaType',
    name: '/rest/refreshTokenMediaType',
    id: 'importRestRefreshTokenMediaType',
    defaultValue: '{{rest.refreshTokenMediaType}}',
    options: [
      {
        items: [
          { label: 'Json', value: 'json' },
          { label: 'Urlencoded', value: 'urlencoded' },
        ],
      },
    ],
  },
  importRestRefreshTokenHeaders: {
    type: 'keyvalue',
    keyName: 'name',
    valueName: 'value',
    valueType: 'keyvalue',
    helpKey: 'import.rest.refreshTokenHeaders',
    name: '/rest/refreshTokenHeaders',
    id: 'importRestRefreshTokenHeaders',
    defaultValue: '{{rest.refreshTokenHeaders}}',
  },
  importRestInfo: {
    type: 'text',
    helpKey: 'import.rest.info',
    name: '/rest/info',
    id: 'importRestInfo',
    defaultValue: '{{rest.info}}',
  },
  importRestPingRelativeURI: {
    type: 'text',
    helpKey: 'import.rest.pingRelativeURI',
    name: '/rest/pingRelativeURI',
    id: 'importRestPingRelativeURI',
    defaultValue: '{{rest.pingRelativeURI}}',
  },
  importRestPingSuccessPath: {
    type: 'text',
    helpKey: 'import.rest.pingSuccessPath',
    name: '/rest/pingSuccessPath',
    id: 'importRestPingSuccessPath',
    defaultValue: '{{rest.pingSuccessPath}}',
  },
  importRestPingSuccessValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'import.rest.pingSuccessValuess',
    name: '/rest/pingSuccessValuess',
    id: 'importRestPingSuccessValuess',
    defaultValue: '{{rest.pingSuccessValues}}',
    validWhen: [],
  },
  importRestPingFailurePath: {
    type: 'text',
    helpKey: 'import.rest.pingFailurePath',
    name: '/rest/pingFailurePath',
    id: 'importRestPingFailurePath',
    defaultValue: '{{rest.pingFailurePath}}',
  },
  importRestPingFailureValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'import.rest.pingFailureValuess',
    name: '/rest/pingFailureValuess',
    id: 'importRestPingFailureValuess',
    defaultValue: '{{rest.pingFailureValues}}',
    validWhen: [],
  },
  importRestConcurrencyLevel: {
    type: 'text',
    helpKey: 'import.rest.concurrencyLevel',
    name: '/rest/concurrencyLevel',
    id: 'importRestConcurrencyLevel',
    defaultValue: '{{rest.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importRestPingMethod: {
    type: 'radiogroup',
    helpKey: 'import.rest.pingMethod',
    name: '/rest/pingMethod',
    id: 'importRestPingMethod',
    defaultValue: '{{rest.pingMethod}}',
    options: [
      {
        items: [
          { label: 'GET', value: 'GET' },
          { label: 'POST', value: 'POST' },
        ],
      },
    ],
  },
  importRestPingBody: {
    type: 'text',
    helpKey: 'import.rest.pingBody',
    name: '/rest/pingBody',
    id: 'importRestPingBody',
    defaultValue: '{{rest.pingBody}}',
  },
  // #endregion rest
  // #region wrapper
  importWrapperUnencrypted: {
    type: 'text',
    helpKey: 'import.wrapper.unencrypted',
    name: '/wrapper/unencrypted',
    id: 'importWrapperUnencrypted',
    defaultValue: '{{wrapper.unencrypted}}',
  },
  importWrapperUnencrypteds: {
    type: 'editor',
    valueType: 'editorExpression',
    helpKey: 'import.wrapper.unencrypteds',
    name: '/wrapper/unencrypteds',
    id: 'importWrapperUnencrypteds',
    defaultValue: '{{wrapper.unencrypted}}',
  },
  importWrapperEncrypted: {
    type: 'text',
    helpKey: 'import.wrapper.encrypted',
    name: '/wrapper/encrypted',
    id: 'importWrapperEncrypted',
    defaultValue: '{{wrapper.encrypted}}',
  },
  importWrapperEncrypteds: {
    type: 'editor',
    valueType: 'editorExpression',
    helpKey: 'import.wrapper.encrypteds',
    name: '/wrapper/encrypteds',
    id: 'importWrapperEncrypteds',
    defaultValue: '{{wrapper.encrypted}}',
  },
  importWrapperPingFunction: {
    type: 'text',
    helpKey: 'import.wrapper.pingFunction',
    name: '/wrapper/pingFunction',
    id: 'importWrapperPingFunction',
    defaultValue: '{{wrapper.pingFunction}}',
  },
  importWrapper_stackId: {
    type: 'text',
    helpKey: 'import.wrapper._stackId',
    name: '/wrapper/_stackId',
    id: 'importWrapper_stackId',
    defaultValue: '{{wrapper._stackId}}',
  },
  importWrapperConcurrencyLevel: {
    type: 'text',
    helpKey: 'import.wrapper.concurrencyLevel',
    name: '/wrapper/concurrencyLevel',
    id: 'importWrapperConcurrencyLevel',
    defaultValue: '{{wrapper.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  // #endregion wrapper
  // #region http
  importHttpMediaType: {
    type: 'radiogroup',
    helpKey: 'import.http.mediaType',
    name: '/http/mediaType',
    id: 'importHttpMediaType',
    defaultValue: '{{http.mediaType}}',
    options: [
      {
        items: [
          { label: 'Xml', value: 'xml' },
          { label: 'Json', value: 'json' },
        ],
      },
    ],
  },
  importHttpBaseURI: {
    type: 'text',
    helpKey: 'import.http.baseURI',
    name: '/http/baseURI',
    id: 'importHttpBaseURI',
    defaultValue: '{{http.baseURI}}',
  },
  importHttpDisableStrictSSL: {
    type: 'checkbox',
    helpKey: 'import.http.disableStrictSSL',
    name: '/http/disableStrictSSL',
    id: 'importHttpDisableStrictSSL',
    defaultValue: false,
  },
  importHttpConcurrencyLevel: {
    type: 'text',
    helpKey: 'import.http.concurrencyLevel',
    name: '/http/concurrencyLevel',
    id: 'importHttpConcurrencyLevel',
    defaultValue: '{{http.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importHttpRetryHeader: {
    type: 'text',
    helpKey: 'import.http.retryHeader',
    name: '/http/retryHeader',
    id: 'importHttpRetryHeader',
    defaultValue: '{{http.retryHeader}}',
  },
  importHttpPingRelativeURI: {
    type: 'text',
    helpKey: 'import.http.ping.relativeURI',
    name: '/http/ping/relativeURI',
    id: 'importHttpPingRelativeURI',
    defaultValue: '{{http.ping.relativeURI}}',
  },
  importHttpPingMethod: {
    type: 'radiogroup',
    helpKey: 'import.http.ping.method',
    name: '/http/ping/method',
    id: 'importHttpPingMethod',
    defaultValue: '{{http.ping.method}}',
    options: [
      {
        items: [
          { label: 'GET', value: 'GET' },
          { label: 'POST', value: 'POST' },
          { label: 'PUT', value: 'PUT' },
          { label: 'HEAD', value: 'HEAD' },
        ],
      },
    ],
  },
  importHttpPingBody: {
    type: 'text',
    helpKey: 'import.http.ping.body',
    name: '/http/ping/body',
    id: 'importHttpPingBody',
    defaultValue: '{{http.ping.body}}',
  },
  importHttpPingSuccessPath: {
    type: 'text',
    helpKey: 'import.http.ping.successPath',
    name: '/http/ping/successPath',
    id: 'importHttpPingSuccessPath',
    defaultValue: '{{http.ping.successPath}}',
  },
  importHttpPingSuccessValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'import.http.ping.successValuess',
    name: '/http/ping/successValuess',
    id: 'importHttpPingSuccessValuess',
    defaultValue: '{{http.ping.successValues}}',
    validWhen: [],
  },
  importHttpPingErrorPath: {
    type: 'text',
    helpKey: 'import.http.ping.errorPath',
    name: '/http/ping/errorPath',
    id: 'importHttpPingErrorPath',
    defaultValue: '{{http.ping.errorPath}}',
  },
  importHttpAuthFailStatusCode: {
    type: 'text',
    helpKey: 'import.http.auth.failStatusCode',
    name: '/http/auth/failStatusCode',
    id: 'importHttpAuthFailStatusCode',
    defaultValue: '{{http.auth.failStatusCode}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importHttpAuthFailPath: {
    type: 'text',
    helpKey: 'import.http.auth.failPath',
    name: '/http/auth/failPath',
    id: 'importHttpAuthFailPath',
    defaultValue: '{{http.auth.failPath}}',
  },
  importHttpAuthFailValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'import.http.auth.failValuess',
    name: '/http/auth/failValuess',
    id: 'importHttpAuthFailValuess',
    defaultValue: '{{http.auth.failValues}}',
    validWhen: [],
  },
  importHttpAuthBasicUsername: {
    type: 'text',
    helpKey: 'import.http.auth.basic.username',
    name: '/http/auth/basic/username',
    id: 'importHttpAuthBasicUsername',
    defaultValue: '{{http.auth.basic.username}}',
  },
  importHttpAuthBasicPassword: {
    type: 'text',
    helpKey: 'import.http.auth.basic.password',
    name: '/http/auth/basic/password',
    id: 'importHttpAuthBasicPassword',
    defaultValue: '{{http.auth.basic.password}}',
  },
  importHttpAuthOauthAuthURI: {
    type: 'text',
    helpKey: 'import.http.auth.oauth.authURI',
    name: '/http/auth/oauth/authURI',
    id: 'importHttpAuthOauthAuthURI',
    defaultValue: '{{http.auth.oauth.authURI}}',
  },
  importHttpAuthOauthTokenURI: {
    type: 'text',
    helpKey: 'import.http.auth.oauth.tokenURI',
    name: '/http/auth/oauth/tokenURI',
    id: 'importHttpAuthOauthTokenURI',
    defaultValue: '{{http.auth.oauth.tokenURI}}',
  },
  importHttpAuthOauthScopes: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'import.http.auth.oauth.scopes',
    name: '/http/auth/oauth/scopes',
    id: 'importHttpAuthOauthScopes',
    defaultValue: '{{http.auth.oauth.scope}}',
    validWhen: [],
  },
  importHttpAuthOauthScopeDelimiter: {
    type: 'text',
    helpKey: 'import.http.auth.oauth.scopeDelimiter',
    name: '/http/auth/oauth/scopeDelimiter',
    id: 'importHttpAuthOauthScopeDelimiter',
    defaultValue: '{{http.auth.oauth.scopeDelimiter}}',
  },
  importHttpAuthOauthAccessTokenPath: {
    type: 'text',
    helpKey: 'import.http.auth.oauth.accessTokenPath',
    name: '/http/auth/oauth/accessTokenPath',
    id: 'importHttpAuthOauthAccessTokenPath',
    defaultValue: '{{http.auth.oauth.accessTokenPath}}',
  },
  importHttpAuthOauthGrantType: {
    type: 'radiogroup',
    helpKey: 'import.http.auth.oauth.grantType',
    name: '/http/auth/oauth/grantType',
    id: 'importHttpAuthOauthGrantType',
    defaultValue: '{{http.auth.oauth.grantType}}',
    options: [
      {
        items: [
          { label: 'Authorizecode', value: 'authorizecode' },
          { label: 'Password', value: 'password' },
        ],
      },
    ],
  },
  importHttpAuthOauthUsername: {
    type: 'text',
    helpKey: 'import.http.auth.oauth.username',
    name: '/http/auth/oauth/username',
    id: 'importHttpAuthOauthUsername',
    defaultValue: '{{http.auth.oauth.username}}',
  },
  importHttpAuthOauthPassword: {
    type: 'text',
    helpKey: 'import.http.auth.oauth.password',
    name: '/http/auth/oauth/password',
    id: 'importHttpAuthOauthPassword',
    defaultValue: '{{http.auth.oauth.password}}',
  },
  importHttpAuthTokenToken: {
    type: 'text',
    helpKey: 'import.http.auth.token.token',
    name: '/http/auth/token/token',
    id: 'importHttpAuthTokenToken',
    defaultValue: '{{http.auth.token.token}}',
  },
  importHttpAuthTokenLocation: {
    type: 'radiogroup',
    helpKey: 'import.http.auth.token.location',
    name: '/http/auth/token/location',
    id: 'importHttpAuthTokenLocation',
    defaultValue: '{{http.auth.token.location}}',
    options: [
      {
        items: [
          { label: 'Url', value: 'url' },
          { label: 'Header', value: 'header' },
          { label: 'Body', value: 'body' },
        ],
      },
    ],
  },
  importHttpAuthTokenHeaderName: {
    type: 'text',
    helpKey: 'import.http.auth.token.headerName',
    name: '/http/auth/token/headerName',
    id: 'importHttpAuthTokenHeaderName',
    defaultValue: '{{http.auth.token.headerName}}',
  },
  importHttpAuthTokenScheme: {
    type: 'text',
    helpKey: 'import.http.auth.token.scheme',
    name: '/http/auth/token/scheme',
    id: 'importHttpAuthTokenScheme',
    defaultValue: '{{http.auth.token.scheme}}',
  },
  importHttpAuthTokenParamName: {
    type: 'text',
    helpKey: 'import.http.auth.token.paramName',
    name: '/http/auth/token/paramName',
    id: 'importHttpAuthTokenParamName',
    defaultValue: '{{http.auth.token.paramName}}',
  },
  importHttpAuthTokenRefreshMethod: {
    type: 'radiogroup',
    helpKey: 'import.http.auth.token.refreshMethod',
    name: '/http/auth/token/refreshMethod',
    id: 'importHttpAuthTokenRefreshMethod',
    defaultValue: '{{http.auth.token.refreshMethod}}',
    options: [
      {
        items: [
          { label: 'GET', value: 'GET' },
          { label: 'POST', value: 'POST' },
        ],
      },
    ],
  },
  importHttpAuthTokenRefreshRelativeURI: {
    type: 'text',
    helpKey: 'import.http.auth.token.refreshRelativeURI',
    name: '/http/auth/token/refreshRelativeURI',
    id: 'importHttpAuthTokenRefreshRelativeURI',
    defaultValue: '{{http.auth.token.refreshRelativeURI}}',
  },
  importHttpAuthTokenRefreshBody: {
    type: 'text',
    helpKey: 'import.http.auth.token.refreshBody',
    name: '/http/auth/token/refreshBody',
    id: 'importHttpAuthTokenRefreshBody',
    defaultValue: '{{http.auth.token.refreshBody}}',
  },
  importHttpAuthTokenRefreshTokenPath: {
    type: 'text',
    helpKey: 'import.http.auth.token.refreshTokenPath',
    name: '/http/auth/token/refreshTokenPath',
    id: 'importHttpAuthTokenRefreshTokenPath',
    defaultValue: '{{http.auth.token.refreshTokenPath}}',
  },
  importHttpAuthTokenRefreshMediaType: {
    type: 'radiogroup',
    helpKey: 'import.http.auth.token.refreshMediaType',
    name: '/http/auth/token/refreshMediaType',
    id: 'importHttpAuthTokenRefreshMediaType',
    defaultValue: '{{http.auth.token.refreshMediaType}}',
    options: [
      {
        items: [
          { label: 'Json', value: 'json' },
          { label: 'Urlencoded', value: 'urlencoded' },
          { label: 'Xml', value: 'xml' },
        ],
      },
    ],
  },
  importHttpAuthTokenRefreshHeaders: {
    type: 'keyvalue',
    keyName: 'name',
    valueName: 'value',
    valueType: 'keyvalue',
    helpKey: 'import.http.auth.token.refreshHeaders',
    name: '/http/auth/token/refreshHeaders',
    id: 'importHttpAuthTokenRefreshHeaders',
    defaultValue: '{{http.auth.token.refreshHeaders}}',
  },
  importHttpAuthTokenRefreshToken: {
    type: 'text',
    helpKey: 'import.http.auth.token.refreshToken',
    name: '/http/auth/token/refreshToken',
    id: 'importHttpAuthTokenRefreshToken',
    defaultValue: '{{http.auth.token.refreshToken}}',
  },
  importHttpRateLimitFailStatusCode: {
    type: 'text',
    helpKey: 'import.http.rateLimit.failStatusCode',
    name: '/http/rateLimit/failStatusCode',
    id: 'importHttpRateLimitFailStatusCode',
    defaultValue: '{{http.rateLimit.failStatusCode}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importHttpRateLimitFailPath: {
    type: 'text',
    helpKey: 'import.http.rateLimit.failPath',
    name: '/http/rateLimit/failPath',
    id: 'importHttpRateLimitFailPath',
    defaultValue: '{{http.rateLimit.failPath}}',
  },
  importHttpRateLimitFailValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'import.http.rateLimit.failValuess',
    name: '/http/rateLimit/failValuess',
    id: 'importHttpRateLimitFailValuess',
    defaultValue: '{{http.rateLimit.failValues}}',
    validWhen: [],
  },
  importHttpRateLimitLimit: {
    type: 'text',
    helpKey: 'import.http.rateLimit.limit',
    name: '/http/rateLimit/limit',
    id: 'importHttpRateLimitLimit',
    defaultValue: '{{http.rateLimit.limit}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
      {
        fallsWithinNumericalRange: {
          message:
            'The value must be greater than undefined and  lesser than undefined',
        },
      },
    ],
  },
  importHttpHeaders: {
    type: 'keyvalue',
    keyName: 'name',
    valueName: 'value',
    valueType: 'keyvalue',
    helpKey: 'import.http.headers',
    name: '/http/headers',
    id: 'importHttpHeaders',
    defaultValue: '{{http.headers}}',
  },
  importHttpUnencrypted: {
    type: 'text',
    helpKey: 'import.http.unencrypted',
    name: '/http/unencrypted',
    id: 'importHttpUnencrypted',
    defaultValue: '{{http.unencrypted}}',
  },
  importHttpEncrypted: {
    type: 'text',
    helpKey: 'import.http.encrypted',
    name: '/http/encrypted',
    id: 'importHttpEncrypted',
    defaultValue: '{{http.encrypted}}',
  },
  importHttpEncrypteds: {
    type: 'editor',
    valueType: 'editorExpression',
    helpKey: 'import.http.encrypteds',
    name: '/http/encrypteds',
    id: 'importHttpEncrypteds',
    defaultValue: '{{http.encrypted}}',
  },
  // #endregion http
  // #region rdbms
  importRdbmsHost: {
    type: 'text',
    helpKey: 'import.rdbms.host',
    name: '/rdbms/host',
    id: 'importRdbmsHost',
    defaultValue: '{{rdbms.host}}',
  },
  importRdbmsPort: {
    type: 'text',
    helpKey: 'import.rdbms.port',
    name: '/rdbms/port',
    id: 'importRdbmsPort',
    defaultValue: '{{rdbms.port}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importRdbmsDatabase: {
    type: 'text',
    helpKey: 'import.rdbms.database',
    name: '/rdbms/database',
    id: 'importRdbmsDatabase',
    defaultValue: '{{rdbms.database}}',
  },
  importRdbmsInstanceName: {
    type: 'text',
    helpKey: 'import.rdbms.instanceName',
    name: '/rdbms/instanceName',
    id: 'importRdbmsInstanceName',
    defaultValue: '{{rdbms.instanceName}}',
  },
  importRdbmsUser: {
    type: 'text',
    helpKey: 'import.rdbms.user',
    name: '/rdbms/user',
    id: 'importRdbmsUser',
    defaultValue: '{{rdbms.user}}',
  },
  importRdbmsPassword: {
    type: 'text',
    helpKey: 'import.rdbms.password',
    name: '/rdbms/password',
    id: 'importRdbmsPassword',
    defaultValue: '{{rdbms.password}}',
  },
  importRdbmsSslCa: {
    type: 'text',
    helpKey: 'import.rdbms.ssl.ca',
    name: '/rdbms/ssl/ca',
    id: 'importRdbmsSslCa',
    defaultValue: '{{rdbms.ssl.ca}}',
  },
  importRdbmsSslKey: {
    type: 'text',
    helpKey: 'import.rdbms.ssl.key',
    name: '/rdbms/ssl/key',
    id: 'importRdbmsSslKey',
    defaultValue: '{{rdbms.ssl.key}}',
  },
  importRdbmsSslPassphrase: {
    type: 'text',
    helpKey: 'import.rdbms.ssl.passphrase',
    name: '/rdbms/ssl/passphrase',
    id: 'importRdbmsSslPassphrase',
    defaultValue: '{{rdbms.ssl.passphrase}}',
  },
  importRdbmsSslCert: {
    type: 'text',
    helpKey: 'import.rdbms.ssl.cert',
    name: '/rdbms/ssl/cert',
    id: 'importRdbmsSslCert',
    defaultValue: '{{rdbms.ssl.cert}}',
  },
  importRdbmsConcurrencyLevel: {
    type: 'text',
    helpKey: 'import.rdbms.concurrencyLevel',
    name: '/rdbms/concurrencyLevel',
    id: 'importRdbmsConcurrencyLevel',
    defaultValue: '{{rdbms.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  // #endregion rdbms
  // #region mongodb
  importMongodbHosts: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'import.mongodb.hosts',
    name: '/mongodb/hosts',
    id: 'importMongodbHosts',
    defaultValue: '{{mongodb.host}}',
    validWhen: [],
  },
  importMongodbDatabase: {
    type: 'text',
    helpKey: 'import.mongodb.database',
    name: '/mongodb/database',
    id: 'importMongodbDatabase',
    defaultValue: '{{mongodb.database}}',
  },
  importMongodbUsername: {
    type: 'text',
    helpKey: 'import.mongodb.username',
    name: '/mongodb/username',
    id: 'importMongodbUsername',
    defaultValue: '{{mongodb.username}}',
  },
  importMongodbPassword: {
    type: 'text',
    helpKey: 'import.mongodb.password',
    name: '/mongodb/password',
    id: 'importMongodbPassword',
    defaultValue: '{{mongodb.password}}',
  },
  importMongodbReplicaSet: {
    type: 'text',
    helpKey: 'import.mongodb.replicaSet',
    name: '/mongodb/replicaSet',
    id: 'importMongodbReplicaSet',
    defaultValue: '{{mongodb.replicaSet}}',
  },
  // #endregion mongodb
  // #region as2
  importAs2As2Id: {
    type: 'text',
    helpKey: 'import.as2.as2Id',
    name: '/as2/as2Id',
    id: 'importAs2As2Id',
    defaultValue: '{{as2.as2Id}}',
  },
  importAs2PartnerId: {
    type: 'text',
    helpKey: 'import.as2.partnerId',
    name: '/as2/partnerId',
    id: 'importAs2PartnerId',
    defaultValue: '{{as2.partnerId}}',
  },
  importAs2ContentBasedFlowRouterFunction: {
    type: 'text',
    helpKey: 'import.as2.contentBasedFlowRouter.function',
    name: '/as2/contentBasedFlowRouter/function',
    id: 'importAs2ContentBasedFlowRouterFunction',
    defaultValue: '{{as2.contentBasedFlowRouter.function}}',
  },
  importAs2ContentBasedFlowRouter_scriptId: {
    type: 'text',
    helpKey: 'import.as2.contentBasedFlowRouter._scriptId',
    name: '/as2/contentBasedFlowRouter/_scriptId',
    id: 'importAs2ContentBasedFlowRouter_scriptId',
    defaultValue: '{{as2.contentBasedFlowRouter._scriptId}}',
  },
  importAs2PartnerStationInfoAs2URI: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.as2URI',
    name: '/as2/partnerStationInfo/as2URI',
    id: 'importAs2PartnerStationInfoAs2URI',
    defaultValue: '{{as2.partnerStationInfo.as2URI}}',
  },
  importAs2PartnerStationInfoMdnMdnURL: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.mdn.mdnURL',
    name: '/as2/partnerStationInfo/mdn/mdnURL',
    id: 'importAs2PartnerStationInfoMdnMdnURL',
    defaultValue: '{{as2.partnerStationInfo.mdn.mdnURL}}',
  },
  importAs2PartnerStationInfoMdnSignatureProtocol: {
    type: 'radiogroup',
    helpKey: 'import.as2.partnerStationInfo.mdn.signatureProtocol',
    name: '/as2/partnerStationInfo/mdn/signatureProtocol',
    id: 'importAs2PartnerStationInfoMdnSignatureProtocol',
    defaultValue: '{{as2.partnerStationInfo.mdn.signatureProtocol}}',
    options: [
      { items: [{ label: 'Pkcs7-signature', value: 'pkcs7-signature' }] },
    ],
  },
  importAs2PartnerStationInfoMdnMdnSigning: {
    type: 'radiogroup',
    helpKey: 'import.as2.partnerStationInfo.mdn.mdnSigning',
    name: '/as2/partnerStationInfo/mdn/mdnSigning',
    id: 'importAs2PartnerStationInfoMdnMdnSigning',
    defaultValue: '{{as2.partnerStationInfo.mdn.mdnSigning}}',
    options: [
      {
        items: [
          { label: 'NONE', value: 'NONE' },
          { label: 'SHA1', value: 'SHA1' },
          { label: 'MD5', value: 'MD5' },
          { label: 'SHA256', value: 'SHA256' },
        ],
      },
    ],
  },
  importAs2PartnerStationInfoAuthFailStatusCode: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.auth.failStatusCode',
    name: '/as2/partnerStationInfo/auth/failStatusCode',
    id: 'importAs2PartnerStationInfoAuthFailStatusCode',
    defaultValue: '{{as2.partnerStationInfo.auth.failStatusCode}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importAs2PartnerStationInfoAuthFailPath: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.auth.failPath',
    name: '/as2/partnerStationInfo/auth/failPath',
    id: 'importAs2PartnerStationInfoAuthFailPath',
    defaultValue: '{{as2.partnerStationInfo.auth.failPath}}',
  },
  importAs2PartnerStationInfoAuthFailValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'import.as2.partnerStationInfo.auth.failValuess',
    name: '/as2/partnerStationInfo/auth/failValuess',
    id: 'importAs2PartnerStationInfoAuthFailValuess',
    defaultValue: '{{as2.partnerStationInfo.auth.failValues}}',
    validWhen: [],
  },
  importAs2PartnerStationInfoAuthBasicUsername: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.auth.basic.username',
    name: '/as2/partnerStationInfo/auth/basic/username',
    id: 'importAs2PartnerStationInfoAuthBasicUsername',
    defaultValue: '{{as2.partnerStationInfo.auth.basic.username}}',
  },
  importAs2PartnerStationInfoAuthBasicPassword: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.auth.basic.password',
    name: '/as2/partnerStationInfo/auth/basic/password',
    id: 'importAs2PartnerStationInfoAuthBasicPassword',
    defaultValue: '{{as2.partnerStationInfo.auth.basic.password}}',
  },
  importAs2PartnerStationInfoAuthTokenToken: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.auth.token.token',
    name: '/as2/partnerStationInfo/auth/token/token',
    id: 'importAs2PartnerStationInfoAuthTokenToken',
    defaultValue: '{{as2.partnerStationInfo.auth.token.token}}',
  },
  importAs2PartnerStationInfoAuthTokenLocation: {
    type: 'radiogroup',
    helpKey: 'import.as2.partnerStationInfo.auth.token.location',
    name: '/as2/partnerStationInfo/auth/token/location',
    id: 'importAs2PartnerStationInfoAuthTokenLocation',
    defaultValue: '{{as2.partnerStationInfo.auth.token.location}}',
    options: [
      {
        items: [
          { label: 'Url', value: 'url' },
          { label: 'Header', value: 'header' },
          { label: 'Body', value: 'body' },
        ],
      },
    ],
  },
  importAs2PartnerStationInfoAuthTokenHeaderName: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.auth.token.headerName',
    name: '/as2/partnerStationInfo/auth/token/headerName',
    id: 'importAs2PartnerStationInfoAuthTokenHeaderName',
    defaultValue: '{{as2.partnerStationInfo.auth.token.headerName}}',
  },
  importAs2PartnerStationInfoAuthTokenScheme: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.auth.token.scheme',
    name: '/as2/partnerStationInfo/auth/token/scheme',
    id: 'importAs2PartnerStationInfoAuthTokenScheme',
    defaultValue: '{{as2.partnerStationInfo.auth.token.scheme}}',
  },
  importAs2PartnerStationInfoAuthTokenParamName: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.auth.token.paramName',
    name: '/as2/partnerStationInfo/auth/token/paramName',
    id: 'importAs2PartnerStationInfoAuthTokenParamName',
    defaultValue: '{{as2.partnerStationInfo.auth.token.paramName}}',
  },
  importAs2PartnerStationInfoAuthTokenRefreshMethod: {
    type: 'radiogroup',
    helpKey: 'import.as2.partnerStationInfo.auth.token.refreshMethod',
    name: '/as2/partnerStationInfo/auth/token/refreshMethod',
    id: 'importAs2PartnerStationInfoAuthTokenRefreshMethod',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshMethod}}',
    options: [
      {
        items: [
          { label: 'GET', value: 'GET' },
          { label: 'POST', value: 'POST' },
        ],
      },
    ],
  },
  importAs2PartnerStationInfoAuthTokenRefreshRelativeURI: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.auth.token.refreshRelativeURI',
    name: '/as2/partnerStationInfo/auth/token/refreshRelativeURI',
    id: 'importAs2PartnerStationInfoAuthTokenRefreshRelativeURI',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshRelativeURI}}',
  },
  importAs2PartnerStationInfoAuthTokenRefreshBody: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.auth.token.refreshBody',
    name: '/as2/partnerStationInfo/auth/token/refreshBody',
    id: 'importAs2PartnerStationInfoAuthTokenRefreshBody',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshBody}}',
  },
  importAs2PartnerStationInfoAuthTokenRefreshTokenPath: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.auth.token.refreshTokenPath',
    name: '/as2/partnerStationInfo/auth/token/refreshTokenPath',
    id: 'importAs2PartnerStationInfoAuthTokenRefreshTokenPath',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshTokenPath}}',
  },
  importAs2PartnerStationInfoAuthTokenRefreshMediaType: {
    type: 'radiogroup',
    helpKey: 'import.as2.partnerStationInfo.auth.token.refreshMediaType',
    name: '/as2/partnerStationInfo/auth/token/refreshMediaType',
    id: 'importAs2PartnerStationInfoAuthTokenRefreshMediaType',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshMediaType}}',
    options: [
      {
        items: [
          { label: 'Json', value: 'json' },
          { label: 'Urlencoded', value: 'urlencoded' },
          { label: 'Xml', value: 'xml' },
        ],
      },
    ],
  },
  importAs2PartnerStationInfoAuthTokenRefreshHeaders: {
    type: 'keyvalue',
    keyName: 'name',
    valueName: 'value',
    valueType: 'keyvalue',
    helpKey: 'import.as2.partnerStationInfo.auth.token.refreshHeaders',
    name: '/as2/partnerStationInfo/auth/token/refreshHeaders',
    id: 'importAs2PartnerStationInfoAuthTokenRefreshHeaders',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshHeaders}}',
  },
  importAs2PartnerStationInfoAuthTokenRefreshToken: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.auth.token.refreshToken',
    name: '/as2/partnerStationInfo/auth/token/refreshToken',
    id: 'importAs2PartnerStationInfoAuthTokenRefreshToken',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshToken}}',
  },
  importAs2PartnerStationInfoRateLimitFailStatusCode: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.rateLimit.failStatusCode',
    name: '/as2/partnerStationInfo/rateLimit/failStatusCode',
    id: 'importAs2PartnerStationInfoRateLimitFailStatusCode',
    defaultValue: '{{as2.partnerStationInfo.rateLimit.failStatusCode}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importAs2PartnerStationInfoRateLimitFailPath: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.rateLimit.failPath',
    name: '/as2/partnerStationInfo/rateLimit/failPath',
    id: 'importAs2PartnerStationInfoRateLimitFailPath',
    defaultValue: '{{as2.partnerStationInfo.rateLimit.failPath}}',
  },
  importAs2PartnerStationInfoRateLimitFailValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'import.as2.partnerStationInfo.rateLimit.failValuess',
    name: '/as2/partnerStationInfo/rateLimit/failValuess',
    id: 'importAs2PartnerStationInfoRateLimitFailValuess',
    defaultValue: '{{as2.partnerStationInfo.rateLimit.failValues}}',
    validWhen: [],
  },
  importAs2PartnerStationInfoRateLimitLimit: {
    type: 'text',
    helpKey: 'import.as2.partnerStationInfo.rateLimit.limit',
    name: '/as2/partnerStationInfo/rateLimit/limit',
    id: 'importAs2PartnerStationInfoRateLimitLimit',
    defaultValue: '{{as2.partnerStationInfo.rateLimit.limit}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
      {
        fallsWithinNumericalRange: {
          message:
            'The value must be greater than undefined and  lesser than undefined',
        },
      },
    ],
  },
  importAs2PartnerStationInfoSMIMEVersion: {
    type: 'radiogroup',
    helpKey: 'import.as2.partnerStationInfo.SMIMEVersion',
    name: '/as2/partnerStationInfo/SMIMEVersion',
    id: 'importAs2PartnerStationInfoSMIMEVersion',
    defaultValue: '{{as2.partnerStationInfo.SMIMEVersion}}',
    options: [
      { items: [{ label: 'V2', value: 'v2' }, { label: 'V3', value: 'v3' }] },
    ],
  },
  importAs2PartnerStationInfoEncryptionType: {
    type: 'radiogroup',
    helpKey: 'import.as2.partnerStationInfo.encryptionType',
    name: '/as2/partnerStationInfo/encryptionType',
    id: 'importAs2PartnerStationInfoEncryptionType',
    defaultValue: '{{as2.partnerStationInfo.encryptionType}}',
    options: [
      {
        items: [
          { label: 'NONE', value: 'NONE' },
          { label: 'DES', value: 'DES' },
          { label: 'RC2', value: 'RC2' },
          { label: '3DES', value: '3DES' },
          { label: 'AES128', value: 'AES128' },
          { label: 'AES256', value: 'AES256' },
        ],
      },
    ],
  },
  importAs2PartnerStationInfoSigning: {
    type: 'radiogroup',
    helpKey: 'import.as2.partnerStationInfo.signing',
    name: '/as2/partnerStationInfo/signing',
    id: 'importAs2PartnerStationInfoSigning',
    defaultValue: '{{as2.partnerStationInfo.signing}}',
    options: [
      {
        items: [
          { label: 'NONE', value: 'NONE' },
          { label: 'SHA1', value: 'SHA1' },
          { label: 'MD5', value: 'MD5' },
          { label: 'SHA256', value: 'SHA256' },
        ],
      },
    ],
  },
  importAs2PartnerStationInfoEncoding: {
    type: 'radiogroup',
    helpKey: 'import.as2.partnerStationInfo.encoding',
    name: '/as2/partnerStationInfo/encoding',
    id: 'importAs2PartnerStationInfoEncoding',
    defaultValue: '{{as2.partnerStationInfo.encoding}}',
    options: [
      {
        items: [
          { label: 'Base64', value: 'base64' },
          { label: 'Binary', value: 'binary' },
        ],
      },
    ],
  },
  importAs2UserStationInfoMdnMdnURL: {
    type: 'text',
    helpKey: 'import.as2.userStationInfo.mdn.mdnURL',
    name: '/as2/userStationInfo/mdn/mdnURL',
    id: 'importAs2UserStationInfoMdnMdnURL',
    defaultValue: '{{as2.userStationInfo.mdn.mdnURL}}',
  },
  importAs2UserStationInfoMdnSignatureProtocol: {
    type: 'radiogroup',
    helpKey: 'import.as2.userStationInfo.mdn.signatureProtocol',
    name: '/as2/userStationInfo/mdn/signatureProtocol',
    id: 'importAs2UserStationInfoMdnSignatureProtocol',
    defaultValue: '{{as2.userStationInfo.mdn.signatureProtocol}}',
    options: [
      { items: [{ label: 'Pkcs7-signature', value: 'pkcs7-signature' }] },
    ],
  },
  importAs2UserStationInfoMdnMdnSigning: {
    type: 'radiogroup',
    helpKey: 'import.as2.userStationInfo.mdn.mdnSigning',
    name: '/as2/userStationInfo/mdn/mdnSigning',
    id: 'importAs2UserStationInfoMdnMdnSigning',
    defaultValue: '{{as2.userStationInfo.mdn.mdnSigning}}',
    options: [
      {
        items: [
          { label: 'NONE', value: 'NONE' },
          { label: 'SHA1', value: 'SHA1' },
          { label: 'MD5', value: 'MD5' },
          { label: 'SHA256', value: 'SHA256' },
        ],
      },
    ],
  },
  importAs2UserStationInfoEncryptionType: {
    type: 'radiogroup',
    helpKey: 'import.as2.userStationInfo.encryptionType',
    name: '/as2/userStationInfo/encryptionType',
    id: 'importAs2UserStationInfoEncryptionType',
    defaultValue: '{{as2.userStationInfo.encryptionType}}',
    options: [
      {
        items: [
          { label: 'NONE', value: 'NONE' },
          { label: 'DES', value: 'DES' },
          { label: 'RC2', value: 'RC2' },
          { label: '3DES', value: '3DES' },
          { label: 'AES128', value: 'AES128' },
          { label: 'AES256', value: 'AES256' },
        ],
      },
    ],
  },
  importAs2UserStationInfoSigning: {
    type: 'radiogroup',
    helpKey: 'import.as2.userStationInfo.signing',
    name: '/as2/userStationInfo/signing',
    id: 'importAs2UserStationInfoSigning',
    defaultValue: '{{as2.userStationInfo.signing}}',
    options: [
      {
        items: [
          { label: 'NONE', value: 'NONE' },
          { label: 'SHA1', value: 'SHA1' },
          { label: 'MD5', value: 'MD5' },
          { label: 'SHA256', value: 'SHA256' },
        ],
      },
    ],
  },
  importAs2UserStationInfoEncoding: {
    type: 'radiogroup',
    helpKey: 'import.as2.userStationInfo.encoding',
    name: '/as2/userStationInfo/encoding',
    id: 'importAs2UserStationInfoEncoding',
    defaultValue: '{{as2.userStationInfo.encoding}}',
    options: [
      {
        items: [
          { label: 'Base64', value: 'base64' },
          { label: 'Binary', value: 'binary' },
        ],
      },
    ],
  },
  importAs2Encrypted: {
    type: 'text',
    helpKey: 'import.as2.encrypted',
    name: '/as2/encrypted',
    id: 'importAs2Encrypted',
    defaultValue: '{{as2.encrypted}}',
  },
  importAs2ConcurrencyLevel: {
    type: 'text',
    helpKey: 'import.as2.concurrencyLevel',
    name: '/as2/concurrencyLevel',
    id: 'importAs2ConcurrencyLevel',
    defaultValue: '{{as2.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  importAs2Unencrypted: {
    type: 'text',
    helpKey: 'import.as2.unencrypted',
    name: '/as2/unencrypted',
    id: 'importAs2Unencrypted',
    defaultValue: '{{as2.unencrypted}}',
  },
  importAs2Encrypteds: {
    type: 'editor',
    valueType: 'editorExpression',
    helpKey: 'import.as2.encrypteds',
    name: '/as2/encrypteds',
    id: 'importAs2Encrypteds',
    defaultValue: '{{as2.encrypted}}',
  },
  // #endregion as2
  // #endregion resource import
};
