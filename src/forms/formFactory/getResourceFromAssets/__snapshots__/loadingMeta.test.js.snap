// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getResourceFromAssets load correct form connections assistants should load a http assistant adp connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "accType": Object {
        "defaultValue": [Function],
        "helpKey": "adp.connection.accType",
        "id": "accType",
        "label": "Account type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Production",
                "value": "production",
              },
              Object {
                "label": "UAT",
                "value": "uat",
              },
            ],
          },
        ],
        "required": true,
        "type": "select",
      },
      "application": Object {
        "fieldId": "application",
      },
      "http.clientCertificates.cert": Object {
        "fieldId": "http.clientCertificates.cert",
        "helpKey": "adp.connection.http.clientCertificates.cert",
        "label": "SSL certificate",
        "required": true,
        "type": "uploadfile",
      },
      "http.clientCertificates.key": Object {
        "fieldId": "http.clientCertificates.key",
        "helpKey": "adp.connection.http.clientCertificates.key",
        "label": "SSL client key",
        "required": true,
        "type": "uploadfile",
      },
      "http.clientCertificates.passphrase": Object {
        "fieldId": "http.clientCertificates.passphrase",
        "helpKey": "adp.connection.http.clientCertificates.passphrase",
        "label": "SSL passphrase",
        "type": "textarea",
      },
      "http.encrypted.clientSecret": Object {
        "defaultValue": "",
        "description": "Note: for security reasons this field must always be re-entered.",
        "helpKey": "adp.connection.http.encrypted.clientSecret",
        "id": "http.encrypted.clientSecret",
        "inputType": "password",
        "label": "Client secret",
        "required": true,
        "type": "text",
      },
      "http.unencrypted.clientId": Object {
        "helpKey": "adp.connection.http.unencrypted.clientId",
        "id": "http.unencrypted.clientId",
        "label": "Client ID",
        "required": true,
        "type": "text",
      },
      "httpAdvanced": Object {
        "formId": "httpAdvanced",
      },
      "name": Object {
        "fieldId": "name",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "accType",
                "http.unencrypted.clientId",
                "http.encrypted.clientSecret",
                "http.clientCertificates.cert",
                "http.clientCertificates.key",
                "http.clientCertificates.passphrase",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "httpAdvanced",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections assistants should load a http assistant googledrive connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "application": Object {
        "fieldId": "application",
      },
      "fileAdvanced": Object {
        "formId": "fileAdvanced",
      },
      "http._iClientId": Object {
        "connectionId": [Function],
        "connectorId": [Function],
        "fieldId": "http._iClientId",
        "filter": Object {
          "provider": "custom_oauth2",
        },
        "ignoreEnvironmentFilter": true,
        "required": true,
        "type": "dynaiclient",
      },
      "http.auth.oauth.callbackURL": Object {
        "copyToClipboard": true,
        "fieldId": "http.auth.oauth.callbackURL",
      },
      "http.auth.oauth.scope": Object {
        "fieldId": "http.auth.oauth.scope",
        "scopes": Array [
          "https://www.googleapis.com/auth/drive",
          "https://www.googleapis.com/auth/drive.readonly",
          "https://www.googleapis.com/auth/drive.appfolder",
          "https://www.googleapis.com/auth/drive.file",
          "https://www.googleapis.com/auth/drive.install",
          "https://www.googleapis.com/auth/drive.metadata",
          "https://www.googleapis.com/auth/drive.metadata.readonly",
          "https://www.googleapis.com/auth/drive.photos.readonly",
          "https://www.googleapis.com/auth/drive.scripts",
          "https://www.googleapis.com/auth/drive.appdata",
          "https://www.googleapis.com/auth/drive.apps.readonly",
          "https://www.googleapis.com/auth/drive.activity",
          "https://www.googleapis.com/auth/drive.activity.readonly",
        ],
      },
      "httpAdvanced": Object {
        "formId": "httpAdvanced",
      },
      "name": Object {
        "fieldId": "name",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "http.auth.oauth.callbackURL",
                "http._iClientId",
                "http.auth.oauth.scope",
              ],
              "label": "Configure your client id and secret",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "fileAdvanced",
                "httpAdvanced",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections assistants should load a rest assistant certify connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "application": Object {
        "fieldId": "application",
      },
      "http.encrypted.apiKey": Object {
        "defaultValue": "",
        "description": "Note: for security reasons this field must always be re-entered.",
        "helpKey": "certify.connection.http.encrypted.apiKey",
        "id": "http.encrypted.apiKey",
        "inputType": "password",
        "label": "API key",
        "required": true,
        "type": "text",
      },
      "http.encrypted.apiSecret": Object {
        "defaultValue": "",
        "description": "Note: for security reasons this field must always be re-entered.",
        "helpKey": "certify.connection.http.encrypted.apiSecret",
        "id": "http.encrypted.apiSecret",
        "inputType": "password",
        "label": "API secret",
        "required": true,
        "type": "text",
      },
      "httpAdvanced": Object {
        "formId": "httpAdvanced",
      },
      "name": Object {
        "fieldId": "name",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "http.encrypted.apiKey",
                "http.encrypted.apiSecret",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "httpAdvanced",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections other connections should load a as2 connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": Array [
      Object {
        "id": "saveandclosegroup",
      },
    ],
    "fieldMap": Object {
      "application": Object {
        "fieldId": "application",
      },
      "as2.as2Id": Object {
        "defaultDisabled": [Function],
        "fieldId": "as2.as2Id",
      },
      "as2.concurrencyLevel": Object {
        "fieldId": "as2.concurrencyLevel",
      },
      "as2.contentBasedFlowRouter": Object {
        "fieldId": "as2.contentBasedFlowRouter",
      },
      "as2.encrypted.userPrivateKey": Object {
        "fieldId": "as2.encrypted.userPrivateKey",
      },
      "as2.partnerId": Object {
        "defaultDisabled": [Function],
        "fieldId": "as2.partnerId",
      },
      "as2.partnerStationInfo.as2URI": Object {
        "fieldId": "as2.partnerStationInfo.as2URI",
      },
      "as2.partnerStationInfo.auth.basic.password": Object {
        "fieldId": "as2.partnerStationInfo.auth.basic.password",
      },
      "as2.partnerStationInfo.auth.basic.username": Object {
        "fieldId": "as2.partnerStationInfo.auth.basic.username",
      },
      "as2.partnerStationInfo.auth.failPath": Object {
        "fieldId": "as2.partnerStationInfo.auth.failPath",
      },
      "as2.partnerStationInfo.auth.failStatusCode": Object {
        "fieldId": "as2.partnerStationInfo.auth.failStatusCode",
      },
      "as2.partnerStationInfo.auth.failValues": Object {
        "fieldId": "as2.partnerStationInfo.auth.failValues",
      },
      "as2.partnerStationInfo.auth.token.headerName": Object {
        "fieldId": "as2.partnerStationInfo.auth.token.headerName",
      },
      "as2.partnerStationInfo.auth.token.location": Object {
        "fieldId": "as2.partnerStationInfo.auth.token.location",
      },
      "as2.partnerStationInfo.auth.token.paramName": Object {
        "fieldId": "as2.partnerStationInfo.auth.token.paramName",
      },
      "as2.partnerStationInfo.auth.token.refreshBody": Object {
        "fieldId": "as2.partnerStationInfo.auth.token.refreshBody",
      },
      "as2.partnerStationInfo.auth.token.refreshHeaders": Object {
        "fieldId": "as2.partnerStationInfo.auth.token.refreshHeaders",
      },
      "as2.partnerStationInfo.auth.token.refreshMediaType": Object {
        "fieldId": "as2.partnerStationInfo.auth.token.refreshMediaType",
      },
      "as2.partnerStationInfo.auth.token.refreshMethod": Object {
        "fieldId": "as2.partnerStationInfo.auth.token.refreshMethod",
      },
      "as2.partnerStationInfo.auth.token.refreshRelativeURI": Object {
        "fieldId": "as2.partnerStationInfo.auth.token.refreshRelativeURI",
      },
      "as2.partnerStationInfo.auth.token.refreshToken": Object {
        "fieldId": "as2.partnerStationInfo.auth.token.refreshToken",
      },
      "as2.partnerStationInfo.auth.token.refreshTokenPath": Object {
        "fieldId": "as2.partnerStationInfo.auth.token.refreshTokenPath",
      },
      "as2.partnerStationInfo.auth.token.scheme": Object {
        "fieldId": "as2.partnerStationInfo.auth.token.scheme",
      },
      "as2.partnerStationInfo.auth.token.token": Object {
        "fieldId": "as2.partnerStationInfo.auth.token.token",
      },
      "as2.partnerStationInfo.auth.type": Object {
        "defaultValue": [Function],
        "fieldId": "as2.partnerStationInfo.auth.type",
      },
      "as2.partnerStationInfo.encoding": Object {
        "fieldId": "as2.partnerStationInfo.encoding",
      },
      "as2.partnerStationInfo.encryptionType": Object {
        "fieldId": "as2.partnerStationInfo.encryptionType",
      },
      "as2.partnerStationInfo.mdn.mdnSigning": Object {
        "fieldId": "as2.partnerStationInfo.mdn.mdnSigning",
      },
      "as2.partnerStationInfo.mdn.verifyMDNSignature": Object {
        "fieldId": "as2.partnerStationInfo.mdn.verifyMDNSignature",
      },
      "as2.partnerStationInfo.rateLimit.failPath": Object {
        "fieldId": "as2.partnerStationInfo.rateLimit.failPath",
      },
      "as2.partnerStationInfo.rateLimit.failStatusCode": Object {
        "fieldId": "as2.partnerStationInfo.rateLimit.failStatusCode",
      },
      "as2.partnerStationInfo.rateLimit.failValues": Object {
        "fieldId": "as2.partnerStationInfo.rateLimit.failValues",
      },
      "as2.partnerStationInfo.rateLimit.limit": Object {
        "fieldId": "as2.partnerStationInfo.rateLimit.limit",
      },
      "as2.partnerStationInfo.signatureEncoding": Object {
        "fieldId": "as2.partnerStationInfo.signatureEncoding",
      },
      "as2.partnerStationInfo.signing": Object {
        "fieldId": "as2.partnerStationInfo.signing",
      },
      "as2.preventCanonicalization": Object {
        "fieldId": "as2.preventCanonicalization",
      },
      "as2.unencrypted.partnerCertificate": Object {
        "fieldId": "as2.unencrypted.partnerCertificate",
      },
      "as2.unencrypted.userPublicKey": Object {
        "fieldId": "as2.unencrypted.userPublicKey",
      },
      "as2.userStationInfo.encoding": Object {
        "fieldId": "as2.userStationInfo.encoding",
      },
      "as2.userStationInfo.encryptionType": Object {
        "fieldId": "as2.userStationInfo.encryptionType",
      },
      "as2.userStationInfo.ipAddresses": Object {
        "fieldId": "as2.userStationInfo.ipAddresses",
        "label": "AS2 IP addresses: ",
        "value": <span>
          Click
           
          <a
            href="https://integrator.io/zendesk/sso?return_to=https://docs.celigo.com/hc/en-us/articles/115003717028-Whitelist-integrator-io-IPs"
            target="_blank"
          >
            here
          </a>
           
          to see the list of IP Addresses
        </span>,
      },
      "as2.userStationInfo.mdn.mdnEncoding": Object {
        "fieldId": "as2.userStationInfo.mdn.mdnEncoding",
      },
      "as2.userStationInfo.mdn.mdnSigning": Object {
        "fieldId": "as2.userStationInfo.mdn.mdnSigning",
      },
      "as2.userStationInfo.mdn.mdnURL": Object {
        "fieldId": "as2.userStationInfo.mdn.mdnURL",
      },
      "as2.userStationInfo.signing": Object {
        "fieldId": "as2.userStationInfo.signing",
      },
      "as2Mode": Object {
        "id": "as2Mode",
        "label": "AS2 mode",
        "type": "as2Mode",
      },
      "configureTokenRefresh": Object {
        "defaultValue": [Function],
        "id": "configureTokenRefresh",
        "label": "Configure token refresh",
        "type": "checkbox",
        "visibleWhenAll": Array [
          Object {
            "field": "as2.partnerStationInfo.auth.type",
            "is": Array [
              "token",
            ],
          },
          Object {
            "field": "as2.partnerStationInfo.auth.token.location",
            "isNot": Array [
              "",
            ],
          },
        ],
      },
      "name": Object {
        "fieldId": "name",
      },
      "partnerrequireasynchronousmdns": Object {
        "fieldId": "partnerrequireasynchronousmdns",
      },
      "refreshTokenHeader": Object {
        "id": "refreshTokenHeader",
        "label": "How to refresh token?",
        "type": "labeltitle",
        "visibleWhen": Array [
          Object {
            "field": "configureTokenRefresh",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "requireasynchronousmdns": Object {
        "fieldId": "requireasynchronousmdns",
      },
      "requiremdnspartners": Object {
        "fieldId": "requiremdnspartners",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "tokenHeader": Object {
        "id": "tokenHeader",
        "label": "How to send token?",
        "type": "labeltitle",
        "visibleWhen": Array [
          Object {
            "field": "as2.partnerStationInfo.auth.type",
            "is": Array [
              "token",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "as2Mode",
                "as2.as2Id",
                "requiremdnspartners",
                "requireasynchronousmdns",
                "as2.userStationInfo.mdn.mdnSigning",
                "as2.userStationInfo.mdn.mdnEncoding",
                "as2.userStationInfo.encryptionType",
                "as2.userStationInfo.signing",
                "as2.userStationInfo.encoding",
                "as2.unencrypted.userPublicKey",
                "as2.encrypted.userPrivateKey",
                "as2.userStationInfo.ipAddresses",
              ],
              "label": "Configure my AS2 station",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "as2.partnerStationInfo.as2URI",
                "as2.partnerId",
                "partnerrequireasynchronousmdns",
                "as2.userStationInfo.mdn.mdnURL",
                "as2.partnerStationInfo.mdn.verifyMDNSignature",
                "as2.partnerStationInfo.mdn.mdnSigning",
                "as2.partnerStationInfo.encryptionType",
                "as2.partnerStationInfo.signing",
                "as2.partnerStationInfo.encoding",
                "as2.partnerStationInfo.signatureEncoding",
                "as2.unencrypted.partnerCertificate",
              ],
              "label": "Configure partner AS2 station",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "as2.partnerStationInfo.auth.type",
                "as2.partnerStationInfo.auth.failStatusCode",
                "as2.partnerStationInfo.auth.failPath",
                "as2.partnerStationInfo.auth.failValues",
                "as2.partnerStationInfo.auth.basic.username",
                "as2.partnerStationInfo.auth.basic.password",
                "as2.partnerStationInfo.auth.token.token",
                "tokenHeader",
                "as2.partnerStationInfo.auth.token.location",
                "as2.partnerStationInfo.auth.token.headerName",
                "as2.partnerStationInfo.auth.token.scheme",
                "as2.partnerStationInfo.auth.token.paramName",
                "configureTokenRefresh",
                "refreshTokenHeader",
                "as2.partnerStationInfo.auth.token.refreshToken",
                "as2.partnerStationInfo.auth.token.refreshRelativeURI",
                "as2.partnerStationInfo.auth.token.refreshMediaType",
                "as2.partnerStationInfo.auth.token.refreshMethod",
                "as2.partnerStationInfo.auth.token.refreshBody",
                "as2.partnerStationInfo.auth.token.refreshTokenPath",
                "as2.partnerStationInfo.auth.token.refreshHeaders",
              ],
              "label": "Configure auth",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "as2.partnerStationInfo.rateLimit.limit",
                "as2.partnerStationInfo.rateLimit.failStatusCode",
                "as2.partnerStationInfo.rateLimit.failPath",
                "as2.partnerStationInfo.rateLimit.failValues",
              ],
              "label": "Nonstandard API rate limiter",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "as2.contentBasedFlowRouter",
              ],
              "label": "Configure routing for shared connections",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "as2.preventCanonicalization",
                "as2.concurrencyLevel",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections other connections should load a dynamodb connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "application": Object {
        "fieldId": "application",
      },
      "dynamodb.aws.accessKeyId": Object {
        "fieldId": "dynamodb.aws.accessKeyId",
      },
      "dynamodb.aws.secretAccessKey": Object {
        "fieldId": "dynamodb.aws.secretAccessKey",
      },
      "name": Object {
        "fieldId": "name",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "dynamodb.aws.accessKeyId",
                "dynamodb.aws.secretAccessKey",
              ],
              "label": "Application details",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections other connections should load a ftp connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "application": Object {
        "fieldId": "application",
      },
      "fileAdvanced": Object {
        "formId": "fileAdvanced",
      },
      "ftp.authKey": Object {
        "fieldId": "ftp.authKey",
        "visibleWhen": Array [
          Object {
            "field": "ftp.type",
            "is": Array [
              "sftp",
            ],
          },
        ],
      },
      "ftp.concurrencyLevel": Object {
        "fieldId": "ftp.concurrencyLevel",
      },
      "ftp.entryParser": Object {
        "fieldId": "ftp.entryParser",
        "required": false,
      },
      "ftp.hostURI": Object {
        "fieldId": "ftp.hostURI",
      },
      "ftp.password": Object {
        "fieldId": "ftp.password",
      },
      "ftp.port": Object {
        "fieldId": "ftp.port",
        "validWhen": Object {
          "matchesRegEx": Object {
            "message": "Must be a number.",
            "pattern": "^[\\\\d]+$",
          },
        },
      },
      "ftp.requireSocketReUse": Object {
        "fieldId": "ftp.requireSocketReUse",
        "visibleWhen": Array [
          Object {
            "field": "ftp.type",
            "is": Array [
              "ftps",
            ],
          },
        ],
      },
      "ftp.type": Object {
        "fieldId": "ftp.type",
      },
      "ftp.useImplicitFtps": Object {
        "fieldId": "ftp.useImplicitFtps",
        "visibleWhen": Array [
          Object {
            "field": "ftp.type",
            "is": Array [
              "ftps",
            ],
          },
        ],
      },
      "ftp.usePassiveMode": Object {
        "fieldId": "ftp.usePassiveMode",
        "visibleWhen": Array [
          Object {
            "field": "ftp.type",
            "is": Array [
              "ftp",
              "ftps",
            ],
          },
        ],
      },
      "ftp.userDirectoryIsRoot": Object {
        "fieldId": "ftp.userDirectoryIsRoot",
      },
      "ftp.username": Object {
        "fieldId": "ftp.username",
      },
      "name": Object {
        "fieldId": "name",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "ftp.hostURI",
                "ftp.type",
                "ftp.username",
                "ftp.password",
                "ftp.authKey",
                "ftp.useImplicitFtps",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "ftp.port",
                "ftp.usePassiveMode",
                "ftp.userDirectoryIsRoot",
                "ftp.entryParser",
                "ftp.requireSocketReUse",
                "fileAdvanced",
                "ftp.concurrencyLevel",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections other connections should load a mongodb connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_agentId": Object {
        "fieldId": "_agentId",
        "visibleWhen": Array [
          Object {
            "field": "mode",
            "is": Array [
              "onpremise",
            ],
          },
        ],
      },
      "application": Object {
        "fieldId": "application",
      },
      "mode": Object {
        "defaultValue": [Function],
        "id": "mode",
        "isLoggable": true,
        "label": "Mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Cloud",
                "value": "cloud",
              },
              Object {
                "label": "On-premise",
                "value": "onpremise",
              },
            ],
          },
        ],
        "type": "radiogroup",
      },
      "mongodb.authSource": Object {
        "fieldId": "mongodb.authSource",
      },
      "mongodb.database": Object {
        "fieldId": "mongodb.database",
      },
      "mongodb.host": Object {
        "fieldId": "mongodb.host",
      },
      "mongodb.password": Object {
        "fieldId": "mongodb.password",
      },
      "mongodb.replicaSet": Object {
        "fieldId": "mongodb.replicaSet",
      },
      "mongodb.ssl": Object {
        "fieldId": "mongodb.ssl",
      },
      "mongodb.username": Object {
        "fieldId": "mongodb.username",
      },
      "name": Object {
        "fieldId": "name",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
                "mode",
                "_agentId",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "mongodb.host",
                "mongodb.database",
                "mongodb.username",
                "mongodb.password",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "mongodb.replicaSet",
                "mongodb.ssl",
                "mongodb.authSource",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections other connections should load a netSuiteDistributedAdaptor connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "name": Object {
        "fieldId": "name",
      },
      "netSuiteDistributedAdaptor.accountId": Object {
        "fieldId": "netSuiteDistributedAdaptor.accountId",
      },
      "netSuiteDistributedAdaptor.environment": Object {
        "fieldId": "netSuiteDistributedAdaptor.environment",
      },
      "netSuiteDistributedAdaptor.id": Object {
        "fieldId": "netSuiteDistributedAdaptor.id",
      },
      "netSuiteDistributedAdaptor.uri": Object {
        "fieldId": "netSuiteDistributedAdaptor.uri",
      },
      "netSuiteDistributedAdaptor.username": Object {
        "fieldId": "netSuiteDistributedAdaptor.username",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "type": Object {
        "fieldId": "type",
      },
    },
    "layout": Object {
      "fields": Array [
        "type",
        "name",
        "netSuiteDistributedAdaptor.accountId",
        "netSuiteDistributedAdaptor.environment",
        "netSuiteDistributedAdaptor.id",
        "netSuiteDistributedAdaptor.username",
        "netSuiteDistributedAdaptor.uri",
        "settings",
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections other connections should load a netsuite connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": Array [
      Object {
        "id": "saveandclosegroup",
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "",
            ],
          },
        ],
      },
      Object {
        "id": "oauthandcancel",
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "token-auto",
            ],
          },
        ],
      },
      Object {
        "id": "testandsavegroup",
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "token",
            ],
          },
        ],
      },
      Object {
        "id": "validateandsave",
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "basic",
            ],
          },
        ],
      },
    ],
    "fieldMap": Object {
      "_borrowConcurrencyFromConnectionId": Object {
        "fieldId": "_borrowConcurrencyFromConnectionId",
      },
      "application": Object {
        "fieldId": "application",
      },
      "name": Object {
        "fieldId": "name",
      },
      "netsuite._iClientId": Object {
        "connType": "netsuite",
        "connectionId": [Function],
        "connectorId": [Function],
        "fieldId": "netsuite._iClientId",
        "filter": Object {
          "provider": "netsuite",
        },
        "ignoreEnvironmentFilter": true,
        "requiredWhen": [Function],
        "type": "dynaiclient",
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "token",
              "token-auto",
            ],
          },
        ],
      },
      "netsuite.account": Object {
        "fieldId": "netsuite.account",
        "netsuiteResourceType": "account",
        "refreshOptionsOnChangesTo": Array [
          "validate",
          "netsuite.account",
          "netsuite.environment",
          "netsuite.roleId",
        ],
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "basic",
            ],
          },
        ],
      },
      "netsuite.authType": Object {
        "id": "netsuite.authType",
        "isLoggable": true,
        "label": "Authentication type",
        "required": true,
        "skipSort": true,
        "type": "nsauthtype",
      },
      "netsuite.concurrencyLevel": Object {
        "fieldId": "netsuite.concurrencyLevel",
      },
      "netsuite.email": Object {
        "fieldId": "netsuite.email",
        "requiredWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "basic",
            ],
          },
        ],
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "basic",
            ],
          },
        ],
      },
      "netsuite.environment": Object {
        "fieldId": "netsuite.environment",
        "netsuiteResourceType": "environment",
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "basic",
            ],
          },
        ],
      },
      "netsuite.linkSuiteScriptIntegrator": Object {
        "fieldId": "netsuite.linkSuiteScriptIntegrator",
      },
      "netsuite.password": Object {
        "fieldId": "netsuite.password",
        "requiredWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "basic",
            ],
          },
        ],
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "basic",
            ],
          },
        ],
      },
      "netsuite.roleId": Object {
        "fieldId": "netsuite.roleId",
        "netsuiteResourceType": "role",
        "refreshOptionsOnChangesTo": Array [
          "validate",
          "netsuite.account",
          "netsuite.environment",
          "netsuite.roleId",
        ],
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "basic",
            ],
          },
        ],
      },
      "netsuite.token.auto.account": Object {
        "defaultValue": [Function],
        "id": "netsuite.token.auto.account",
        "label": "Account ID",
        "required": true,
        "type": "text",
        "uppercase": true,
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "token-auto",
            ],
          },
        ],
      },
      "netsuite.token.auto.roleId": Object {
        "defaultDisabled": true,
        "defaultValue": [Function],
        "fieldId": "netsuite.token.auto.roleId",
        "isLoggable": true,
        "label": "Role",
        "type": "text",
        "visible": [Function],
        "visibleWhen": [Function],
      },
      "netsuite.tokenAccount": Object {
        "defaultValue": [Function],
        "id": "netsuite.tokenAccount",
        "label": "Account ID",
        "type": "text",
        "uppercase": true,
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "token",
            ],
          },
        ],
      },
      "netsuite.tokenEnvironment": Object {
        "fieldId": "netsuite.tokenEnvironment",
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "token",
            ],
          },
        ],
      },
      "netsuite.tokenId": Object {
        "fieldId": "netsuite.tokenId",
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "token",
            ],
          },
        ],
      },
      "netsuite.tokenSecret": Object {
        "fieldId": "netsuite.tokenSecret",
        "visibleWhen": Array [
          Object {
            "field": "netsuite.authType",
            "is": Array [
              "token",
            ],
          },
        ],
      },
      "netsuite.wsdlVersion": Object {
        "defaultValue": [Function],
        "id": "netsuite.wsdlVersion",
        "label": "WSDL version",
        "options": Array [
          Object {
            "items": Array [
              "2020.2",
              "2018.1",
              "2016.2",
            ],
          },
        ],
        "skipSort": true,
        "type": "select",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "netsuite.authType",
                "netsuite.email",
                "netsuite.password",
                "netsuite.environment",
                "netsuite.tokenEnvironment",
                "netsuite.account",
                "netsuite.tokenAccount",
                "netsuite.token.auto.account",
                "netsuite.token.auto.roleId",
                "netsuite.roleId",
                "netsuite.tokenId",
                "netsuite.tokenSecret",
                "netsuite._iClientId",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "netsuite.linkSuiteScriptIntegrator",
                "_borrowConcurrencyFromConnectionId",
                "netsuite.concurrencyLevel",
                "netsuite.wsdlVersion",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections other connections should load a s3 connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "application": Object {
        "fieldId": "application",
      },
      "fileAdvanced": Object {
        "formId": "fileAdvanced",
      },
      "name": Object {
        "fieldId": "name",
      },
      "s3.accessKeyId": Object {
        "fieldId": "s3.accessKeyId",
        "required": true,
      },
      "s3.pingBucket": Object {
        "fieldId": "s3.pingBucket",
      },
      "s3.secretAccessKey": Object {
        "fieldId": "s3.secretAccessKey",
        "required": true,
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "s3.accessKeyId",
                "s3.secretAccessKey",
                "s3.pingBucket",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "fileAdvanced",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections other connections should load a salesforce connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_borrowConcurrencyFromConnectionId": Object {
        "fieldId": "_borrowConcurrencyFromConnectionId",
      },
      "application": Object {
        "fieldId": "application",
      },
      "name": Object {
        "fieldId": "name",
      },
      "salesforce.concurrencyLevel": Object {
        "fieldId": "salesforce.concurrencyLevel",
      },
      "salesforce.info.email": Object {
        "defaultDisabled": true,
        "defaultValue": [Function],
        "helpKey": "Your Salesforce account email.",
        "id": "salesforce.info.email",
        "label": "Email",
        "type": "text",
        "visible": [Function],
      },
      "salesforce.info.organization_id": Object {
        "defaultDisabled": true,
        "defaultValue": [Function],
        "helpKey": "Your organization's unique Salesforce ID",
        "id": "salesforce.info.organization_id",
        "label": "Organization id",
        "type": "text",
        "visible": [Function],
      },
      "salesforce.oauth2FlowType": Object {
        "fieldId": "salesforce.oauth2FlowType",
      },
      "salesforce.sandbox": Object {
        "fieldId": "salesforce.sandbox",
      },
      "salesforce.username": Object {
        "fieldId": "salesforce.username",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "salesforce.info.email",
                "salesforce.info.organization_id",
                "salesforce.sandbox",
                "salesforce.oauth2FlowType",
                "salesforce.username",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "_borrowConcurrencyFromConnectionId",
                "salesforce.concurrencyLevel",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections other connections should load a wrapper connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "application": Object {
        "fieldId": "application",
      },
      "name": Object {
        "fieldId": "name",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "wrapper._stackId": Object {
        "fieldId": "wrapper._stackId",
      },
      "wrapper.pingFunction": Object {
        "fieldId": "wrapper.pingFunction",
      },
      "wrapperAdvanced": Object {
        "formId": "wrapperAdvanced",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "wrapper.pingFunction",
                "wrapper._stackId",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "wrapperAdvanced",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": [Function],
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections rdbms type rdbms should load a mssql connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_agentId": Object {
        "fieldId": "_agentId",
        "visibleWhen": Array [
          Object {
            "field": "mode",
            "is": Array [
              "onpremise",
            ],
          },
        ],
      },
      "application": Object {
        "fieldId": "application",
      },
      "mode": Object {
        "defaultValue": [Function],
        "id": "mode",
        "isLoggable": true,
        "label": "Mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Cloud",
                "value": "cloud",
              },
              Object {
                "label": "On-premise",
                "value": "onpremise",
              },
            ],
          },
        ],
        "type": "radiogroup",
      },
      "name": Object {
        "fieldId": "name",
      },
      "rdbms.instanceName": Object {
        "fieldId": "rdbms.instanceName",
      },
      "rdbms.port": Object {
        "fieldId": "rdbms.port",
      },
      "rdbms.version": Object {
        "fieldId": "rdbms.version",
        "helpKey": "mssql.connection.rdbms.version",
      },
      "rdbmsAdvanced": Object {
        "formId": "rdbmsAdvanced",
      },
      "rdbmsFields": Object {
        "formId": "rdbmsFields",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
                "mode",
                "_agentId",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.version",
                "rdbmsFields",
                "rdbms.instanceName",
                "rdbms.port",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbmsAdvanced",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections rdbms type rdbms should load a mysql connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_agentId": Object {
        "fieldId": "_agentId",
        "visibleWhen": Array [
          Object {
            "field": "mode",
            "is": Array [
              "onpremise",
            ],
          },
        ],
      },
      "application": Object {
        "fieldId": "application",
      },
      "mode": Object {
        "defaultValue": [Function],
        "id": "mode",
        "isLoggable": true,
        "label": "Mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Cloud",
                "value": "cloud",
              },
              Object {
                "label": "On-premise",
                "value": "onpremise",
              },
            ],
          },
        ],
        "type": "radiogroup",
      },
      "name": Object {
        "fieldId": "name",
      },
      "rdbms.disableStrictSSL": Object {
        "fieldId": "rdbms.disableStrictSSL",
      },
      "rdbms.port": Object {
        "fieldId": "rdbms.port",
      },
      "rdbms.ssl.ca": Object {
        "fieldId": "rdbms.ssl.ca",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.useSSL",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "rdbms.useSSL": Object {
        "defaultValue": [Function],
        "id": "rdbms.useSSL",
        "label": "Use SSL",
        "type": "checkbox",
      },
      "rdbmsAdvanced": Object {
        "formId": "rdbmsAdvanced",
      },
      "rdbmsFields": Object {
        "formId": "rdbmsFields",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
                "mode",
                "_agentId",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbmsFields",
                "rdbms.port",
                "rdbms.useSSL",
                "rdbms.ssl.ca",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.disableStrictSSL",
                "rdbmsAdvanced",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections rdbms type rdbms should load a oracle connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_agentId": Object {
        "fieldId": "_agentId",
        "required": true,
        "visibleWhen": Array [
          Object {
            "field": "mode",
            "is": Array [
              "onpremise",
            ],
          },
        ],
      },
      "_borrowConcurrencyFromConnectionId": Object {
        "fieldId": "_borrowConcurrencyFromConnectionId",
      },
      "application": Object {
        "fieldId": "application",
      },
      "mode": Object {
        "defaultDisabled": true,
        "defaultValue": "onpremise",
        "id": "mode",
        "isLoggable": true,
        "label": "Mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Cloud",
                "value": "cloud",
              },
              Object {
                "label": "On-premise",
                "value": "onpremise",
              },
            ],
          },
        ],
        "type": "radiogroup",
      },
      "name": Object {
        "fieldId": "name",
      },
      "rdbms.concurrencyLevel": Object {
        "fieldId": "rdbms.concurrencyLevel",
      },
      "rdbms.host": Object {
        "fieldId": "rdbms.host",
      },
      "rdbms.instanceName": Object {
        "fieldId": "rdbms.instanceName",
      },
      "rdbms.password": Object {
        "fieldId": "rdbms.password",
      },
      "rdbms.port": Object {
        "fieldId": "rdbms.port",
      },
      "rdbms.serverType": Object {
        "id": "rdbms.serverType",
        "label": "Server Type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Dedicated",
                "value": "dedicated",
              },
              Object {
                "label": "Shared",
                "value": "shared",
              },
              Object {
                "label": "Pooled",
                "value": "pooled",
              },
            ],
          },
        ],
        "type": "select",
      },
      "rdbms.serviceName": Object {
        "id": "rdbms.serviceName",
        "label": "Service Name",
        "type": "text",
      },
      "rdbms.user": Object {
        "fieldId": "rdbms.user",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
                "mode",
                "_agentId",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.host",
                "rdbms.user",
                "rdbms.password",
                "rdbms.instanceName",
                "rdbms.port",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.serviceName",
                "rdbms.serverType",
                "_borrowConcurrencyFromConnectionId",
                "rdbms.concurrencyLevel",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections rdbms type rdbms should load a postgresql connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_agentId": Object {
        "fieldId": "_agentId",
        "visibleWhen": Array [
          Object {
            "field": "mode",
            "is": Array [
              "onpremise",
            ],
          },
        ],
      },
      "application": Object {
        "fieldId": "application",
      },
      "mode": Object {
        "defaultValue": [Function],
        "id": "mode",
        "isLoggable": true,
        "label": "Mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Cloud",
                "value": "cloud",
              },
              Object {
                "label": "On-premise",
                "value": "onpremise",
              },
            ],
          },
        ],
        "type": "radiogroup",
      },
      "name": Object {
        "fieldId": "name",
      },
      "rdbms.port": Object {
        "fieldId": "rdbms.port",
      },
      "rdbms.ssl.ca": Object {
        "fieldId": "rdbms.ssl.ca",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.useSSL",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "rdbms.ssl.cert": Object {
        "fieldId": "rdbms.ssl.cert",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.useSSL",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "rdbms.ssl.key": Object {
        "fieldId": "rdbms.ssl.key",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.useSSL",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "rdbms.ssl.passphrase": Object {
        "fieldId": "rdbms.ssl.passphrase",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.useSSL",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "rdbms.useSSL": Object {
        "defaultValue": [Function],
        "id": "rdbms.useSSL",
        "label": "Use SSL",
        "type": "checkbox",
      },
      "rdbmsAdvanced": Object {
        "formId": "rdbmsAdvanced",
      },
      "rdbmsFields": Object {
        "formId": "rdbmsFields",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
                "mode",
                "_agentId",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbmsFields",
                "rdbms.port",
                "rdbms.useSSL",
                "rdbms.ssl.ca",
                "rdbms.ssl.key",
                "rdbms.ssl.cert",
                "rdbms.ssl.passphrase",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbmsAdvanced",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections rdbms type rdbms should load a snowflake connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_borrowConcurrencyFromConnectionId": Object {
        "fieldId": "_borrowConcurrencyFromConnectionId",
      },
      "application": Object {
        "fieldId": "application",
      },
      "name": Object {
        "fieldId": "name",
      },
      "rdbms.concurrencyLevel": Object {
        "fieldId": "rdbms.concurrencyLevel",
      },
      "rdbms.database": Object {
        "fieldId": "rdbms.database",
        "helpKey": "snowflake.connection.rdbms.database",
      },
      "rdbms.host": Object {
        "endAdornment": ".snowflakecomputing.com",
        "fieldId": "rdbms.host",
        "helpKey": "snowflake.connection.rdbms.host",
        "label": "Account name",
        "required": true,
        "startAdornment": "https://",
        "validWhen": Object {
          "matchesRegEx": Object {
            "message": "Account name should not contain spaces.",
            "pattern": "^[\\\\S]+$",
          },
        },
      },
      "rdbms.password": Object {
        "fieldId": "rdbms.password",
        "helpKey": "snowflake.connection.rdbms.password",
      },
      "rdbms.snowflake.role": Object {
        "id": "rdbms.snowflake.role",
        "label": "User Role",
        "type": "text",
      },
      "rdbms.snowflake.schema": Object {
        "id": "rdbms.snowflake.schema",
        "label": "Schema",
        "type": "text",
      },
      "rdbms.snowflake.warehouse": Object {
        "id": "rdbms.snowflake.warehouse",
        "label": "Warehouse name",
        "required": true,
        "type": "text",
      },
      "rdbms.user": Object {
        "fieldId": "rdbms.user",
        "helpKey": "snowflake.connection.rdbms.user",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.host",
                "rdbms.database",
                "rdbms.snowflake.warehouse",
                "rdbms.snowflake.schema",
                "rdbms.snowflake.role",
                "rdbms.user",
                "rdbms.password",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "_borrowConcurrencyFromConnectionId",
                "rdbms.concurrencyLevel",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections rdbms within rdbms schema should load a mssql connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_agentId": Object {
        "fieldId": "_agentId",
        "visibleWhen": Array [
          Object {
            "field": "mode",
            "is": Array [
              "onpremise",
            ],
          },
        ],
      },
      "application": Object {
        "fieldId": "application",
      },
      "mode": Object {
        "defaultValue": [Function],
        "id": "mode",
        "isLoggable": true,
        "label": "Mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Cloud",
                "value": "cloud",
              },
              Object {
                "label": "On-premise",
                "value": "onpremise",
              },
            ],
          },
        ],
        "type": "radiogroup",
      },
      "name": Object {
        "fieldId": "name",
      },
      "rdbms.instanceName": Object {
        "fieldId": "rdbms.instanceName",
      },
      "rdbms.port": Object {
        "fieldId": "rdbms.port",
      },
      "rdbms.version": Object {
        "fieldId": "rdbms.version",
        "helpKey": "mssql.connection.rdbms.version",
      },
      "rdbmsAdvanced": Object {
        "formId": "rdbmsAdvanced",
      },
      "rdbmsFields": Object {
        "formId": "rdbmsFields",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
                "mode",
                "_agentId",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.version",
                "rdbmsFields",
                "rdbms.instanceName",
                "rdbms.port",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbmsAdvanced",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections rdbms within rdbms schema should load a mysql connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_agentId": Object {
        "fieldId": "_agentId",
        "visibleWhen": Array [
          Object {
            "field": "mode",
            "is": Array [
              "onpremise",
            ],
          },
        ],
      },
      "application": Object {
        "fieldId": "application",
      },
      "mode": Object {
        "defaultValue": [Function],
        "id": "mode",
        "isLoggable": true,
        "label": "Mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Cloud",
                "value": "cloud",
              },
              Object {
                "label": "On-premise",
                "value": "onpremise",
              },
            ],
          },
        ],
        "type": "radiogroup",
      },
      "name": Object {
        "fieldId": "name",
      },
      "rdbms.disableStrictSSL": Object {
        "fieldId": "rdbms.disableStrictSSL",
      },
      "rdbms.port": Object {
        "fieldId": "rdbms.port",
      },
      "rdbms.ssl.ca": Object {
        "fieldId": "rdbms.ssl.ca",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.useSSL",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "rdbms.useSSL": Object {
        "defaultValue": [Function],
        "id": "rdbms.useSSL",
        "label": "Use SSL",
        "type": "checkbox",
      },
      "rdbmsAdvanced": Object {
        "formId": "rdbmsAdvanced",
      },
      "rdbmsFields": Object {
        "formId": "rdbmsFields",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
                "mode",
                "_agentId",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbmsFields",
                "rdbms.port",
                "rdbms.useSSL",
                "rdbms.ssl.ca",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.disableStrictSSL",
                "rdbmsAdvanced",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections rdbms within rdbms schema should load a oracle connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_agentId": Object {
        "fieldId": "_agentId",
        "required": true,
        "visibleWhen": Array [
          Object {
            "field": "mode",
            "is": Array [
              "onpremise",
            ],
          },
        ],
      },
      "_borrowConcurrencyFromConnectionId": Object {
        "fieldId": "_borrowConcurrencyFromConnectionId",
      },
      "application": Object {
        "fieldId": "application",
      },
      "mode": Object {
        "defaultDisabled": true,
        "defaultValue": "onpremise",
        "id": "mode",
        "isLoggable": true,
        "label": "Mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Cloud",
                "value": "cloud",
              },
              Object {
                "label": "On-premise",
                "value": "onpremise",
              },
            ],
          },
        ],
        "type": "radiogroup",
      },
      "name": Object {
        "fieldId": "name",
      },
      "rdbms.concurrencyLevel": Object {
        "fieldId": "rdbms.concurrencyLevel",
      },
      "rdbms.host": Object {
        "fieldId": "rdbms.host",
      },
      "rdbms.instanceName": Object {
        "fieldId": "rdbms.instanceName",
      },
      "rdbms.password": Object {
        "fieldId": "rdbms.password",
      },
      "rdbms.port": Object {
        "fieldId": "rdbms.port",
      },
      "rdbms.serverType": Object {
        "id": "rdbms.serverType",
        "label": "Server Type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Dedicated",
                "value": "dedicated",
              },
              Object {
                "label": "Shared",
                "value": "shared",
              },
              Object {
                "label": "Pooled",
                "value": "pooled",
              },
            ],
          },
        ],
        "type": "select",
      },
      "rdbms.serviceName": Object {
        "id": "rdbms.serviceName",
        "label": "Service Name",
        "type": "text",
      },
      "rdbms.user": Object {
        "fieldId": "rdbms.user",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
                "mode",
                "_agentId",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.host",
                "rdbms.user",
                "rdbms.password",
                "rdbms.instanceName",
                "rdbms.port",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.serviceName",
                "rdbms.serverType",
                "_borrowConcurrencyFromConnectionId",
                "rdbms.concurrencyLevel",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections rdbms within rdbms schema should load a postgresql connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_agentId": Object {
        "fieldId": "_agentId",
        "visibleWhen": Array [
          Object {
            "field": "mode",
            "is": Array [
              "onpremise",
            ],
          },
        ],
      },
      "application": Object {
        "fieldId": "application",
      },
      "mode": Object {
        "defaultValue": [Function],
        "id": "mode",
        "isLoggable": true,
        "label": "Mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Cloud",
                "value": "cloud",
              },
              Object {
                "label": "On-premise",
                "value": "onpremise",
              },
            ],
          },
        ],
        "type": "radiogroup",
      },
      "name": Object {
        "fieldId": "name",
      },
      "rdbms.port": Object {
        "fieldId": "rdbms.port",
      },
      "rdbms.ssl.ca": Object {
        "fieldId": "rdbms.ssl.ca",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.useSSL",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "rdbms.ssl.cert": Object {
        "fieldId": "rdbms.ssl.cert",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.useSSL",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "rdbms.ssl.key": Object {
        "fieldId": "rdbms.ssl.key",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.useSSL",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "rdbms.ssl.passphrase": Object {
        "fieldId": "rdbms.ssl.passphrase",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.useSSL",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "rdbms.useSSL": Object {
        "defaultValue": [Function],
        "id": "rdbms.useSSL",
        "label": "Use SSL",
        "type": "checkbox",
      },
      "rdbmsAdvanced": Object {
        "formId": "rdbmsAdvanced",
      },
      "rdbmsFields": Object {
        "formId": "rdbmsFields",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
                "mode",
                "_agentId",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbmsFields",
                "rdbms.port",
                "rdbms.useSSL",
                "rdbms.ssl.ca",
                "rdbms.ssl.key",
                "rdbms.ssl.cert",
                "rdbms.ssl.passphrase",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbmsAdvanced",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections rdbms within rdbms schema should load a snowflake connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_borrowConcurrencyFromConnectionId": Object {
        "fieldId": "_borrowConcurrencyFromConnectionId",
      },
      "application": Object {
        "fieldId": "application",
      },
      "name": Object {
        "fieldId": "name",
      },
      "rdbms.concurrencyLevel": Object {
        "fieldId": "rdbms.concurrencyLevel",
      },
      "rdbms.database": Object {
        "fieldId": "rdbms.database",
        "helpKey": "snowflake.connection.rdbms.database",
      },
      "rdbms.host": Object {
        "endAdornment": ".snowflakecomputing.com",
        "fieldId": "rdbms.host",
        "helpKey": "snowflake.connection.rdbms.host",
        "label": "Account name",
        "required": true,
        "startAdornment": "https://",
        "validWhen": Object {
          "matchesRegEx": Object {
            "message": "Account name should not contain spaces.",
            "pattern": "^[\\\\S]+$",
          },
        },
      },
      "rdbms.password": Object {
        "fieldId": "rdbms.password",
        "helpKey": "snowflake.connection.rdbms.password",
      },
      "rdbms.snowflake.role": Object {
        "id": "rdbms.snowflake.role",
        "label": "User Role",
        "type": "text",
      },
      "rdbms.snowflake.schema": Object {
        "id": "rdbms.snowflake.schema",
        "label": "Schema",
        "type": "text",
      },
      "rdbms.snowflake.warehouse": Object {
        "id": "rdbms.snowflake.warehouse",
        "label": "Warehouse name",
        "required": true,
        "type": "text",
      },
      "rdbms.user": Object {
        "fieldId": "rdbms.user",
        "helpKey": "snowflake.connection.rdbms.user",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "name",
                "application",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.host",
                "rdbms.database",
                "rdbms.snowflake.warehouse",
                "rdbms.snowflake.schema",
                "rdbms.snowflake.role",
                "rdbms.user",
                "rdbms.password",
              ],
              "label": "Application details",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "_borrowConcurrencyFromConnectionId",
                "rdbms.concurrencyLevel",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form connections should load a new connection form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "application": Object {
        "defaultValue": "",
        "helpKey": "application",
        "id": "application",
        "isLoggable": true,
        "label": "Application",
        "name": "application",
        "placeholder": "Choose application or start typing to browse 50+ applications",
        "required": true,
        "type": "selectapplication",
        "validWhen": Object {
          "isNot": Object {
            "message": "Please select an application",
            "values": Array [
              "",
            ],
          },
        },
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "fields": Array [
            "application",
          ],
        },
      ],
      "type": "box",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a as2 export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": Array [
      Object {
        "id": "saveandclosegroup",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "isNot": Array [
              "filedefinition",
              "fixed",
              "delimited/edifact",
            ],
          },
        ],
      },
      Object {
        "id": "savefiledefinitions",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "filedefinition",
              "fixed",
              "delimited/edifact",
            ],
          },
        ],
      },
    ],
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "apiIdentifier": Object {
        "fieldId": "apiIdentifier",
      },
      "common": Object {
        "formId": "common",
      },
      "dataURITemplate": Object {
        "fieldId": "dataURITemplate",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "edifact.format": Object {
        "fieldId": "edifact.format",
      },
      "edix12.format": Object {
        "fieldId": "edix12.format",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "file.backupPath": Object {
        "fieldId": "file.backupPath",
      },
      "file.batchSize": Object {
        "fieldId": "file.batchSize",
      },
      "file.compressionFormat": Object {
        "fieldId": "file.compressionFormat",
        "visibleWhen": Array [
          Object {
            "field": "file.decompressFiles",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "file.csv": Object {
        "fieldId": "file.csv",
        "uploadSampleDataFieldName": "uploadFile",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "file.type",
            "is": Array [
              "csv",
            ],
          },
        ],
      },
      "file.decompressFiles": Object {
        "defaultValue": [Function],
        "id": "file.decompressFiles",
        "label": "Decompress files",
        "type": "checkbox",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "file.encoding": Object {
        "fieldId": "file.encoding",
      },
      "file.fileDefinition.resourcePath": Object {
        "fieldId": "file.fileDefinition.resourcePath",
      },
      "file.fileNameEndsWith": Object {
        "fieldId": "file.fileNameEndsWith",
      },
      "file.fileNameStartsWith": Object {
        "fieldId": "file.fileNameStartsWith",
      },
      "file.filedefinition.rules": Object {
        "fieldId": "file.filedefinition.rules",
        "refreshOptionsOnChangesTo": Array [
          "edix12.format",
          "fixed.format",
          "edifact.format",
          "file.fileDefinition.resourcePath",
          "file.type",
        ],
        "required": true,
      },
      "file.groupByFields": Object {
        "fieldId": "file.groupByFields",
      },
      "file.json.resourcePath": Object {
        "fieldId": "file.json.resourcePath",
      },
      "file.skipDelete": Object {
        "fieldId": "file.skipDelete",
      },
      "file.sortByFields": Object {
        "fieldId": "file.sortByFields",
      },
      "file.type": Object {
        "fieldId": "file.type",
      },
      "file.xlsx.hasHeaderRow": Object {
        "fieldId": "file.xlsx.hasHeaderRow",
      },
      "file.xlsx.keyColumns": Object {
        "fieldId": "file.xlsx.keyColumns",
      },
      "file.xlsx.rowsPerRecord": Object {
        "disabledWhenAll": [Function],
        "fieldId": "file.xlsx.rowsPerRecord",
      },
      "fileAdvanced": Object {
        "formId": "fileAdvanced",
      },
      "fileMetadata": Object {
        "defaultValue": [Function],
        "id": "fileMetadata",
        "label": "File metadata only",
        "type": "checkbox",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "fixed.format": Object {
        "fieldId": "fixed.format",
      },
      "ftp.directoryPath": Object {
        "fieldId": "ftp.directoryPath",
      },
      "ftp.fileNameEndsWith": Object {
        "fieldId": "ftp.fileNameEndsWith",
      },
      "ftp.fileNameStartsWith": Object {
        "fieldId": "ftp.fileNameStartsWith",
      },
      "http.fileRelativeURI": Object {
        "defaultValue": [Function],
        "fieldId": "http.fileRelativeURI",
        "helpKey": [Function],
        "label": [Function],
        "required": true,
        "type": "uri",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "outputMode": Object {
        "defaultDisabled": [Function],
        "defaultValue": [Function],
        "helpKey": "export.outputMode",
        "id": "outputMode",
        "label": "Parse files being transferred",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Yes",
                "value": "records",
              },
              Object {
                "label": "No",
                "value": "blob",
              },
            ],
          },
        ],
        "type": "mode",
      },
      "pageSize": Object {
        "fieldId": "pageSize",
        "validWhen": Object {
          "matchesRegEx": Object {
            "message": "Only numbers allowed",
            "pattern": "^[\\\\d]+$",
          },
        },
      },
      "parsers": Object {
        "fieldId": "parsers",
        "uploadSampleDataFieldName": "uploadFile",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "file.type",
            "is": Array [
              "xml",
            ],
          },
        ],
      },
      "s3.bucket": Object {
        "fieldId": "s3.bucket",
      },
      "s3.keyEndsWith": Object {
        "fieldId": "s3.keyEndsWith",
      },
      "s3.keyStartsWith": Object {
        "fieldId": "s3.keyStartsWith",
      },
      "s3.region": Object {
        "fieldId": "s3.region",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "skipRetries": Object {
        "fieldId": "skipRetries",
      },
      "traceKeyTemplate": Object {
        "fieldId": "traceKeyTemplate",
      },
      "uploadFile": Object {
        "fieldId": "uploadFile",
        "placeholder": "Sample file (that would be parsed)",
        "refreshOptionsOnChangesTo": "file.type",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "exportOneToMany",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "fields": Array [
                    "parsers",
                    "file.csv",
                  ],
                },
              ],
              "fields": Array [
                "file.type",
                "uploadFile",
                "file.json.resourcePath",
                "file.xlsx.hasHeaderRow",
                "file.xlsx.rowsPerRecord",
                "file.xlsx.keyColumns",
                "edix12.format",
                "fixed.format",
                "edifact.format",
                "file.filedefinition.rules",
              ],
              "label": "How would you like to parse files?",
              "type": "indent",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "file.sortByFields",
                "file.groupByFields",
              ],
              "label": "How would you like to group and sort records?",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a delta export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "delta.dateField": Object {
        "fieldId": "delta.dateField",
      },
      "delta.dateFormat": Object {
        "fieldId": "delta.dateFormat",
      },
      "delta.endDateField": Object {
        "fieldId": "delta.endDateField",
      },
      "delta.lagOffset": Object {
        "fieldId": "delta.lagOffset",
      },
      "delta.startDate": Object {
        "fieldId": "delta.startDate",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "fields": Array [
        "delta.dateField",
        "delta.dateFormat",
        "delta.startDate",
        "delta.lagOffset",
        "delta.endDateField",
        "settings",
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a distributed export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "distributed.bearerToken": Object {
        "fieldId": "distributed.bearerToken",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "fields": Array [
        "distributed.bearerToken",
        "settings",
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a dynamo export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "delta.dateField": Object {
        "fieldId": "delta.dateField",
      },
      "dynamodb.expressionAttributeNames": Object {
        "fieldId": "dynamodb.expressionAttributeNames",
      },
      "dynamodb.expressionAttributeValues": Object {
        "fieldId": "dynamodb.expressionAttributeValues",
      },
      "dynamodb.filterExpression": Object {
        "fieldId": "dynamodb.filterExpression",
      },
      "dynamodb.keyConditionExpression": Object {
        "fieldId": "dynamodb.keyConditionExpression",
      },
      "dynamodb.method": Object {
        "fieldId": "dynamodb.method",
      },
      "dynamodb.onceExportPartitionKey": Object {
        "fieldId": "dynamodb.onceExportPartitionKey",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "dynamodb.onceExportSortKey": Object {
        "fieldId": "dynamodb.onceExportSortKey",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "dynamodb.projectionExpression": Object {
        "fieldId": "dynamodb.projectionExpression",
      },
      "dynamodb.region": Object {
        "fieldId": "dynamodb.region",
      },
      "dynamodb.tableName": Object {
        "fieldId": "dynamodb.tableName",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "once.booleanField": Object {
        "fieldId": "once.booleanField",
        "label": "Once boolean field",
        "type": "text",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "rdbmsGrouping": Object {
        "formId": "rdbmsGrouping",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "test.limit": Object {
        "fieldId": "test.limit",
      },
      "type": Object {
        "defaultValue": [Function],
        "id": "type",
        "isLoggable": true,
        "label": "Export type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "All – always export all data",
                "value": "all",
              },
              Object {
                "label": "Delta – export only modified data",
                "value": "delta",
              },
              Object {
                "label": "Once – export records only once",
                "value": "once",
              },
              Object {
                "label": "Limit – export a set number of records",
                "value": "test",
              },
            ],
          },
        ],
        "required": true,
        "skipSort": true,
        "type": "select",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "dynamodb.region",
                "dynamodb.method",
                "dynamodb.tableName",
                "dynamodb.expressionAttributeNames",
                "dynamodb.expressionAttributeValues",
                "dynamodb.keyConditionExpression",
                "dynamodb.filterExpression",
                "dynamodb.projectionExpression",
              ],
              "label": "What would you like to export?",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "type",
                "test.limit",
                "delta.dateField",
                "once.booleanField",
                "dynamodb.onceExportPartitionKey",
                "dynamodb.onceExportSortKey",
              ],
              "label": "Configure export type",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbmsGrouping",
              ],
              "label": "Would you like to group records?",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a ftp export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": Array [
      Object {
        "id": "saveandclosegroup",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "isNot": Array [
              "filedefinition",
              "fixed",
              "delimited/edifact",
            ],
          },
        ],
      },
      Object {
        "id": "savefiledefinitions",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "filedefinition",
              "fixed",
              "delimited/edifact",
            ],
          },
        ],
      },
    ],
    "fieldMap": Object {
      "apiIdentifier": Object {
        "fieldId": "apiIdentifier",
      },
      "common": Object {
        "formId": "common",
      },
      "dataURITemplate": Object {
        "fieldId": "dataURITemplate",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "edifact.format": Object {
        "fieldId": "edifact.format",
      },
      "edix12.format": Object {
        "fieldId": "edix12.format",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "file.backupPath": Object {
        "fieldId": "file.backupPath",
      },
      "file.batchSize": Object {
        "fieldId": "file.batchSize",
      },
      "file.compressionFormat": Object {
        "fieldId": "file.compressionFormat",
        "visibleWhen": Array [
          Object {
            "field": "file.decompressFiles",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "file.csv": Object {
        "fieldId": "file.csv",
        "uploadSampleDataFieldName": "uploadFile",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "file.type",
            "is": Array [
              "csv",
            ],
          },
        ],
      },
      "file.decompressFiles": Object {
        "defaultValue": [Function],
        "id": "file.decompressFiles",
        "label": "Decompress files",
        "type": "checkbox",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "file.encoding": Object {
        "fieldId": "file.encoding",
      },
      "file.fileDefinition.resourcePath": Object {
        "fieldId": "file.fileDefinition.resourcePath",
      },
      "file.fileNameEndsWith": Object {
        "fieldId": "file.fileNameEndsWith",
      },
      "file.fileNameStartsWith": Object {
        "fieldId": "file.fileNameStartsWith",
      },
      "file.filedefinition.rules": Object {
        "fieldId": "file.filedefinition.rules",
        "refreshOptionsOnChangesTo": Array [
          "edix12.format",
          "fixed.format",
          "edifact.format",
          "file.fileDefinition.resourcePath",
          "file.type",
        ],
        "required": true,
      },
      "file.groupByFields": Object {
        "fieldId": "file.groupByFields",
      },
      "file.json.resourcePath": Object {
        "fieldId": "file.json.resourcePath",
      },
      "file.skipDelete": Object {
        "fieldId": "file.skipDelete",
      },
      "file.sortByFields": Object {
        "fieldId": "file.sortByFields",
      },
      "file.type": Object {
        "fieldId": "file.type",
      },
      "file.xlsx.hasHeaderRow": Object {
        "fieldId": "file.xlsx.hasHeaderRow",
      },
      "file.xlsx.keyColumns": Object {
        "fieldId": "file.xlsx.keyColumns",
      },
      "file.xlsx.rowsPerRecord": Object {
        "disabledWhenAll": [Function],
        "fieldId": "file.xlsx.rowsPerRecord",
      },
      "fileAdvanced": Object {
        "formId": "fileAdvanced",
      },
      "fileMetadata": Object {
        "defaultValue": [Function],
        "id": "fileMetadata",
        "label": "File metadata only",
        "type": "checkbox",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "fixed.format": Object {
        "fieldId": "fixed.format",
      },
      "ftp.directoryPath": Object {
        "fieldId": "ftp.directoryPath",
      },
      "ftp.fileNameEndsWith": Object {
        "fieldId": "ftp.fileNameEndsWith",
      },
      "ftp.fileNameStartsWith": Object {
        "fieldId": "ftp.fileNameStartsWith",
      },
      "http.fileRelativeURI": Object {
        "defaultValue": [Function],
        "fieldId": "http.fileRelativeURI",
        "helpKey": [Function],
        "label": [Function],
        "required": true,
        "type": "uri",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "outputMode": Object {
        "defaultDisabled": [Function],
        "defaultValue": [Function],
        "helpKey": "export.outputMode",
        "id": "outputMode",
        "label": "Parse files being transferred",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Yes",
                "value": "records",
              },
              Object {
                "label": "No",
                "value": "blob",
              },
            ],
          },
        ],
        "type": "mode",
      },
      "pageSize": Object {
        "fieldId": "pageSize",
        "validWhen": Object {
          "matchesRegEx": Object {
            "message": "Only numbers allowed",
            "pattern": "^[\\\\d]+$",
          },
        },
      },
      "parsers": Object {
        "fieldId": "parsers",
        "uploadSampleDataFieldName": "uploadFile",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "file.type",
            "is": Array [
              "xml",
            ],
          },
        ],
      },
      "s3.bucket": Object {
        "fieldId": "s3.bucket",
      },
      "s3.keyEndsWith": Object {
        "fieldId": "s3.keyEndsWith",
      },
      "s3.keyStartsWith": Object {
        "fieldId": "s3.keyStartsWith",
      },
      "s3.region": Object {
        "fieldId": "s3.region",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "skipRetries": Object {
        "fieldId": "skipRetries",
      },
      "traceKeyTemplate": Object {
        "fieldId": "traceKeyTemplate",
      },
      "uploadFile": Object {
        "fieldId": "uploadFile",
        "placeholder": "Sample file (that would be parsed)",
        "refreshOptionsOnChangesTo": "file.type",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "outputMode",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "fields": Array [
                    "parsers",
                    "file.csv",
                  ],
                },
              ],
              "fields": Array [
                "file.type",
                "uploadFile",
                "file.json.resourcePath",
                "file.xlsx.hasHeaderRow",
                "file.xlsx.rowsPerRecord",
                "file.xlsx.keyColumns",
                "edix12.format",
                "fixed.format",
                "edifact.format",
                "file.filedefinition.rules",
              ],
              "label": "How would you like to parse files?",
              "type": "indent",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "ftp.directoryPath",
                "ftp.fileNameStartsWith",
                "ftp.fileNameEndsWith",
              ],
              "label": "Where would you like to transfer from?",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "file.sortByFields",
                "file.groupByFields",
              ],
              "label": "How would you like to group and sort records?",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "fileAdvanced",
                "file.decompressFiles",
                "file.compressionFormat",
                "file.skipDelete",
                "fileMetadata",
                "file.backupPath",
                "file.encoding",
                "pageSize",
                "dataURITemplate",
                "skipRetries",
                "traceKeyTemplate",
                "apiIdentifier",
                "file.batchSize",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a http export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "configureAsyncHelper": Object {
        "defaultValue": [Function],
        "fieldId": "configureAsyncHelper",
        "visible": [Function],
        "visibleWhen": [Function],
      },
      "delta.dateFormat": Object {
        "fieldId": "delta.dateFormat",
      },
      "delta.lagOffset": Object {
        "fieldId": "delta.lagOffset",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "file.csv": Object {
        "defaultValue": [Function],
        "helpKey": "file.csvParse",
        "id": "file.csv",
        "ignoreSortAndGroup": true,
        "label": "CSV parser helper",
        "type": "csvparse",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "http.successMediaType",
            "is": Array [
              "csv",
            ],
          },
        ],
      },
      "formView": Object {
        "fieldId": "formView",
      },
      "groupByFields": Object {
        "defaultValue": [Function],
        "fieldId": "groupByFields",
        "resourceSubType": "http",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http._asyncHelperId": Object {
        "fieldId": "http._asyncHelperId",
      },
      "http.blobMethod": Object {
        "fieldId": "http.blobMethod",
      },
      "http.body": Object {
        "fieldId": "http.body",
      },
      "http.errorMediaType": Object {
        "fieldId": "http.errorMediaType",
      },
      "http.headers": Object {
        "fieldId": "http.headers",
      },
      "http.method": Object {
        "fieldId": "http.method",
      },
      "http.once.body": Object {
        "fieldId": "http.once.body",
      },
      "http.once.method": Object {
        "fieldId": "http.once.method",
      },
      "http.once.relativeURI": Object {
        "fieldId": "http.once.relativeURI",
      },
      "http.paging.body": Object {
        "fieldId": "http.paging.body",
      },
      "http.paging.lastPagePath": Object {
        "fieldId": "http.paging.lastPagePath",
      },
      "http.paging.lastPageStatusCode": Object {
        "fieldId": "http.paging.lastPageStatusCode",
      },
      "http.paging.lastPageValues": Object {
        "fieldId": "http.paging.lastPageValues",
      },
      "http.paging.linkHeaderRelation": Object {
        "fieldId": "http.paging.linkHeaderRelation",
      },
      "http.paging.maxCountPath": Object {
        "fieldId": "http.paging.maxCountPath",
      },
      "http.paging.maxPagePath": Object {
        "fieldId": "http.paging.maxPagePath",
      },
      "http.paging.method": Object {
        "fieldId": "http.paging.method",
      },
      "http.paging.page": Object {
        "fieldId": "http.paging.page",
      },
      "http.paging.pathAfterFirstRequest": Object {
        "fieldId": "http.paging.pathAfterFirstRequest",
      },
      "http.paging.relativeURI": Object {
        "fieldId": "http.paging.relativeURI",
      },
      "http.paging.resourcePath": Object {
        "fieldId": "http.paging.resourcePath",
      },
      "http.paging.skip": Object {
        "fieldId": "http.paging.skip",
      },
      "http.paging.token": Object {
        "fieldId": "http.paging.token",
      },
      "http.paging.tokenPath": Object {
        "fieldId": "http.paging.tokenPath",
      },
      "http.paging.urlPath": Object {
        "fieldId": "http.paging.urlPath",
      },
      "http.relativeURI": Object {
        "fieldId": "http.relativeURI",
      },
      "http.requestMediaType": Object {
        "fieldId": "http.requestMediaType",
      },
      "http.response.blobFormat": Object {
        "fieldId": "http.response.blobFormat",
      },
      "http.response.errorPath": Object {
        "fieldId": "http.response.errorPath",
      },
      "http.response.failPath": Object {
        "fieldId": "http.response.failPath",
      },
      "http.response.failValues": Object {
        "fieldId": "http.response.failValues",
      },
      "http.response.resourcePath": Object {
        "fieldId": "http.response.resourcePath",
      },
      "http.response.successPath": Object {
        "fieldId": "http.response.successPath",
      },
      "http.response.successValues": Object {
        "fieldId": "http.response.successValues",
      },
      "http.successMediaType": Object {
        "fieldId": "http.successMediaType",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "once.booleanField": Object {
        "connectionId": [Function],
        "id": "once.booleanField",
        "isLoggable": true,
        "label": "Boolean field to mark records as exported",
        "type": "textwithconnectioncontext",
        "visibleWhenAll": Array [
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "outputMode": Object {
        "defaultValue": [Function],
        "id": "outputMode",
        "label": "Output mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "required": true,
        "type": "mode",
        "visible": false,
      },
      "parsers": Object {
        "fieldId": "parsers",
        "required": false,
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "semiassistantoperationselect": Object {
        "fieldId": "semiassistantoperationselect",
        "visibleWhenAll": Array [
          Object {
            "field": "formView",
            "isNot": Array [
              "true",
            ],
          },
        ],
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "test.limit": Object {
        "fieldId": "test.limit",
      },
      "type": Object {
        "defaultValue": [Function],
        "id": "type",
        "isLoggable": true,
        "label": "Export type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "All – always export all data",
                "value": "all",
              },
              Object {
                "description": "Add {{lastExportDateTime}} to either the relative URI or HTTP request body to complete the setup.",
                "fieldsToValidate": Array [
                  "http.relativeURI",
                  "http.body",
                ],
                "helpKey": "export.delta",
                "label": "Delta – export only modified data",
                "regex": /\\.\\*\\{\\{\\.\\*lastExportDateTime\\.\\*\\}\\}/,
                "value": "delta",
              },
              Object {
                "label": "Once – export records only once",
                "value": "once",
              },
              Object {
                "label": "Limit – export a set number of records",
                "value": "test",
              },
            ],
          },
        ],
        "required": true,
        "skipSort": true,
        "type": "selectwithvalidations",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "unencrypted.apiType": Object {
        "fieldId": "unencrypted.apiType",
      },
      "unencrypted.restrictedReportType": Object {
        "fieldId": "unencrypted.restrictedReportType",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "outputMode",
                "exportOneToMany",
                "formView",
                "semiassistantoperationselect",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "unencrypted.apiType",
                "http.method",
                "http.blobMethod",
                "http.relativeURI",
                "unencrypted.restrictedReportType",
                "http.headers",
                "http.requestMediaType",
                "http.body",
                "http.response.blobFormat",
              ],
              "label": [Function],
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "type",
                "test.limit",
                "delta.dateFormat",
                "delta.lagOffset",
                "once.booleanField",
                "http.once.method",
                "http.once.relativeURI",
                "http.once.body",
              ],
              "label": "Configure export type",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "http.paging.method",
                "http.paging.skip",
                "http.paging.page",
                "http.paging.urlPath",
                "http.paging.tokenPath",
                "http.paging.token",
                "http.paging.relativeURI",
                "http.paging.linkHeaderRelation",
                "http.paging.pathAfterFirstRequest",
                "http.paging.body",
                "http.paging.resourcePath",
                "http.paging.maxPagePath",
                "http.paging.maxCountPath",
                "http.paging.lastPageStatusCode",
                "http.paging.lastPagePath",
                "http.paging.lastPageValues",
              ],
              "label": "Does this API use paging?",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "fields": Array [
                    "http.response.resourcePath",
                    "http.response.failPath",
                    "http.response.failValues",
                    "http.response.successPath",
                    "http.response.successValues",
                    "http.response.errorPath",
                    "http.successMediaType",
                  ],
                },
                Object {
                  "containers": Array [
                    Object {
                      "fields": Array [
                        "parsers",
                        "file.csv",
                      ],
                      "header": [Function],
                      "helpKey": "http.parseSuccessResponses",
                    },
                  ],
                  "type": "indent",
                },
                Object {
                  "fields": Array [
                    "http.errorMediaType",
                  ],
                },
              ],
              "label": "Non-standard API response patterns",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "groupByFields",
              ],
              "label": "Would you like to group records?",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "configureAsyncHelper",
                "http._asyncHelperId",
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a mongo export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "delta.dateField": Object {
        "fieldId": "delta.dateField",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "mongodb.collection": Object {
        "fieldId": "mongodb.collection",
      },
      "mongodb.filter": Object {
        "fieldId": "mongodb.filter",
      },
      "mongodb.projection": Object {
        "fieldId": "mongodb.projection",
      },
      "once.booleanField": Object {
        "fieldId": "once.booleanField",
      },
      "rdbmsGrouping": Object {
        "formId": "rdbmsGrouping",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "test.limit": Object {
        "fieldId": "test.limit",
      },
      "type": Object {
        "defaultValue": [Function],
        "id": "type",
        "isLoggable": true,
        "label": "Export type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "All – always export all data",
                "value": "all",
              },
              Object {
                "label": "Delta – export only modified data",
                "value": "delta",
              },
              Object {
                "label": "Once – export records only once",
                "value": "once",
              },
              Object {
                "label": "Limit – export a set number of records",
                "value": "test",
              },
            ],
          },
        ],
        "required": true,
        "skipSort": true,
        "type": "select",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "exportOneToMany",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "mongodb.collection",
                "mongodb.filter",
                "mongodb.projection",
              ],
              "label": "What would you like to export?",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "type",
                "test.limit",
                "delta.dateField",
                "once.booleanField",
              ],
              "label": "Configure export type",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbmsGrouping",
              ],
              "label": "Would you like to group records?",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a netsuite export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "blob": Object {
        "formId": "blob",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "common": Object {
        "formId": "common",
      },
      "delta.dateField": Object {
        "connectionId": [Function],
        "filterKey": "webservices-dateField",
        "id": "delta.dateField",
        "label": "Date field",
        "placeholder": "Please select a date field",
        "refreshOptionsOnChangesTo": Array [
          "netsuite.webservices.recordType",
        ],
        "required": true,
        "type": "refreshableselect",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.webservices.recordType",
            "isNot": Array [
              "",
            ],
          },
          Object {
            "field": "type",
            "is": Array [
              "delta",
            ],
          },
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "search",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "delta.lagOffset": Object {
        "fieldId": "delta.lagOffset",
        "visibleWhenAll": Array [
          Object {
            "field": "type",
            "is": Array [
              "delta",
            ],
          },
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "search",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "distributed": Object {
        "formId": "distributed",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "distributed",
            ],
          },
        ],
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "netsuite.api.type": Object {
        "defaultDisabled": [Function],
        "defaultValue": [Function],
        "id": "netsuite.api.type",
        "label": "NetSuite API type",
        "name": "apiType",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "RESTlet (Recommended)",
                "value": "restlet",
              },
              Object {
                "label": "Web Services",
                "value": "search",
              },
            ],
          },
        ],
        "type": "radiogroup",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "netsuite.blob.purgeFileAfterExport": Object {
        "fieldId": "netsuite.blob.purgeFileAfterExport",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "netsuite.distributed.forceReload": Object {
        "fieldId": "netsuite.distributed.forceReload",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "distributed",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "netsuite.distributed.frameworkVersion": Object {
        "connectionId": [Function],
        "defaultDisabled": [Function],
        "defaultValue": [Function],
        "fieldId": "netsuite.distributed.frameworkVersion",
        "isNew": [Function],
        "label": "NetSuite API version",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "SuiteApp SuiteScript 2.x (Recommended)",
                "value": "suiteapp2.0",
              },
              Object {
                "label": "SuiteApp SuiteScript 1.0",
                "value": "suiteapp1.0",
              },
              Object {
                "description": "To be deprecated",
                "isWarningMessage": true,
                "label": "SuiteBundle SuiteScript 1.0",
                "value": "suitebundle",
              },
            ],
          },
        ],
        "resourceId": [Function],
        "resourceType": "exports",
        "type": "netsuiteapiversion",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "distributed",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "netsuite.distributed.skipExportFieldId": Object {
        "connectionId": [Function],
        "fieldId": "netsuite.distributed.skipExportFieldId",
        "filterKey": "suitescript-booleanField",
        "refreshOptionsOnChangesTo": Array [
          "netsuite.distributed.recordType",
        ],
        "type": "refreshableselect",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "distributed",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "netsuite.execution.type": Object {
        "defaultValue": [Function],
        "id": "netsuite.execution.type",
        "label": "Execution type",
        "name": "executionType",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Real-time",
                "value": "distributed",
              },
              Object {
                "label": "Scheduled",
                "value": "scheduled",
              },
            ],
          },
        ],
        "required": true,
        "type": "radiogroup",
        "visible": false,
      },
      "netsuite.restlet.batchSize": Object {
        "fieldId": "netsuite.restlet.batchSize",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "restlet",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "netsuite.restlet.criteria": Object {
        "disabledWhen": Array [
          Object {
            "field": "netsuite.restlet.recordType",
            "is": Array [
              "",
            ],
          },
        ],
        "fieldId": "netsuite.restlet.criteria",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "restlet",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "netsuite.restlet.markExportedBatchSize": Object {
        "defaultValue": [Function],
        "id": "netsuite.restlet.markExportedBatchSize",
        "label": "Mark exported batch size",
        "type": "text",
        "validWhen": Object {
          "fallsWithinNumericalRange": Object {
            "max": 100,
            "min": 1,
          },
        },
        "visibleWhen": Array [
          Object {
            "field": "restlet.type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "netsuite.restlet.restletVersion": Object {
        "connectionId": [Function],
        "defaultDisabled": [Function],
        "defaultValue": [Function],
        "fieldId": "netsuite.restlet.restletVersion",
        "isNew": [Function],
        "label": "NetSuite API version",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "SuiteApp SuiteScript 2.x (Recommended)",
                "value": "suiteapp2.0",
              },
              Object {
                "label": "SuiteApp SuiteScript 1.0",
                "value": "suiteapp1.0",
              },
              Object {
                "description": "To be deprecated",
                "isWarningMessage": true,
                "label": "SuiteBundle SuiteScript 1.0",
                "value": "suitebundle",
              },
            ],
          },
        ],
        "resourceId": [Function],
        "resourceType": "exports",
        "type": "netsuiteapiversion",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "restlet",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "netsuite.skipGrouping": Object {
        "fieldId": "netsuite.skipGrouping",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "search",
              "restlet",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
        ],
      },
      "netsuite.webservices.criteria": Object {
        "fieldId": "netsuite.webservices.criteria",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "search",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "once.booleanField": Object {
        "connectionId": [Function],
        "filterKey": "webservices-booleanField",
        "id": "once.booleanField",
        "isLoggable": true,
        "label": "Boolean field to mark records as exported",
        "placeholder": "Please select a boolean field",
        "refreshOptionsOnChangesTo": Array [
          "netsuite.webservices.recordType",
        ],
        "required": true,
        "type": "refreshableselect",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.webservices.recordType",
            "isNot": Array [
              "",
            ],
          },
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "search",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "outputMode": Object {
        "defaultValue": [Function],
        "id": "outputMode",
        "label": "Output mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "type": "mode",
        "visible": false,
      },
      "restlet": Object {
        "formId": "restlet",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "restlet",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
        ],
      },
      "restlet.delta.dateField": Object {
        "connectionId": [Function],
        "defaultValue": [Function],
        "filterKey": "suitescript-dateField",
        "helpKey": "export.delta.dateField",
        "id": "restlet.delta.dateField",
        "label": "Date fields to use in delta search",
        "multiselect": true,
        "placeholder": "Please select a date field",
        "refreshOptionsOnChangesTo": Array [
          "netsuite.restlet.recordType",
        ],
        "required": true,
        "type": "refreshableselect",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.restlet.recordType",
            "isNot": Array [
              "",
            ],
          },
          Object {
            "field": "restlet.type",
            "is": Array [
              "delta",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "restlet",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
        ],
      },
      "restlet.delta.lagOffset": Object {
        "defaultValue": [Function],
        "helpKey": "export.delta.lagOffset",
        "id": "restlet.delta.lagOffset",
        "label": "Delta date lag offset",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "restlet.type",
            "is": Array [
              "delta",
            ],
          },
          Object {
            "field": "netsuite.restlet.recordType",
            "isNot": Array [
              "",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "restlet",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
        ],
      },
      "restlet.once.booleanField": Object {
        "connectionId": [Function],
        "defaultValue": [Function],
        "filterKey": "suitescript-booleanField",
        "helpKey": "export.once.booleanField",
        "id": "restlet.once.booleanField",
        "isLoggable": true,
        "label": "Boolean field to mark records as exported",
        "placeholder": "Please select a boolean field",
        "refreshOptionsOnChangesTo": Array [
          "netsuite.restlet.recordType",
        ],
        "required": true,
        "type": "refreshableselect",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.restlet.recordType",
            "isNot": Array [
              "",
            ],
          },
          Object {
            "field": "restlet.type",
            "is": Array [
              "once",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "restlet",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
        ],
      },
      "restlet.type": Object {
        "connectionId": [Function],
        "defaultValue": [Function],
        "filterKey": "suitescript-recordTypes",
        "helpKey": "export.type",
        "id": "restlet.type",
        "isLoggable": true,
        "label": "Export type",
        "refreshOptionsOnChangesTo": Array [
          "netsuite.restlet.recordType",
        ],
        "required": true,
        "selectOptions": Array [
          Object {
            "label": "All – always export all data",
            "value": "all",
          },
          Object {
            "label": "Delta – export only modified data",
            "value": "delta",
          },
          Object {
            "label": "Once – export records only once",
            "value": "once",
          },
          Object {
            "label": "Limit – export a set number of records",
            "value": "test",
          },
        ],
        "skipSort": true,
        "type": "netsuiteexporttype",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "restlet",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
        ],
      },
      "search": Object {
        "formId": "search",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "search",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
        ],
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "test.limit": Object {
        "fieldId": "test.limit",
        "visibleWhen": Array [
          Object {
            "OR": Array [
              Object {
                "AND": Array [
                  Object {
                    "field": "netsuite.api.type",
                    "is": Array [
                      "search",
                    ],
                  },
                  Object {
                    "field": "type",
                    "is": Array [
                      "test",
                    ],
                  },
                ],
              },
              Object {
                "AND": Array [
                  Object {
                    "field": "restlet.type",
                    "is": Array [
                      "test",
                    ],
                  },
                  Object {
                    "field": "netsuite.api.type",
                    "is": Array [
                      "restlet",
                    ],
                  },
                ],
              },
            ],
          },
        ],
      },
      "type": Object {
        "defaultValue": [Function],
        "id": "type",
        "isLoggable": true,
        "label": "Export type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "All – always export all data",
                "value": "all",
              },
              Object {
                "label": "Delta – export only modified data",
                "value": "delta",
              },
              Object {
                "label": "Once – export records only once",
                "value": "once",
              },
              Object {
                "label": "Limit – export a set number of records",
                "value": "test",
              },
            ],
          },
        ],
        "required": true,
        "skipSort": true,
        "type": "select",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite.api.type",
            "is": Array [
              "search",
            ],
          },
          Object {
            "field": "netsuite.execution.type",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "outputMode",
                "exportOneToMany",
                "netsuite.execution.type",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "distributed",
                "restlet",
                "search",
                "netsuite.skipGrouping",
                "blob",
                "netsuite.restlet.criteria",
                "netsuite.webservices.criteria",
              ],
              "label": [Function],
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "type",
                "delta.dateField",
                "delta.lagOffset",
                "once.booleanField",
                "restlet.type",
                "test.limit",
                "restlet.delta.dateField",
                "restlet.delta.lagOffset",
                "restlet.once.booleanField",
              ],
              "label": "Configure export type",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "fields": Array [
                    "netsuite.api.type",
                  ],
                },
                Object {
                  "containers": Array [
                    Object {
                      "fields": Array [
                        "netsuite.restlet.restletVersion",
                      ],
                    },
                  ],
                  "type": "indent",
                },
                Object {
                  "fields": Array [
                    "netsuite.blob.purgeFileAfterExport",
                    "netsuite.distributed.frameworkVersion",
                    "netsuite.distributed.skipExportFieldId",
                    "netsuite.distributed.forceReload",
                    "netsuite.restlet.batchSize",
                    "advancedSettings",
                    "netsuite.restlet.markExportedBatchSize",
                  ],
                },
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a once export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "once.booleanField": Object {
        "fieldId": "once.booleanField",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "fields": Array [
        "once.booleanField",
        "settings",
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a s3 export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": Array [
      Object {
        "id": "saveandclosegroup",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "isNot": Array [
              "filedefinition",
              "fixed",
              "delimited/edifact",
            ],
          },
        ],
      },
      Object {
        "id": "savefiledefinitions",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "filedefinition",
              "fixed",
              "delimited/edifact",
            ],
          },
        ],
      },
    ],
    "fieldMap": Object {
      "apiIdentifier": Object {
        "fieldId": "apiIdentifier",
      },
      "common": Object {
        "formId": "common",
      },
      "dataURITemplate": Object {
        "fieldId": "dataURITemplate",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "edifact.format": Object {
        "fieldId": "edifact.format",
      },
      "edix12.format": Object {
        "fieldId": "edix12.format",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "file.backupPath": Object {
        "fieldId": "file.backupPath",
      },
      "file.batchSize": Object {
        "fieldId": "file.batchSize",
      },
      "file.compressionFormat": Object {
        "fieldId": "file.compressionFormat",
        "visibleWhen": Array [
          Object {
            "field": "file.decompressFiles",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "file.csv": Object {
        "fieldId": "file.csv",
        "uploadSampleDataFieldName": "uploadFile",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "file.type",
            "is": Array [
              "csv",
            ],
          },
        ],
      },
      "file.decompressFiles": Object {
        "defaultValue": [Function],
        "id": "file.decompressFiles",
        "label": "Decompress files",
        "type": "checkbox",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "file.encoding": Object {
        "fieldId": "file.encoding",
      },
      "file.fileDefinition.resourcePath": Object {
        "fieldId": "file.fileDefinition.resourcePath",
      },
      "file.fileNameEndsWith": Object {
        "fieldId": "file.fileNameEndsWith",
      },
      "file.fileNameStartsWith": Object {
        "fieldId": "file.fileNameStartsWith",
      },
      "file.filedefinition.rules": Object {
        "fieldId": "file.filedefinition.rules",
        "refreshOptionsOnChangesTo": Array [
          "edix12.format",
          "fixed.format",
          "edifact.format",
          "file.fileDefinition.resourcePath",
          "file.type",
        ],
        "required": true,
      },
      "file.groupByFields": Object {
        "fieldId": "file.groupByFields",
      },
      "file.json.resourcePath": Object {
        "fieldId": "file.json.resourcePath",
      },
      "file.skipDelete": Object {
        "fieldId": "file.skipDelete",
      },
      "file.sortByFields": Object {
        "fieldId": "file.sortByFields",
      },
      "file.type": Object {
        "fieldId": "file.type",
      },
      "file.xlsx.hasHeaderRow": Object {
        "fieldId": "file.xlsx.hasHeaderRow",
      },
      "file.xlsx.keyColumns": Object {
        "fieldId": "file.xlsx.keyColumns",
      },
      "file.xlsx.rowsPerRecord": Object {
        "disabledWhenAll": [Function],
        "fieldId": "file.xlsx.rowsPerRecord",
      },
      "fileAdvanced": Object {
        "formId": "fileAdvanced",
      },
      "fileMetadata": Object {
        "defaultValue": [Function],
        "id": "fileMetadata",
        "label": "File metadata only",
        "type": "checkbox",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "fixed.format": Object {
        "fieldId": "fixed.format",
      },
      "ftp.directoryPath": Object {
        "fieldId": "ftp.directoryPath",
      },
      "ftp.fileNameEndsWith": Object {
        "fieldId": "ftp.fileNameEndsWith",
      },
      "ftp.fileNameStartsWith": Object {
        "fieldId": "ftp.fileNameStartsWith",
      },
      "http.fileRelativeURI": Object {
        "defaultValue": [Function],
        "fieldId": "http.fileRelativeURI",
        "helpKey": [Function],
        "label": [Function],
        "required": true,
        "type": "uri",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "outputMode": Object {
        "defaultDisabled": [Function],
        "defaultValue": [Function],
        "helpKey": "export.outputMode",
        "id": "outputMode",
        "label": "Parse files being transferred",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Yes",
                "value": "records",
              },
              Object {
                "label": "No",
                "value": "blob",
              },
            ],
          },
        ],
        "type": "mode",
      },
      "pageSize": Object {
        "fieldId": "pageSize",
        "validWhen": Object {
          "matchesRegEx": Object {
            "message": "Only numbers allowed",
            "pattern": "^[\\\\d]+$",
          },
        },
      },
      "parsers": Object {
        "fieldId": "parsers",
        "uploadSampleDataFieldName": "uploadFile",
        "visibleWhenAll": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "file.type",
            "is": Array [
              "xml",
            ],
          },
        ],
      },
      "s3.bucket": Object {
        "fieldId": "s3.bucket",
      },
      "s3.keyEndsWith": Object {
        "fieldId": "s3.keyEndsWith",
      },
      "s3.keyStartsWith": Object {
        "fieldId": "s3.keyStartsWith",
      },
      "s3.region": Object {
        "fieldId": "s3.region",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "skipRetries": Object {
        "fieldId": "skipRetries",
      },
      "traceKeyTemplate": Object {
        "fieldId": "traceKeyTemplate",
      },
      "uploadFile": Object {
        "fieldId": "uploadFile",
        "placeholder": "Sample file (that would be parsed)",
        "refreshOptionsOnChangesTo": "file.type",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "outputMode",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "fields": Array [
                    "parsers",
                    "file.csv",
                  ],
                },
              ],
              "fields": Array [
                "file.type",
                "uploadFile",
                "file.json.resourcePath",
                "file.xlsx.hasHeaderRow",
                "file.xlsx.rowsPerRecord",
                "file.xlsx.keyColumns",
                "edix12.format",
                "fixed.format",
                "edifact.format",
                "file.filedefinition.rules",
              ],
              "label": "How would you like to parse files?",
              "type": "indent",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "s3.region",
                "s3.bucket",
                "s3.keyStartsWith",
                "s3.keyEndsWith",
              ],
              "label": "Where would you like to transfer from?",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "file.sortByFields",
                "file.groupByFields",
              ],
              "label": "How would you like to group and sort records?",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "fileAdvanced",
                "file.decompressFiles",
                "file.compressionFormat",
                "file.skipDelete",
                "fileMetadata",
                "file.backupPath",
                "file.encoding",
                "pageSize",
                "dataURITemplate",
                "skipRetries",
                "traceKeyTemplate",
                "apiIdentifier",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a salesforce export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "delta.dateField": Object {
        "connectionId": [Function],
        "defaultValue": [Function],
        "fieldName": "deltaExportDateFields",
        "filterKey": "salesforce-recordType",
        "id": "delta.dateField",
        "label": "Date fields to use in delta search",
        "multiselect": true,
        "placeholder": "Please select a date field",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.soql",
          "delta.dateField",
        ],
        "required": true,
        "type": "salesforcerefreshableselect",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "delta",
            ],
          },
        ],
      },
      "delta.lagOffset": Object {
        "fieldId": "delta.lagOffset",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "once.booleanField": Object {
        "connectionId": [Function],
        "fieldName": "onceExportBooleanFields",
        "filterKey": "salesforce-recordType",
        "helpKey": "export.once.booleanField",
        "id": "once.booleanField",
        "isLoggable": true,
        "label": "Boolean field to mark records as exported",
        "placeholder": "Please select a boolean field",
        "required": true,
        "type": "salesforcerefreshableselect",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "outputMode": Object {
        "defaultValue": [Function],
        "id": "outputMode",
        "label": "Output mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "required": true,
        "type": "mode",
        "visible": false,
      },
      "salesforce.distributed.batchSize": Object {
        "fieldId": "salesforce.distributed.batchSize",
      },
      "salesforce.distributed.qualifier": Object {
        "fieldId": "salesforce.distributed.qualifier",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
      },
      "salesforce.distributed.referencedFields": Object {
        "connectionId": [Function],
        "delimiter": ",",
        "disabledWhen": Array [
          Object {
            "field": "salesforce.sObjectType",
            "is": Array [
              "",
            ],
          },
        ],
        "fieldId": "salesforce.distributed.referencedFields",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
        "type": "salesforcereferencedfields",
      },
      "salesforce.distributed.relatedLists": Object {
        "connectionId": [Function],
        "disabledWhen": Array [
          Object {
            "field": "salesforce.sObjectType",
            "is": Array [
              "",
            ],
          },
        ],
        "fieldId": "salesforce.distributed.relatedLists",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
        "type": "salesforcerelatedlist",
      },
      "salesforce.distributed.requiredTrigger": Object {
        "defaultDisabled": true,
        "fieldId": "salesforce.distributed.requiredTrigger",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
        "type": "salesforcerequiredtrigger",
      },
      "salesforce.distributed.skipExportFieldId": Object {
        "fieldId": "salesforce.distributed.skipExportFieldId",
        "filterKey": "salesforce-recordType-boolean",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
        "type": "refreshableselect",
        "visibleWhenAll": Array [
          Object {
            "field": "salesforce.executionType",
            "is": Array [
              "realtime",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "salesforce.executionType": Object {
        "fieldId": "salesforce.executionType",
      },
      "salesforce.id": Object {
        "fieldId": "salesforce.id",
      },
      "salesforce.objectType": Object {
        "fieldId": "salesforce.objectType",
      },
      "salesforce.sObjectType": Object {
        "bundlePath": [Function],
        "bundleUrlHelp": "Please install our <a target=\\"_blank\\" href=\\"BUNDLE_URL\\">integrator distributed adapter package</a> in your Salesforce account to create realtime exports.",
        "commMetaPath": [Function],
        "connectionId": [Function],
        "fieldId": "salesforce.sObjectType",
        "type": "salesforcesobject",
      },
      "salesforce.soql": Object {
        "connectionId": [Function],
        "defaultValue": [Function],
        "filterKey": "salesforce-soqlQuery",
        "helpKey": "export.salesforce.soql.query",
        "id": "salesforce.soql",
        "label": "SOQL query",
        "multiline": true,
        "omitWhenHidden": true,
        "refreshOptionsOnChangesTo": Array [
          "delta.dateField",
          "once.booleanField",
        ],
        "required": true,
        "type": "soqlquery",
        "visibleWhenAll": Array [
          Object {
            "field": "salesforce.executionType",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "test.limit": Object {
        "fieldId": "test.limit",
      },
      "type": Object {
        "defaultValue": [Function],
        "id": "type",
        "isLoggable": true,
        "label": "Export type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "All – always export all data",
                "value": "all",
              },
              Object {
                "label": "Delta – export only modified data",
                "value": "delta",
              },
              Object {
                "label": "Once – export records only once",
                "value": "once",
              },
              Object {
                "label": "Limit – export a set number of records",
                "value": "test",
              },
            ],
          },
        ],
        "required": true,
        "skipSort": true,
        "type": "select",
        "visibleWhenAll": Array [
          Object {
            "field": "salesforce.executionType",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "outputMode",
                "exportOneToMany",
                "salesforce.executionType",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "salesforce.sObjectType",
                "salesforce.objectType",
                "salesforce.distributed.requiredTrigger",
                "salesforce.distributed.referencedFields",
                "salesforce.distributed.relatedLists",
                "salesforce.distributed.qualifier",
                "salesforce.soql",
                "salesforce.id",
              ],
              "label": [Function],
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "type",
                "test.limit",
                "delta.dateField",
                "delta.lagOffset",
                "once.booleanField",
              ],
              "label": "Configure export type",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "salesforce.distributed.batchSize",
                "salesforce.distributed.skipExportFieldId",
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a simple export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "common": Object {
        "formId": "common",
      },
      "dataURITemplate": Object {
        "fieldId": "dataURITemplate",
      },
      "file.csv": Object {
        "fieldId": "file.csv",
        "uploadSampleDataFieldName": "uploadFile",
        "visibleWhenAll": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "csv",
            ],
          },
        ],
      },
      "file.encoding": Object {
        "fieldId": "file.encoding",
      },
      "file.groupByFields": Object {
        "fieldId": "file.groupByFields",
      },
      "file.json.resourcePath": Object {
        "fieldId": "file.json.resourcePath",
      },
      "file.sortByFields": Object {
        "fieldId": "file.sortByFields",
      },
      "file.type": Object {
        "defaultValue": [Function],
        "id": "file.type",
        "label": "File type",
        "name": "/file/type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "CSV (or any delimited text file)",
                "value": "csv",
              },
              Object {
                "label": "JSON",
                "value": "json",
              },
              Object {
                "label": "XLSX",
                "value": "xlsx",
              },
              Object {
                "label": "XML",
                "value": "xml",
              },
            ],
          },
        ],
        "required": true,
        "type": "filetypeselect",
      },
      "file.xlsx.hasHeaderRow": Object {
        "fieldId": "file.xlsx.hasHeaderRow",
      },
      "file.xlsx.keyColumns": Object {
        "fieldId": "file.xlsx.keyColumns",
      },
      "file.xlsx.rowsPerRecord": Object {
        "fieldId": "file.xlsx.rowsPerRecord",
      },
      "fixed.format": Object {
        "fieldId": "fixed.format",
      },
      "outputMode": Object {
        "defaultValue": "records",
        "id": "outputMode",
        "label": "Parse files being transferred",
        "type": "text",
        "visible": false,
      },
      "pageSize": Object {
        "fieldId": "pageSize",
      },
      "parsers": Object {
        "fieldId": "parsers",
        "uploadSampleDataFieldName": "uploadFile",
        "visibleWhenAll": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "xml",
            ],
          },
        ],
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "traceKeyTemplate": Object {
        "fieldId": "traceKeyTemplate",
      },
      "uploadFile": Object {
        "helpKey": "export.uploadFile",
        "id": "uploadFile",
        "maxSize": 104857600,
        "mode": [Function],
        "name": "/uploadFile",
        "placeholder": "Sample file (that would be parsed)",
        "refreshOptionsOnChangesTo": "file.type",
        "required": [Function],
        "type": "uploadfile",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "isNot": Array [
              "",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": false,
              "fields": Array [
                "common",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "fields": Array [
                    "parsers",
                    "file.csv",
                    "file.json.resourcePath",
                    "file.xlsx.hasHeaderRow",
                    "file.xlsx.rowsPerRecord",
                    "file.xlsx.keyColumns",
                  ],
                },
              ],
              "fields": Array [
                "outputMode",
                "file.type",
                "uploadFile",
              ],
              "label": "How would you like to parse the file?",
              "type": "indent",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "file.sortByFields",
                "file.groupByFields",
              ],
              "label": "How would you like to group and sort records?",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "file.encoding",
                "pageSize",
                "dataURITemplate",
                "traceKeyTemplate",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a webhook export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "common": Object {
        "formId": "common",
      },
      "dataURITemplate": Object {
        "fieldId": "dataURITemplate",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "pageSize": Object {
        "fieldId": "pageSize",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "skipRetries": Object {
        "fieldId": "skipRetries",
      },
      "traceKeyTemplate": Object {
        "fieldId": "traceKeyTemplate",
      },
      "webhook._httpConnectorId": Object {
        "id": "webhook._httpConnectorId",
        "type": "text",
        "visible": false,
      },
      "webhook.algorithm": Object {
        "fieldId": "webhook.algorithm",
      },
      "webhook.encoding": Object {
        "fieldId": "webhook.encoding",
      },
      "webhook.generateToken": Object {
        "fieldId": "webhook.generateToken",
      },
      "webhook.header": Object {
        "fieldId": "webhook.header",
      },
      "webhook.key": Object {
        "fieldId": "webhook.key",
      },
      "webhook.password": Object {
        "fieldId": "webhook.password",
      },
      "webhook.path": Object {
        "fieldId": "webhook.path",
      },
      "webhook.sampledata": Object {
        "fieldId": "webhook.sampledata",
        "sampleData": [Function],
      },
      "webhook.slackKey": Object {
        "fieldId": "webhook.slackKey",
      },
      "webhook.successBody": Object {
        "fieldId": "webhook.successBody",
      },
      "webhook.successMediaType": Object {
        "fieldId": "webhook.successMediaType",
      },
      "webhook.successStatusCode": Object {
        "fieldId": "webhook.successStatusCode",
      },
      "webhook.token": Object {
        "fieldId": "webhook.token",
        "refreshOptionsOnChangesTo": Array [
          "webhook.provider",
        ],
      },
      "webhook.url": Object {
        "fieldId": "webhook.url",
        "refreshOptionsOnChangesTo": Array [
          "webhook.provider",
          "webhook.token",
        ],
      },
      "webhook.username": Object {
        "fieldId": "webhook.username",
      },
      "webhook.verify": Object {
        "fieldId": "webhook.verify",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "webhook.verify",
                "webhook.algorithm",
                "webhook.encoding",
                "webhook.key",
                "webhook.slackKey",
                "webhook.header",
                "webhook.token",
                "webhook.generateToken",
                "webhook.path",
                "webhook.username",
                "webhook.password",
                "webhook._httpConnectorId",
              ],
              "label": "Secure the listener",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "webhook.url",
                "webhook.sampledata",
              ],
              "label": "Generate URL & sample data",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "webhook.successStatusCode",
                "webhook.successMediaType",
                "webhook.successBody",
                "pageSize",
                "dataURITemplate",
                "skipRetries",
                "traceKeyTemplate",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": [Function],
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports all regular export driven forms should load a wrapper export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "delta.dateField": Object {
        "fieldId": "delta.dateField",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "once.booleanField": Object {
        "fieldId": "once.booleanField",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "test.limit": Object {
        "fieldId": "test.limit",
      },
      "type": Object {
        "defaultValue": [Function],
        "id": "type",
        "isLoggable": true,
        "label": "Export type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "All – always export all data",
                "value": "all",
              },
              Object {
                "label": "Delta – export only modified data",
                "value": "delta",
              },
              Object {
                "label": "Once – export records only once",
                "value": "once",
              },
              Object {
                "label": "Limit – export a set number of records",
                "value": "test",
              },
            ],
          },
        ],
        "required": true,
        "skipSort": true,
        "type": "select",
      },
      "wrapper.configuration": Object {
        "fieldId": "wrapper.configuration",
      },
      "wrapper.function": Object {
        "fieldId": "wrapper.function",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "exportOneToMany",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "wrapper.function",
                "wrapper.configuration",
              ],
              "label": "What would you like to export?",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "type",
                "test.limit",
                "delta.dateField",
                "once.booleanField",
              ],
              "label": "Configure export type",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports should load a csv rest export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "file.csv": Object {
        "defaultValue": [Function],
        "helpKey": "file.csvParse",
        "id": "file.csv",
        "ignoreSortAndGroup": true,
        "label": "CSV parser helper",
        "type": "csvparse",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "formView": Object {
        "fieldId": "formView",
      },
      "http.blobMethod": Object {
        "fieldId": "http.blobMethod",
      },
      "http.headers": Object {
        "fieldId": "http.headers",
      },
      "http.response.blobFormat": Object {
        "fieldId": "http.response.blobFormat",
      },
      "http.response.resourcePath": Object {
        "fieldId": "http.response.resourcePath",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "outputMode": Object {
        "defaultValue": [Function],
        "id": "outputMode",
        "label": "Output mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "required": true,
        "type": "radiogroup",
        "visible": false,
      },
      "rest.relativeURI": Object {
        "defaultValue": [Function],
        "fieldId": "rest.relativeURI",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "uploadFile": Object {
        "id": "uploadFile",
        "options": "csv",
        "placeholder": "Sample file (that would be parsed)",
        "type": "uploadfile",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "outputMode",
                "exportOneToMany",
                "formView",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "fields": Array [
                    "http.blobMethod",
                    "rest.relativeURI",
                    "http.headers",
                    "uploadFile",
                  ],
                },
                Object {
                  "containers": Array [
                    Object {
                      "fields": Array [
                        "file.csv",
                      ],
                    },
                  ],
                  "type": "indent",
                },
                Object {
                  "fields": Array [
                    "http.response.blobFormat",
                  ],
                },
              ],
              "label": [Function],
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "http.response.resourcePath",
              ],
              "label": "Non-standard API response patterns",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": "true",
              "fields": Array [
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports should load a financialforce export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "delta.dateField": Object {
        "connectionId": [Function],
        "defaultValue": [Function],
        "fieldName": "deltaExportDateFields",
        "filterKey": "salesforce-recordType",
        "id": "delta.dateField",
        "label": "Date fields to use in delta search",
        "multiselect": true,
        "placeholder": "Please select a date field",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.soql",
          "delta.dateField",
        ],
        "required": true,
        "type": "salesforcerefreshableselect",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "delta",
            ],
          },
        ],
      },
      "delta.lagOffset": Object {
        "fieldId": "delta.lagOffset",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "once.booleanField": Object {
        "connectionId": [Function],
        "fieldName": "onceExportBooleanFields",
        "filterKey": "salesforce-recordType",
        "helpKey": "export.once.booleanField",
        "id": "once.booleanField",
        "isLoggable": true,
        "label": "Boolean field to mark records as exported",
        "placeholder": "Please select a boolean field",
        "required": true,
        "type": "salesforcerefreshableselect",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "outputMode": Object {
        "defaultValue": [Function],
        "id": "outputMode",
        "label": "Output mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "required": true,
        "type": "mode",
        "visible": false,
      },
      "salesforce.distributed.batchSize": Object {
        "fieldId": "salesforce.distributed.batchSize",
      },
      "salesforce.distributed.qualifier": Object {
        "fieldId": "salesforce.distributed.qualifier",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
      },
      "salesforce.distributed.referencedFields": Object {
        "connectionId": [Function],
        "delimiter": ",",
        "disabledWhen": Array [
          Object {
            "field": "salesforce.sObjectType",
            "is": Array [
              "",
            ],
          },
        ],
        "fieldId": "salesforce.distributed.referencedFields",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
        "type": "salesforcereferencedfields",
      },
      "salesforce.distributed.relatedLists": Object {
        "connectionId": [Function],
        "disabledWhen": Array [
          Object {
            "field": "salesforce.sObjectType",
            "is": Array [
              "",
            ],
          },
        ],
        "fieldId": "salesforce.distributed.relatedLists",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
        "type": "salesforcerelatedlist",
      },
      "salesforce.distributed.requiredTrigger": Object {
        "defaultDisabled": true,
        "fieldId": "salesforce.distributed.requiredTrigger",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
        "type": "salesforcerequiredtrigger",
      },
      "salesforce.distributed.skipExportFieldId": Object {
        "fieldId": "salesforce.distributed.skipExportFieldId",
        "filterKey": "salesforce-recordType-boolean",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
        "type": "refreshableselect",
        "visibleWhenAll": Array [
          Object {
            "field": "salesforce.executionType",
            "is": Array [
              "realtime",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "salesforce.executionType": Object {
        "fieldId": "salesforce.executionType",
      },
      "salesforce.id": Object {
        "fieldId": "salesforce.id",
      },
      "salesforce.objectType": Object {
        "fieldId": "salesforce.objectType",
      },
      "salesforce.sObjectType": Object {
        "bundlePath": [Function],
        "bundleUrlHelp": "Please install our <a target=\\"_blank\\" href=\\"BUNDLE_URL\\">integrator distributed adapter package</a> in your Salesforce account to create realtime exports.",
        "commMetaPath": [Function],
        "connectionId": [Function],
        "fieldId": "salesforce.sObjectType",
        "type": "salesforcesobject",
      },
      "salesforce.soql": Object {
        "connectionId": [Function],
        "defaultValue": [Function],
        "filterKey": "salesforce-soqlQuery",
        "helpKey": "export.salesforce.soql.query",
        "id": "salesforce.soql",
        "label": "SOQL query",
        "multiline": true,
        "omitWhenHidden": true,
        "refreshOptionsOnChangesTo": Array [
          "delta.dateField",
          "once.booleanField",
        ],
        "required": true,
        "type": "soqlquery",
        "visibleWhenAll": Array [
          Object {
            "field": "salesforce.executionType",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "test.limit": Object {
        "fieldId": "test.limit",
      },
      "type": Object {
        "defaultValue": [Function],
        "id": "type",
        "isLoggable": true,
        "label": "Export type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "All – always export all data",
                "value": "all",
              },
              Object {
                "label": "Delta – export only modified data",
                "value": "delta",
              },
              Object {
                "label": "Once – export records only once",
                "value": "once",
              },
              Object {
                "label": "Limit – export a set number of records",
                "value": "test",
              },
            ],
          },
        ],
        "required": true,
        "skipSort": true,
        "type": "select",
        "visibleWhenAll": Array [
          Object {
            "field": "salesforce.executionType",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "outputMode",
                "exportOneToMany",
                "salesforce.executionType",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "salesforce.sObjectType",
                "salesforce.objectType",
                "salesforce.distributed.requiredTrigger",
                "salesforce.distributed.referencedFields",
                "salesforce.distributed.relatedLists",
                "salesforce.distributed.qualifier",
                "salesforce.soql",
                "salesforce.id",
              ],
              "label": [Function],
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "type",
                "test.limit",
                "delta.dateField",
                "delta.lagOffset",
                "once.booleanField",
              ],
              "label": "Configure export type",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "salesforce.distributed.batchSize",
                "salesforce.distributed.skipExportFieldId",
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports should load a json rest export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "delta.dateFormat": Object {
        "fieldId": "delta.dateFormat",
      },
      "delta.lagOffset": Object {
        "fieldId": "delta.lagOffset",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "formView": Object {
        "fieldId": "formView",
      },
      "http.blobMethod": Object {
        "fieldId": "http.blobMethod",
      },
      "http.headers": Object {
        "fieldId": "http.headers",
      },
      "http.method": Object {
        "fieldId": "http.method",
      },
      "http.once.relativeURI": Object {
        "fieldId": "http.once.relativeURI",
      },
      "http.paging.lastPagePath": Object {
        "fieldId": "http.paging.lastPagePath",
      },
      "http.paging.lastPageStatusCode": Object {
        "fieldId": "http.paging.lastPageStatusCode",
      },
      "http.response.blobFormat": Object {
        "fieldId": "http.response.blobFormat",
      },
      "http.response.resourcePath": Object {
        "fieldId": "http.response.resourcePath",
      },
      "http.response.successPath": Object {
        "fieldId": "http.response.successPath",
      },
      "http.response.successValues": Object {
        "fieldId": "http.response.successValues",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "once.booleanField": Object {
        "connectionId": [Function],
        "id": "once.booleanField",
        "isLoggable": true,
        "label": "Boolean field to mark records as exported",
        "type": "textwithconnectioncontext",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "outputMode": Object {
        "defaultValue": [Function],
        "id": "outputMode",
        "label": "Output mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "required": true,
        "type": "radiogroup",
        "visible": false,
      },
      "rest.lastPageValue": Object {
        "defaultValue": [Function],
        "fieldId": "rest.lastPageValue",
      },
      "rest.linkHeaderRelation": Object {
        "defaultValue": [Function],
        "fieldId": "rest.linkHeaderRelation",
      },
      "rest.maxCountPath": Object {
        "defaultValue": [Function],
        "fieldId": "rest.maxCountPath",
      },
      "rest.maxPagePath": Object {
        "defaultValue": [Function],
        "fieldId": "rest.maxPagePath",
      },
      "rest.nextPageRelativeURI": Object {
        "defaultValue": [Function],
        "fieldId": "rest.nextPageRelativeURI",
      },
      "rest.nextPageTokenPath": Object {
        "defaultValue": [Function],
        "fieldId": "rest.nextPageTokenPath",
      },
      "rest.nextPageURLPath": Object {
        "defaultValue": [Function],
        "fieldId": "rest.nextPageURLPath",
      },
      "rest.once.method": Object {
        "defaultValue": [Function],
        "fieldId": "rest.once.method",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "rest.once.postBody": Object {
        "defaultValue": [Function],
        "fieldId": "rest.once.postBody",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "rest.pageArgument": Object {
        "defaultValue": [Function],
        "fieldId": "rest.pageArgument",
      },
      "rest.pagingMethod": Object {
        "defaultValue": [Function],
        "fieldId": "rest.pagingMethod",
      },
      "rest.pagingPostBody": Object {
        "defaultValue": [Function],
        "fieldId": "rest.pagingPostBody",
      },
      "rest.postBody": Object {
        "defaultValue": [Function],
        "fieldId": "rest.postBody",
        "visibleWhen": Array [
          Object {
            "field": "http.method",
            "is": Array [
              "POST",
              "PUT",
            ],
          },
        ],
      },
      "rest.relativeURI": Object {
        "defaultValue": [Function],
        "fieldId": "rest.relativeURI",
      },
      "rest.skipArgument": Object {
        "defaultValue": [Function],
        "fieldId": "rest.skipArgument",
      },
      "rest.tokenPageArgument": Object {
        "defaultValue": [Function],
        "fieldId": "rest.tokenPageArgument",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "test.limit": Object {
        "fieldId": "test.limit",
      },
      "type": Object {
        "defaultValue": [Function],
        "id": "type",
        "isLoggable": true,
        "label": "Export type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "All – always export all data",
                "value": "all",
              },
              Object {
                "description": "Add {{lastExportDateTime}} to either the relative URI or HTTP request body to complete the setup.",
                "fieldsToValidate": Array [
                  "rest.relativeURI",
                  "rest.postBody",
                ],
                "helpKey": "export.delta",
                "label": "Delta – export only modified data",
                "regex": /\\.\\*\\{\\{\\.\\*lastExportDateTime\\.\\*\\}\\}/,
                "value": "delta",
              },
              Object {
                "label": "Once – export records only once",
                "value": "once",
              },
              Object {
                "label": "Limit – export a set number of records",
                "value": "test",
              },
            ],
          },
        ],
        "required": true,
        "skipSort": true,
        "type": "selectwithvalidations",
        "visibleWhen": Array [
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "outputMode",
                "exportOneToMany",
                "formView",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "http.method",
                "http.blobMethod",
                "rest.relativeURI",
                "http.headers",
                "rest.postBody",
                "http.response.blobFormat",
              ],
              "label": [Function],
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "type",
                "test.limit",
                "delta.dateFormat",
                "delta.lagOffset",
                "once.booleanField",
                "rest.once.method",
                "http.once.relativeURI",
                "rest.once.postBody",
              ],
              "label": "Configure export type",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rest.pagingMethod",
                "rest.nextPageURLPath",
                "rest.nextPageTokenPath",
                "rest.linkHeaderRelation",
                "rest.skipArgument",
                "rest.nextPageRelativeURI",
                "rest.pageArgument",
                "rest.tokenPageArgument",
                "rest.pagingPostBody",
                "rest.maxPagePath",
                "rest.maxCountPath",
                "http.paging.lastPageStatusCode",
                "http.paging.lastPagePath",
                "rest.lastPageValue",
              ],
              "label": "Does this API use paging?",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "http.response.resourcePath",
                "http.response.successPath",
                "http.response.successValues",
              ],
              "label": "Non-standard API response patterns",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": "true",
              "fields": Array [
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports should load a new export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "application": Object {
        "appType": "export",
        "defaultValue": [Function],
        "helpKey": "application",
        "id": "application",
        "isLoggable": true,
        "label": "Application",
        "name": "application",
        "placeholder": "Choose application or start typing to browse 50+ applications",
        "type": "selectapplication",
        "validWhen": Object {
          "isNot": Object {
            "message": "Please select an application",
            "values": Array [
              "",
            ],
          },
        },
      },
      "connection": Object {
        "allowEdit": true,
        "allowNew": true,
        "defaultValue": [Function],
        "id": "connection",
        "label": "Connection",
        "name": "/_connectionId",
        "refreshOptionsOnChangesTo": Array [
          "application",
        ],
        "required": true,
        "resourceType": "connections",
        "type": "selectresource",
        "validWhen": Object {
          "isNot": Object {
            "message": "Please select a connection",
            "values": Array [
              "",
            ],
          },
        },
        "visibleWhenAll": Array [
          Object {
            "field": "application",
            "isNot": Array [
              "",
              "aha",
              "errorception",
              "helpscout",
              "mailparser-io",
              "sapariba",
              "travis",
              "travis-org",
              "webhook",
            ],
          },
          Object {
            "field": "type",
            "is": Array [
              "api",
            ],
          },
        ],
      },
      "description": Object {
        "defaultValue": "",
        "id": "description",
        "label": "Description",
        "maxRows": 5,
        "multiline": true,
        "name": "/description",
        "type": "text",
        "visibleWhen": Array [
          Object {
            "field": "application",
            "isNot": Array [
              "",
            ],
          },
        ],
      },
      "name": Object {
        "defaultValue": "",
        "id": "name",
        "label": "Name",
        "name": "/name",
        "refreshOptionsOnChangesTo": Array [
          "application",
        ],
        "required": true,
        "type": "text",
        "visibleWhen": Array [
          Object {
            "field": "application",
            "isNot": Array [
              "",
            ],
          },
        ],
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "type": Object {
        "defaultValue": [Function],
        "id": "type",
        "label": "This application supports two options for exporting data",
        "name": "type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "API",
                "value": "api",
              },
              Object {
                "label": "Webhook",
                "value": "webhook",
              },
            ],
          },
        ],
        "required": true,
        "type": "radiogroup",
        "visibleWhen": Array [
          Object {
            "field": "application",
            "is": Array [
              "activecampaign",
              "github",
              "hubspot",
              "integratorio",
              "intercom",
              "jira",
              "mailchimp",
              "pagerduty",
              "parseur",
              "postmark",
              "recurly",
              "segment",
              "shipwire",
              "shopify",
              "slack",
              "stripe",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "fields": Array [
            "application",
            "type",
            "connection",
            "name",
            "description",
          ],
        },
      ],
      "type": "box",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports should load a salesforce export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "delta.dateField": Object {
        "connectionId": [Function],
        "defaultValue": [Function],
        "fieldName": "deltaExportDateFields",
        "filterKey": "salesforce-recordType",
        "id": "delta.dateField",
        "label": "Date fields to use in delta search",
        "multiselect": true,
        "placeholder": "Please select a date field",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.soql",
          "delta.dateField",
        ],
        "required": true,
        "type": "salesforcerefreshableselect",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "delta",
            ],
          },
        ],
      },
      "delta.lagOffset": Object {
        "fieldId": "delta.lagOffset",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "once.booleanField": Object {
        "connectionId": [Function],
        "fieldName": "onceExportBooleanFields",
        "filterKey": "salesforce-recordType",
        "helpKey": "export.once.booleanField",
        "id": "once.booleanField",
        "isLoggable": true,
        "label": "Boolean field to mark records as exported",
        "placeholder": "Please select a boolean field",
        "required": true,
        "type": "salesforcerefreshableselect",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "outputMode": Object {
        "defaultValue": [Function],
        "id": "outputMode",
        "label": "Output mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "required": true,
        "type": "mode",
        "visible": false,
      },
      "salesforce.distributed.batchSize": Object {
        "fieldId": "salesforce.distributed.batchSize",
      },
      "salesforce.distributed.qualifier": Object {
        "fieldId": "salesforce.distributed.qualifier",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
      },
      "salesforce.distributed.referencedFields": Object {
        "connectionId": [Function],
        "delimiter": ",",
        "disabledWhen": Array [
          Object {
            "field": "salesforce.sObjectType",
            "is": Array [
              "",
            ],
          },
        ],
        "fieldId": "salesforce.distributed.referencedFields",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
        "type": "salesforcereferencedfields",
      },
      "salesforce.distributed.relatedLists": Object {
        "connectionId": [Function],
        "disabledWhen": Array [
          Object {
            "field": "salesforce.sObjectType",
            "is": Array [
              "",
            ],
          },
        ],
        "fieldId": "salesforce.distributed.relatedLists",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
        "type": "salesforcerelatedlist",
      },
      "salesforce.distributed.requiredTrigger": Object {
        "defaultDisabled": true,
        "fieldId": "salesforce.distributed.requiredTrigger",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
        "type": "salesforcerequiredtrigger",
      },
      "salesforce.distributed.skipExportFieldId": Object {
        "fieldId": "salesforce.distributed.skipExportFieldId",
        "filterKey": "salesforce-recordType-boolean",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
        "type": "refreshableselect",
        "visibleWhenAll": Array [
          Object {
            "field": "salesforce.executionType",
            "is": Array [
              "realtime",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "salesforce.executionType": Object {
        "fieldId": "salesforce.executionType",
      },
      "salesforce.id": Object {
        "fieldId": "salesforce.id",
      },
      "salesforce.objectType": Object {
        "fieldId": "salesforce.objectType",
      },
      "salesforce.sObjectType": Object {
        "bundlePath": [Function],
        "bundleUrlHelp": "Please install our <a target=\\"_blank\\" href=\\"BUNDLE_URL\\">integrator distributed adapter package</a> in your Salesforce account to create realtime exports.",
        "commMetaPath": [Function],
        "connectionId": [Function],
        "fieldId": "salesforce.sObjectType",
        "type": "salesforcesobject",
      },
      "salesforce.soql": Object {
        "connectionId": [Function],
        "defaultValue": [Function],
        "filterKey": "salesforce-soqlQuery",
        "helpKey": "export.salesforce.soql.query",
        "id": "salesforce.soql",
        "label": "SOQL query",
        "multiline": true,
        "omitWhenHidden": true,
        "refreshOptionsOnChangesTo": Array [
          "delta.dateField",
          "once.booleanField",
        ],
        "required": true,
        "type": "soqlquery",
        "visibleWhenAll": Array [
          Object {
            "field": "salesforce.executionType",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "test.limit": Object {
        "fieldId": "test.limit",
      },
      "type": Object {
        "defaultValue": [Function],
        "id": "type",
        "isLoggable": true,
        "label": "Export type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "All – always export all data",
                "value": "all",
              },
              Object {
                "label": "Delta – export only modified data",
                "value": "delta",
              },
              Object {
                "label": "Once – export records only once",
                "value": "once",
              },
              Object {
                "label": "Limit – export a set number of records",
                "value": "test",
              },
            ],
          },
        ],
        "required": true,
        "skipSort": true,
        "type": "select",
        "visibleWhenAll": Array [
          Object {
            "field": "salesforce.executionType",
            "is": Array [
              "scheduled",
            ],
          },
          Object {
            "field": "outputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "outputMode",
                "exportOneToMany",
                "salesforce.executionType",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "salesforce.sObjectType",
                "salesforce.objectType",
                "salesforce.distributed.requiredTrigger",
                "salesforce.distributed.referencedFields",
                "salesforce.distributed.relatedLists",
                "salesforce.distributed.qualifier",
                "salesforce.soql",
                "salesforce.id",
              ],
              "label": [Function],
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "type",
                "test.limit",
                "delta.dateField",
                "delta.lagOffset",
                "once.booleanField",
              ],
              "label": "Configure export type",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "salesforce.distributed.batchSize",
                "salesforce.distributed.skipExportFieldId",
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports should load a snowflake export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "rdbms.once.query": Object {
        "fieldId": "rdbms.once.query",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "rdbms.query": Object {
        "fieldId": "rdbms.query",
      },
      "rdbmsGrouping": Object {
        "formId": "rdbmsGrouping",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "test.limit": Object {
        "fieldId": "test.limit",
      },
      "type": Object {
        "defaultValue": [Function],
        "id": "type",
        "isLoggable": true,
        "label": "Export type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "All – always export all data",
                "value": "all",
              },
              Object {
                "label": "Delta – export only modified data",
                "value": "delta",
              },
              Object {
                "label": "Once – export records only once",
                "value": "once",
              },
              Object {
                "label": "Limit – export a set number of records",
                "value": "test",
              },
            ],
          },
        ],
        "required": true,
        "skipSort": true,
        "type": "select",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "exportOneToMany",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.query",
              ],
              "label": "What would you like to export?",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "type",
                "test.limit",
                "rdbms.once.query",
              ],
              "label": "Configure export type",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbmsGrouping",
              ],
              "label": "Would you like to group records?",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form exports should load a sql export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "exportOneToMany": Object {
        "formId": "exportOneToMany",
      },
      "mockOutput": Object {
        "fieldId": "mockOutput",
      },
      "rdbms.once.query": Object {
        "fieldId": "rdbms.once.query",
        "visibleWhen": Array [
          Object {
            "field": "type",
            "is": Array [
              "once",
            ],
          },
        ],
      },
      "rdbms.query": Object {
        "fieldId": "rdbms.query",
      },
      "rdbmsGrouping": Object {
        "formId": "rdbmsGrouping",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "test.limit": Object {
        "fieldId": "test.limit",
      },
      "type": Object {
        "defaultValue": [Function],
        "id": "type",
        "isLoggable": true,
        "label": "Export type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "All – always export all data",
                "value": "all",
              },
              Object {
                "label": "Delta – export only modified data",
                "value": "delta",
              },
              Object {
                "label": "Once – export records only once",
                "value": "once",
              },
              Object {
                "label": "Limit – export a set number of records",
                "value": "test",
              },
            ],
          },
        ],
        "required": true,
        "skipSort": true,
        "type": "select",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "exportOneToMany",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.query",
              ],
              "label": "What would you like to export?",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "type",
                "test.limit",
                "rdbms.once.query",
              ],
              "label": "Configure export type",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbmsGrouping",
              ],
              "label": "Would you like to group records?",
            },
            Object {
              "actionId": "mockOutput",
              "collapsed": true,
              "fields": Array [
                "mockOutput",
              ],
              "label": "Mock output",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports all regular import driven forms should load a as2 export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": Array [
      Object {
        "id": "saveandclosegroup",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "isNot": Array [
              "filedefinition",
              "fixed",
              "delimited/edifact",
            ],
          },
        ],
      },
      Object {
        "id": "savefiledefinitions",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "filedefinition",
              "fixed",
              "delimited/edifact",
            ],
          },
        ],
      },
    ],
    "fieldMap": Object {
      "as2.fileNameTemplate": Object {
        "fieldId": "as2.fileNameTemplate",
      },
      "as2.headers": Object {
        "fieldId": "as2.headers",
      },
      "as2.maxRetries": Object {
        "fieldId": "as2.maxRetries",
      },
      "as2.messageIdTemplate": Object {
        "fieldId": "as2.messageIdTemplate",
      },
      "common": Object {
        "formId": "common",
      },
      "compressFiles": Object {
        "formId": "compressFiles",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "distributed": Object {
        "defaultValue": false,
        "fieldId": "distributed",
      },
      "edifact.format": Object {
        "fieldId": "edifact.format",
      },
      "edix12.format": Object {
        "fieldId": "edix12.format",
      },
      "file.csv": Object {
        "fieldId": "file.csv",
      },
      "file.filedefinition.rules": Object {
        "fieldId": "file.filedefinition.rules",
        "refreshOptionsOnChangesTo": Array [
          "edix12.format",
          "fixed.format",
          "edifact.format",
          "file.type",
        ],
        "required": true,
      },
      "file.json.body": Object {
        "id": "file.json.body",
        "label": "JSON document",
        "refreshOptionsOnChangesTo": Array [
          "file.type",
        ],
        "type": "httprequestbody",
        "visibleWhenAll": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "json",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "file.lookups": Object {
        "fieldId": "file.lookups",
        "visible": false,
      },
      "file.type": Object {
        "fieldId": "file.type",
      },
      "file.xlsx.includeHeader": Object {
        "fieldId": "file.xlsx.includeHeader",
      },
      "file.xml.body": Object {
        "connectionId": [Function],
        "id": "file.xml.body",
        "label": "XML document",
        "refreshOptionsOnChangesTo": Array [
          "file.type",
        ],
        "required": true,
        "type": "httprequestbody",
        "visibleWhenAll": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "xml",
            ],
          },
        ],
      },
      "fixed.format": Object {
        "fieldId": "fixed.format",
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "traceKeyTemplate": Object {
        "fieldId": "traceKeyTemplate",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "dataMappings",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "fields": Array [
                    "file.csv",
                  ],
                },
              ],
              "fields": Array [
                "distributed",
                "file.type",
                "edifact.format",
                "fixed.format",
                "edix12.format",
                "as2.fileNameTemplate",
                "as2.messageIdTemplate",
                "file.xml.body",
                "file.json.body",
                "file.xlsx.includeHeader",
                "file.filedefinition.rules",
                "as2.headers",
                "file.lookups",
              ],
              "label": "How would you like the records imported?",
              "type": "indent",
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "compressFiles",
                "as2.maxRetries",
                "traceKeyTemplate",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": [Function],
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports all regular import driven forms should load a dynamodb export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "dynamodb.conditionExpression": Object {
        "fieldId": "dynamodb.conditionExpression",
      },
      "dynamodb.expressionAttributeNames": Object {
        "fieldId": "dynamodb.expressionAttributeNames",
      },
      "dynamodb.expressionAttributeValues": Object {
        "fieldId": "dynamodb.expressionAttributeValues",
      },
      "dynamodb.ignoreExtract": Object {
        "fieldId": "dynamodb.ignoreExtract",
        "visibleWhen": Array [
          Object {
            "field": "ignoreExisting",
            "is": Array [
              true,
            ],
          },
          Object {
            "field": "ignoreMissing",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "dynamodb.itemDocument": Object {
        "fieldId": "dynamodb.itemDocument",
      },
      "dynamodb.method": Object {
        "fieldId": "dynamodb.method",
      },
      "dynamodb.partitionKey": Object {
        "fieldId": "dynamodb.partitionKey",
      },
      "dynamodb.region": Object {
        "fieldId": "dynamodb.region",
      },
      "dynamodb.sortKey": Object {
        "fieldId": "dynamodb.sortKey",
      },
      "dynamodb.tableName": Object {
        "fieldId": "dynamodb.tableName",
      },
      "dynamodb.updateExpression": Object {
        "fieldId": "dynamodb.updateExpression",
      },
      "ignoreExisting": Object {
        "fieldId": "ignoreExisting",
        "fieldsToReset": Array [
          Object {
            "id": "ignoreMissing",
            "type": "checkbox",
          },
        ],
        "type": "checkboxforresetfields",
        "visibleWhen": Array [
          Object {
            "field": "dynamodb.method",
            "is": Array [
              "putItem",
            ],
          },
          Object {
            "field": "dynamodb.method",
            "is": Array [
              "updateItem",
            ],
          },
        ],
      },
      "ignoreMissing": Object {
        "fieldId": "ignoreMissing",
        "fieldsToReset": Array [
          Object {
            "id": "ignoreExisting",
            "type": "checkbox",
          },
        ],
        "type": "checkboxforresetfields",
        "visibleWhen": Array [
          Object {
            "field": "dynamodb.method",
            "is": Array [
              "putItem",
            ],
          },
          Object {
            "field": "dynamodb.method",
            "is": Array [
              "updateItem",
            ],
          },
        ],
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "dynamodb.method",
                "dynamodb.region",
                "dynamodb.tableName",
                "dynamodb.expressionAttributeNames",
                "dynamodb.expressionAttributeValues",
                "dynamodb.partitionKey",
                "dynamodb.sortKey",
                "dynamodb.conditionExpression",
                "ignoreExisting",
                "ignoreMissing",
                "dynamodb.ignoreExtract",
                "dynamodb.itemDocument",
                "dynamodb.updateExpression",
              ],
              "label": "How would you like the records imported?",
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports all regular import driven forms should load a ftp export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": Array [
      Object {
        "id": "saveandclosegroup",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "isNot": Array [
              "filedefinition",
              "fixed",
              "delimited/edifact",
            ],
          },
        ],
      },
      Object {
        "id": "savefiledefinitions",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "filedefinition",
              "fixed",
              "delimited/edifact",
            ],
          },
        ],
      },
    ],
    "fieldMap": Object {
      "blobKeyPath": Object {
        "fieldId": "blobKeyPath",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "deleteAfterImport": Object {
        "fieldId": "deleteAfterImport",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "file.backupPath": Object {
        "fieldId": "file.backupPath",
      },
      "file.batchSize": Object {
        "fieldId": "file.batchSize",
        "visibleWhenAll": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "file.csv": Object {
        "fieldId": "file.csv",
      },
      "file.encoding": Object {
        "fieldId": "file.encoding",
      },
      "file.fileName": Object {
        "fieldId": "file.fileName",
        "required": true,
      },
      "file.json.body": Object {
        "id": "file.json.body",
        "label": "JSON document",
        "refreshOptionsOnChangesTo": Array [
          "file.type",
        ],
        "type": "httprequestbody",
        "visibleWhenAll": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "json",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "file.lookups": Object {
        "fieldId": "file.lookups",
        "visible": false,
      },
      "file.xlsx.includeHeader": Object {
        "fieldId": "file.xlsx.includeHeader",
      },
      "file.xml.body": Object {
        "connectionId": [Function],
        "helpKey": "import.ftp.XMLDocument",
        "id": "file.xml.body",
        "label": "XML document",
        "refreshOptionsOnChangesTo": Array [
          "file.type",
        ],
        "required": true,
        "type": "httprequestbody",
        "visibleWhenAll": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "xml",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "fileAdvanced": Object {
        "formId": "fileAdvanced",
      },
      "fileAdvancedSettings": Object {
        "formId": "fileAdvancedSettings",
        "visibleWhenAll": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "fileApiIdentifier": Object {
        "formId": "fileApiIdentifier",
      },
      "fileType": Object {
        "formId": "fileType",
        "visibleWhenAll": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "ftp.blobFileName": Object {
        "fieldId": "ftp.blobFileName",
      },
      "ftp.blobInProgressFileName": Object {
        "fieldId": "ftp.blobInProgressFileName",
      },
      "ftp.blobUseTempFile": Object {
        "fieldId": "ftp.blobUseTempFile",
      },
      "ftp.directoryPath": Object {
        "fieldId": "ftp.directoryPath",
      },
      "ftp.inProgressFileName": Object {
        "fieldId": "ftp.inProgressFileName",
      },
      "ftp.useTempFile": Object {
        "fieldId": "ftp.useTempFile",
      },
      "http.relativeURI": Object {
        "fieldId": "http.relativeURI",
        "helpKey": [Function],
        "label": [Function],
        "required": true,
        "type": "uri",
      },
      "inputMode": Object {
        "defaultDisabled": [Function],
        "defaultValue": [Function],
        "helpKey": "import.inputMode",
        "id": "inputMode",
        "label": "Generate files from records:",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Yes",
                "value": "records",
              },
              Object {
                "label": "No",
                "value": "blob",
              },
            ],
          },
        ],
        "type": "mode",
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "s3.bucket": Object {
        "fieldId": "s3.bucket",
      },
      "s3.region": Object {
        "fieldId": "s3.region",
      },
      "s3.serverSideEncryptionType": Object {
        "fieldId": "s3.serverSideEncryptionType",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "traceKeyTemplate": Object {
        "fieldId": "traceKeyTemplate",
      },
      "uploadFile": Object {
        "fieldId": "uploadFile",
        "helpKey": "import.uploadFile",
        "placeholder": "Sample file (that would be generated)",
        "refreshOptionsOnChangesTo": Array [
          "file.type",
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "dataMappings",
                "inputMode",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "fields": Array [
                    "file.csv",
                  ],
                },
              ],
              "fields": Array [
                "fileType",
                "uploadFile",
                "file.xlsx.includeHeader",
              ],
              "label": "How would you like to generate files?",
              "type": "indent",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "ftp.directoryPath",
                "file.fileName",
                "file.xml.body",
                "file.json.body",
                "ftp.blobFileName",
                "file.lookups",
              ],
              "label": "Where would you like the files transferred?",
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "fileAdvanced",
                "ftp.useTempFile",
                "ftp.inProgressFileName",
                "ftp.blobUseTempFile",
                "ftp.blobInProgressFileName",
                "file.batchSize",
                "file.backupPath",
                "file.encoding",
                "blobKeyPath",
                "fileAdvancedSettings",
                "deleteAfterImport",
                "traceKeyTemplate",
                "fileApiIdentifier",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports all regular import driven forms should load a http export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "blobKeyPath": Object {
        "fieldId": "blobKeyPath",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "deleteAfterImport": Object {
        "fieldId": "deleteAfterImport",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "file.csv": Object {
        "fieldId": "file.csv",
        "visibleWhenAll": Array [
          Object {
            "field": "http.requestMediaType",
            "is": Array [
              "csv",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "formView": Object {
        "fieldId": "formView",
      },
      "http._asyncHelperId": Object {
        "fieldId": "http._asyncHelperId",
      },
      "http.batchSize": Object {
        "fieldId": "http.batchSize",
      },
      "http.blobMethod": Object {
        "fieldId": "http.blobMethod",
      },
      "http.body": Object {
        "fieldId": "http.body",
        "refreshOptionsOnChangesTo": Array [
          "http.requestMediaType",
        ],
      },
      "http.bodyCreate": Object {
        "arrayIndex": 1,
        "connectionId": [Function],
        "defaultValue": [Function],
        "helpKey": "import.http.body",
        "id": "http.bodyCreate",
        "label": "HTTP request body",
        "refreshOptionsOnChangesTo": Array [
          "http.requestMediaType",
        ],
        "requestMediaType": [Function],
        "type": "httprequestbody",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.bodyUpdate": Object {
        "arrayIndex": 0,
        "connectionId": [Function],
        "defaultValue": [Function],
        "helpKey": "import.http.body",
        "id": "http.bodyUpdate",
        "label": "HTTP request body",
        "refreshOptionsOnChangesTo": Array [
          "http.requestMediaType",
        ],
        "requestMediaType": [Function],
        "type": "httprequestbody",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.compositeMethodCreate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.method",
        "id": "http.compositeMethodCreate",
        "label": "HTTP method",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "POST",
                "value": "POST",
              },
              Object {
                "label": "PUT",
                "value": "PUT",
              },
              Object {
                "label": "PATCH",
                "value": "PATCH",
              },
            ],
          },
        ],
        "required": true,
        "type": "select",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.compositeMethodUpdate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.method",
        "id": "http.compositeMethodUpdate",
        "label": "HTTP method",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "POST",
                "value": "POST",
              },
              Object {
                "label": "PUT",
                "value": "PUT",
              },
              Object {
                "label": "PATCH",
                "value": "PATCH",
              },
            ],
          },
        ],
        "required": true,
        "type": "select",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.compositeType": Object {
        "fieldId": "http.compositeType",
      },
      "http.configureAsyncHelper": Object {
        "fieldId": "http.configureAsyncHelper",
      },
      "http.errorMediaType": Object {
        "fieldId": "http.errorMediaType",
      },
      "http.existingExtract": Object {
        "fieldId": "http.existingExtract",
      },
      "http.existingLookupName": Object {
        "fieldId": "http.existingLookupName",
      },
      "http.existingLookupType": Object {
        "fieldId": "http.existingLookupType",
      },
      "http.failPathCreate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.failPath",
        "id": "http.failPathCreate",
        "label": "Path to error field in HTTP response body",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.failPathUpdate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.failPath",
        "id": "http.failPathUpdate",
        "label": "Path to error field in HTTP response body",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.failValuesCreate": Object {
        "defaultValue": [Function],
        "delimiter": ",",
        "helpKey": "import.http.response.failValues",
        "id": "http.failValuesCreate",
        "label": "Error values",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.failValuesUpdate": Object {
        "defaultValue": [Function],
        "delimiter": ",",
        "helpKey": "import.http.response.failValues",
        "id": "http.failValuesUpdate",
        "label": "Error values",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.headers": Object {
        "fieldId": "http.headers",
      },
      "http.ignoreEmptyNodes": Object {
        "fieldId": "http.ignoreEmptyNodes",
      },
      "http.ignoreExistingExtract": Object {
        "fieldId": "http.ignoreExistingExtract",
      },
      "http.ignoreExistingLookupName": Object {
        "fieldId": "http.ignoreExistingLookupName",
      },
      "http.ignoreNewExtract": Object {
        "fieldId": "http.ignoreNewExtract",
      },
      "http.ignoreNewLookupName": Object {
        "fieldId": "http.ignoreNewLookupName",
      },
      "http.lookupType": Object {
        "fieldId": "http.lookupType",
      },
      "http.lookups": Object {
        "fieldId": "http.lookups",
        "visible": false,
      },
      "http.method": Object {
        "fieldId": "http.method",
      },
      "http.newLookupType": Object {
        "fieldId": "http.newLookupType",
      },
      "http.relativeURI": Object {
        "fieldId": "http.relativeURI",
      },
      "http.relativeURICreate": Object {
        "arrayIndex": 1,
        "connectionId": [Function],
        "defaultValue": [Function],
        "helpKey": "import.http.relativeURI",
        "id": "http.relativeURICreate",
        "label": "Relative URI",
        "type": "relativeuri",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.relativeURIUpdate": Object {
        "arrayIndex": 0,
        "connectionId": [Function],
        "defaultValue": [Function],
        "helpKey": "import.http.relativeURI",
        "id": "http.relativeURIUpdate",
        "label": "Relative URI",
        "type": "relativeuri",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.requestMediaType": Object {
        "fieldId": "http.requestMediaType",
      },
      "http.resourceIdPathCreate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.resourceIdPath",
        "id": "http.resourceIdPathCreate",
        "label": "Path to id field in HTTP response body",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.resourceIdPathUpdate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.resourceIdPath",
        "id": "http.resourceIdPathUpdate",
        "label": "Path to id field in HTTP response body",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.resourcePathCreate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.resourcePath",
        "id": "http.resourcePathCreate",
        "label": "Path to records in HTTP response body",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.resourcePathUpdate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.resourcePath",
        "id": "http.resourcePathUpdate",
        "label": "Path to records in HTTP response body",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.response.errorPath": Object {
        "fieldId": "http.response.errorPath",
      },
      "http.response.failPath": Object {
        "defaultValue": [Function],
        "fieldId": "http.response.failPath",
      },
      "http.response.failValues": Object {
        "defaultValue": [Function],
        "fieldId": "http.response.failValues",
      },
      "http.response.resourceIdPath": Object {
        "fieldId": "http.response.resourceIdPath",
      },
      "http.response.resourcePath": Object {
        "fieldId": "http.response.resourcePath",
      },
      "http.response.successPath": Object {
        "defaultValue": [Function],
        "fieldId": "http.response.successPath",
      },
      "http.response.successValues": Object {
        "defaultValue": [Function],
        "fieldId": "http.response.successValues",
      },
      "http.successMediaType": Object {
        "fieldId": "http.successMediaType",
      },
      "http.successPathCreate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.successPath",
        "id": "http.successPathCreate",
        "label": "Path to success field in HTTP response body",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.successPathUpdate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.successPath",
        "id": "http.successPathUpdate",
        "label": "Path to success field in HTTP response body",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.successValuesCreate": Object {
        "defaultValue": [Function],
        "delimiter": ",",
        "helpKey": "import.http.response.successValues",
        "id": "http.successValuesCreate",
        "label": "Success values",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.successValuesUpdate": Object {
        "defaultValue": [Function],
        "delimiter": ",",
        "helpKey": "import.http.response.successValues",
        "id": "http.successValuesUpdate",
        "label": "Success values",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "inputMode": Object {
        "defaultValue": [Function],
        "id": "inputMode",
        "label": "Input mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "type": "mode",
        "visible": false,
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "unencrypted.apiType": Object {
        "fieldId": "unencrypted.apiType",
      },
      "unencrypted.feedType": Object {
        "fieldId": "unencrypted.feedType",
      },
      "uploadFile": Object {
        "fieldId": "uploadFile",
        "helpKey": "import.uploadFile",
        "mode": [Function],
        "placeholder": "Sample file (that would be generated)",
        "refreshOptionsOnChangesTo": Array [
          "file.type",
        ],
        "visibleWhenAll": Array [
          Object {
            "field": "http.requestMediaType",
            "is": Array [
              "csv",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "inputMode",
                "dataMappings",
                "formView",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "containers": Array [
                    Object {
                      "fields": Array [
                        "file.csv",
                      ],
                    },
                  ],
                  "type": "indent",
                },
                Object {
                  "containers": Array [
                    Object {
                      "collapsed": true,
                      "fields": Array [
                        "http.compositeMethodCreate",
                        "http.relativeURICreate",
                        "http.bodyCreate",
                      ],
                      "label": "Create new records",
                    },
                    Object {
                      "collapsed": true,
                      "fields": Array [
                        "http.existingLookupType",
                        "http.ignoreExistingExtract",
                        "http.ignoreExistingLookupName",
                      ],
                      "label": "Identify existing records",
                    },
                    Object {
                      "collapsed": true,
                      "fields": Array [
                        "http.newLookupType",
                        "http.ignoreNewExtract",
                        "http.ignoreNewLookupName",
                      ],
                      "label": "Identify existing records",
                    },
                    Object {
                      "collapsed": true,
                      "fields": Array [
                        "http.lookupType",
                        "http.existingExtract",
                        "http.existingLookupName",
                      ],
                      "label": "Identify existing records",
                    },
                    Object {
                      "collapsed": true,
                      "fields": Array [
                        "http.compositeMethodUpdate",
                        "http.relativeURIUpdate",
                        "http.bodyUpdate",
                      ],
                      "label": "Update existing records",
                    },
                  ],
                  "type": "collapse",
                },
              ],
              "fields": Array [
                "unencrypted.apiType",
                "http.method",
                "http.blobMethod",
                "http.compositeType",
                "http.relativeURI",
                "http.headers",
                "http.requestMediaType",
                "http.lookups",
                "http.batchSize",
                "unencrypted.feedType",
                "http.body",
                "uploadFile",
              ],
              "label": [Function],
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "containers": Array [
                    Object {
                      "collapsed": true,
                      "fields": Array [
                        "http.resourcePathCreate",
                        "http.resourceIdPathCreate",
                        "http.failPathCreate",
                        "http.failValuesCreate",
                        "http.successPathCreate",
                        "http.successValuesCreate",
                      ],
                      "label": "Create new records",
                    },
                    Object {
                      "collapsed": true,
                      "fields": Array [
                        "http.resourcePathUpdate",
                        "http.resourceIdPathUpdate",
                        "http.failPathUpdate",
                        "http.failValuesUpdate",
                        "http.successPathUpdate",
                        "http.successValuesUpdate",
                      ],
                      "label": "Update existing records",
                    },
                  ],
                  "type": "collapse",
                },
                Object {
                  "fields": Array [
                    "http.response.resourcePath",
                    "http.response.resourceIdPath",
                    "http.response.failPath",
                    "http.response.failValues",
                    "http.response.successPath",
                    "http.response.successValues",
                    "http.response.errorPath",
                    "http.successMediaType",
                    "http.errorMediaType",
                  ],
                },
              ],
              "label": "Non-standard API response patterns",
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "http.ignoreEmptyNodes",
                "blobKeyPath",
                "advancedSettings",
                "http.configureAsyncHelper",
                "http._asyncHelperId",
                "deleteAfterImport",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports all regular import driven forms should load a mongodb export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "ignoreExisting": Object {
        "fieldId": "ignoreExisting",
        "visibleWhen": Array [
          Object {
            "field": "mongodb.method",
            "is": Array [
              "insertMany",
            ],
          },
        ],
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "mongodb.collection": Object {
        "fieldId": "mongodb.collection",
      },
      "mongodb.document": Object {
        "fieldId": "mongodb.document",
      },
      "mongodb.filter": Object {
        "fieldId": "mongodb.filter",
      },
      "mongodb.ignoreExtract": Object {
        "fieldId": "mongodb.ignoreExtract",
      },
      "mongodb.ignoreLookupFilter": Object {
        "fieldId": "mongodb.ignoreLookupFilter",
      },
      "mongodb.lookupType": Object {
        "fieldId": "mongodb.lookupType",
      },
      "mongodb.method": Object {
        "fieldId": "mongodb.method",
      },
      "mongodb.update": Object {
        "fieldId": "mongodb.update",
      },
      "mongodb.upsert": Object {
        "fieldId": "mongodb.upsert",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "dataMappings",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "mongodb.method",
                "mongodb.collection",
                "mongodb.filter",
                "mongodb.document",
                "ignoreExisting",
                "mongodb.lookupType",
                "mongodb.ignoreExtract",
                "mongodb.ignoreLookupFilter",
                "mongodb.update",
                "mongodb.upsert",
              ],
              "label": "How would you like the records imported?",
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports all regular import driven forms should load a rest export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "blobKeyPath": Object {
        "fieldId": "blobKeyPath",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "deleteAfterImport": Object {
        "fieldId": "deleteAfterImport",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "formView": Object {
        "fieldId": "formView",
      },
      "http.blobMethod": Object {
        "fieldId": "http.blobMethod",
      },
      "http.body": Object {
        "fieldId": "http.body",
      },
      "http.bodyCreate": Object {
        "arrayIndex": 1,
        "connectionId": [Function],
        "defaultValue": [Function],
        "helpKey": "import.http.body",
        "id": "http.bodyCreate",
        "label": "HTTP request body",
        "refreshOptionsOnChangesTo": Array [
          "http.lookups",
        ],
        "type": "httprequestbody",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.bodyUpdate": Object {
        "arrayIndex": 0,
        "connectionId": [Function],
        "defaultValue": [Function],
        "helpKey": "import.http.body",
        "id": "http.bodyUpdate",
        "label": "HTTP request body",
        "refreshOptionsOnChangesTo": Array [
          "http.lookups",
        ],
        "type": "httprequestbody",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.compositeMethodCreate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.method",
        "id": "http.compositeMethodCreate",
        "label": "HTTP method",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "POST",
                "value": "POST",
              },
              Object {
                "label": "PUT",
                "value": "PUT",
              },
              Object {
                "label": "PATCH",
                "value": "PATCH",
              },
            ],
          },
        ],
        "required": true,
        "type": "select",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.compositeMethodUpdate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.method",
        "id": "http.compositeMethodUpdate",
        "label": "HTTP method",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "POST",
                "value": "POST",
              },
              Object {
                "label": "PUT",
                "value": "PUT",
              },
              Object {
                "label": "PATCH",
                "value": "PATCH",
              },
            ],
          },
        ],
        "required": true,
        "type": "select",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.compositeType": Object {
        "fieldId": "http.compositeType",
      },
      "http.existingExtract": Object {
        "fieldId": "http.existingExtract",
      },
      "http.existingLookupName": Object {
        "fieldId": "http.existingLookupName",
      },
      "http.existingLookupType": Object {
        "fieldId": "http.existingLookupType",
      },
      "http.headers": Object {
        "fieldId": "http.headers",
      },
      "http.ignoreExistingExtract": Object {
        "fieldId": "http.ignoreExistingExtract",
      },
      "http.ignoreExistingLookupName": Object {
        "fieldId": "http.ignoreExistingLookupName",
      },
      "http.ignoreNewExtract": Object {
        "fieldId": "http.ignoreNewExtract",
      },
      "http.ignoreNewLookupName": Object {
        "fieldId": "http.ignoreNewLookupName",
      },
      "http.lookupType": Object {
        "fieldId": "http.lookupType",
      },
      "http.lookups": Object {
        "fieldId": "http.lookups",
        "visible": false,
      },
      "http.method": Object {
        "fieldId": "http.method",
      },
      "http.newLookupType": Object {
        "fieldId": "http.newLookupType",
      },
      "http.relativeURI": Object {
        "fieldId": "http.relativeURI",
        "required": true,
      },
      "http.relativeURICreate": Object {
        "arrayIndex": 1,
        "connectionId": [Function],
        "defaultValue": [Function],
        "helpKey": "import.http.relativeURI",
        "id": "http.relativeURICreate",
        "label": "Relative URI",
        "required": true,
        "type": "relativeuri",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.relativeURIUpdate": Object {
        "arrayIndex": 0,
        "connectionId": [Function],
        "defaultValue": [Function],
        "helpKey": "import.http.relativeURI",
        "id": "http.relativeURIUpdate",
        "label": "Relative URI",
        "required": true,
        "type": "relativeuri",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.response.resourceIdPath": Object {
        "fieldId": "http.response.resourceIdPath",
      },
      "http.response.successPath": Object {
        "fieldId": "http.response.successPath",
      },
      "http.response.successValues": Object {
        "fieldId": "http.response.successValues",
      },
      "http.responseIdPathCreate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.resourceIdPath",
        "id": "http.responseIdPathCreate",
        "label": "Path to id field in HTTP response body",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.responseIdPathUpdate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.resourceIdPath",
        "id": "http.responseIdPathUpdate",
        "label": "Path to id field in HTTP response body",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.successPathCreate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.successPath",
        "id": "http.successPathCreate",
        "label": "Path to success field in HTTP response body",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.successPathUpdate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.successPath",
        "id": "http.successPathUpdate",
        "label": "Path to success field in HTTP response body",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.successValuesCreate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.successValues",
        "id": "http.successValuesCreate",
        "label": "Success values",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "createandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "http.successValuesUpdate": Object {
        "defaultValue": [Function],
        "helpKey": "import.http.response.successValues",
        "id": "http.successValuesUpdate",
        "label": "Success values",
        "type": "text",
        "visibleWhenAll": Array [
          Object {
            "field": "http.compositeType",
            "is": Array [
              "createandupdate",
              "updateandignore",
            ],
          },
          Object {
            "field": "http.method",
            "is": Array [
              "COMPOSITE",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "inputMode": Object {
        "defaultValue": [Function],
        "id": "inputMode",
        "label": "Input mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "type": "mode",
        "visible": false,
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "sampleData": Object {
        "fieldId": "sampleData",
        "visibleWhenAll": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
          Object {
            "field": "http.method",
            "isNot": Array [
              "DELETE",
            ],
          },
        ],
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "inputMode",
                "dataMappings",
                "formView",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "collapsed": true,
                  "fields": Array [
                    "http.compositeMethodCreate",
                    "http.relativeURICreate",
                    "http.bodyCreate",
                  ],
                  "label": "Create new records",
                },
                Object {
                  "collapsed": true,
                  "fields": Array [
                    "http.existingLookupType",
                    "http.ignoreExistingExtract",
                    "http.ignoreExistingLookupName",
                  ],
                  "label": "Identify existing records",
                },
                Object {
                  "collapsed": true,
                  "fields": Array [
                    "http.newLookupType",
                    "http.ignoreNewExtract",
                    "http.ignoreNewLookupName",
                  ],
                  "label": "Identify existing records",
                },
                Object {
                  "collapsed": true,
                  "fields": Array [
                    "http.lookupType",
                    "http.existingExtract",
                    "http.existingLookupName",
                  ],
                  "label": "Identify existing records",
                },
                Object {
                  "collapsed": true,
                  "fields": Array [
                    "http.compositeMethodUpdate",
                    "http.relativeURIUpdate",
                    "http.bodyUpdate",
                  ],
                  "label": "Update existing records",
                },
              ],
              "fields": Array [
                "http.method",
                "http.blobMethod",
                "http.compositeType",
                "http.relativeURI",
                "http.headers",
                "http.lookups",
                "http.body",
              ],
              "label": [Function],
              "type": "collapse",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "sampleData",
              ],
              "label": "Do you have a sample destination record?",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "collapsed": true,
                  "fields": Array [
                    "http.responseIdPathCreate",
                    "http.successPathCreate",
                    "http.successValuesCreate",
                  ],
                  "label": "Create new records",
                },
                Object {
                  "collapsed": true,
                  "fields": Array [
                    "http.responseIdPathUpdate",
                    "http.successPathUpdate",
                    "http.successValuesUpdate",
                  ],
                  "label": "Update existing records",
                },
              ],
              "fields": Array [
                "http.response.resourceIdPath",
                "http.response.successPath",
                "http.response.successValues",
              ],
              "label": "Non-standard API response patterns",
              "type": "collapse",
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "blobKeyPath",
                "advancedSettings",
                "deleteAfterImport",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports all regular import driven forms should load a s3 export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": Array [
      Object {
        "id": "saveandclosegroup",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "isNot": Array [
              "filedefinition",
              "fixed",
              "delimited/edifact",
            ],
          },
        ],
      },
      Object {
        "id": "savefiledefinitions",
        "visibleWhen": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "filedefinition",
              "fixed",
              "delimited/edifact",
            ],
          },
        ],
      },
    ],
    "fieldMap": Object {
      "blobKeyPath": Object {
        "fieldId": "blobKeyPath",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "deleteAfterImport": Object {
        "fieldId": "deleteAfterImport",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "file.backupPath": Object {
        "fieldId": "file.backupPath",
      },
      "file.batchSize": Object {
        "fieldId": "file.batchSize",
        "visibleWhenAll": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "file.csv": Object {
        "fieldId": "file.csv",
      },
      "file.encoding": Object {
        "fieldId": "file.encoding",
      },
      "file.fileName": Object {
        "fieldId": "file.fileName",
        "required": true,
      },
      "file.json.body": Object {
        "id": "file.json.body",
        "label": "JSON document",
        "refreshOptionsOnChangesTo": Array [
          "file.type",
        ],
        "type": "httprequestbody",
        "visibleWhenAll": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "json",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "file.lookups": Object {
        "fieldId": "file.lookups",
        "visible": false,
      },
      "file.xlsx.includeHeader": Object {
        "fieldId": "file.xlsx.includeHeader",
      },
      "file.xml.body": Object {
        "connectionId": [Function],
        "helpKey": "import.ftp.XMLDocument",
        "id": "file.xml.body",
        "label": "XML document",
        "refreshOptionsOnChangesTo": Array [
          "file.type",
        ],
        "required": true,
        "type": "httprequestbody",
        "visibleWhenAll": Array [
          Object {
            "field": "file.type",
            "is": Array [
              "xml",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "fileAdvanced": Object {
        "formId": "fileAdvanced",
      },
      "fileAdvancedSettings": Object {
        "formId": "fileAdvancedSettings",
        "visibleWhenAll": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "fileApiIdentifier": Object {
        "formId": "fileApiIdentifier",
      },
      "fileType": Object {
        "formId": "fileType",
        "visibleWhenAll": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "ftp.blobFileName": Object {
        "fieldId": "ftp.blobFileName",
      },
      "ftp.blobInProgressFileName": Object {
        "fieldId": "ftp.blobInProgressFileName",
      },
      "ftp.blobUseTempFile": Object {
        "fieldId": "ftp.blobUseTempFile",
      },
      "ftp.directoryPath": Object {
        "fieldId": "ftp.directoryPath",
      },
      "ftp.inProgressFileName": Object {
        "fieldId": "ftp.inProgressFileName",
      },
      "ftp.useTempFile": Object {
        "fieldId": "ftp.useTempFile",
      },
      "http.relativeURI": Object {
        "fieldId": "http.relativeURI",
        "helpKey": [Function],
        "label": [Function],
        "required": true,
        "type": "uri",
      },
      "inputMode": Object {
        "defaultDisabled": [Function],
        "defaultValue": [Function],
        "helpKey": "import.inputMode",
        "id": "inputMode",
        "label": "Generate files from records:",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Yes",
                "value": "records",
              },
              Object {
                "label": "No",
                "value": "blob",
              },
            ],
          },
        ],
        "type": "mode",
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "s3.bucket": Object {
        "fieldId": "s3.bucket",
      },
      "s3.region": Object {
        "fieldId": "s3.region",
      },
      "s3.serverSideEncryptionType": Object {
        "fieldId": "s3.serverSideEncryptionType",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "traceKeyTemplate": Object {
        "fieldId": "traceKeyTemplate",
      },
      "uploadFile": Object {
        "fieldId": "uploadFile",
        "helpKey": "import.uploadFile",
        "placeholder": "Sample file (that would be generated)",
        "refreshOptionsOnChangesTo": Array [
          "file.type",
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "dataMappings",
                "inputMode",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "containers": Array [
                Object {
                  "fields": Array [
                    "file.csv",
                  ],
                },
              ],
              "fields": Array [
                "fileType",
                "uploadFile",
                "file.xlsx.includeHeader",
              ],
              "label": "How would you like to generate files?",
              "type": "indent",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "s3.region",
                "s3.bucket",
                "file.fileName",
                "file.xml.body",
                "file.json.body",
                "file.lookups",
                "s3.serverSideEncryptionType",
              ],
              "label": "Where would you like the files transferred?",
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "fileAdvanced",
                "file.backupPath",
                "file.encoding",
                "blobKeyPath",
                "fileAdvancedSettings",
                "deleteAfterImport",
                "traceKeyTemplate",
                "fileApiIdentifier",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports all regular import driven forms should load a wrapper export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "sampleData": Object {
        "fieldId": "sampleData",
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "wrapper.configuration": Object {
        "fieldId": "wrapper.configuration",
      },
      "wrapper.function": Object {
        "fieldId": "wrapper.function",
      },
      "wrapper.lookups": Object {
        "fieldId": "wrapper.lookups",
        "visible": false,
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "dataMappings",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "wrapper.function",
                "wrapper.configuration",
                "wrapper.lookups",
              ],
              "label": "How would you like the records imported?",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "sampleData",
              ],
              "label": "Do you have a sample destination record?",
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports should load a new export form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "application": Object {
        "appType": "import",
        "defaultValue": "",
        "helpKey": "application",
        "id": "application",
        "isLoggable": true,
        "label": "Application",
        "name": "application",
        "placeholder": "Choose application or start typing to browse 50+ applications",
        "required": true,
        "type": "selectapplication",
        "validWhen": Object {
          "isNot": Object {
            "message": "Please select an application",
            "values": Array [
              "",
            ],
          },
        },
      },
      "connection": Object {
        "allowEdit": true,
        "allowNew": true,
        "defaultValue": "",
        "id": "connection",
        "label": "Connection",
        "name": "/_connectionId",
        "refreshOptionsOnChangesTo": Array [
          "application",
        ],
        "required": true,
        "resourceType": "connections",
        "type": "selectresource",
        "validWhen": Object {
          "isNot": Object {
            "message": "Please select a connection",
            "values": Array [
              "",
            ],
          },
        },
        "visibleWhen": Array [
          Object {
            "field": "application",
            "id": "hasApp",
            "isNot": Array [
              "",
            ],
          },
        ],
      },
      "description": Object {
        "defaultValue": "",
        "id": "description",
        "label": "Description",
        "maxRows": 5,
        "multiline": true,
        "name": "/description",
        "type": "text",
        "visibleWhen": Array [
          Object {
            "field": "application",
            "id": "hasApp",
            "isNot": Array [
              "",
            ],
          },
        ],
      },
      "name": Object {
        "defaultValue": "",
        "id": "name",
        "label": "Name",
        "name": "/name",
        "refreshOptionsOnChangesTo": Array [
          "application",
        ],
        "required": true,
        "type": "text",
        "visibleWhen": Array [
          Object {
            "field": "application",
            "id": "hasApp",
            "isNot": Array [
              "",
            ],
          },
        ],
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "fields": Array [
            "application",
            "connection",
            "name",
            "description",
          ],
        },
      ],
      "type": "box",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports should load financialforce form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "apiType": Object {
        "id": "apiType",
        "label": [Function],
        "type": "labeltitle",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "blobKeyPath": Object {
        "fieldId": "blobKeyPath",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "deleteAfterImport": Object {
        "fieldId": "deleteAfterImport",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "ignoreExisting": Object {
        "fieldId": "ignoreExisting",
        "label": "Ignore existing records",
        "visibleWhen": Array [
          Object {
            "field": "salesforce.operation",
            "is": Array [
              "insert",
            ],
          },
          Object {
            "field": "salesforce.compositeOperation",
            "is": Array [
              "insert",
            ],
          },
        ],
      },
      "ignoreMissing": Object {
        "fieldId": "ignoreMissing",
        "label": "Ignore missing records",
        "visibleWhen": Array [
          Object {
            "field": "salesforce.operation",
            "is": Array [
              "update",
              "delete",
            ],
          },
          Object {
            "field": "salesforce.compositeOperation",
            "is": Array [
              "update",
            ],
          },
        ],
      },
      "inputMode": Object {
        "defaultValue": [Function],
        "id": "inputMode",
        "label": "Input mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "type": "mode",
        "visible": false,
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "salesforce.api": Object {
        "fieldId": "salesforce.api",
      },
      "salesforce.attachment.contentType": Object {
        "fieldId": "salesforce.attachment.contentType",
      },
      "salesforce.attachment.description": Object {
        "fieldId": "salesforce.attachment.description",
      },
      "salesforce.attachment.id": Object {
        "fieldId": "salesforce.attachment.id",
      },
      "salesforce.attachment.isPrivate": Object {
        "fieldId": "salesforce.attachment.isPrivate",
      },
      "salesforce.attachment.name": Object {
        "fieldId": "salesforce.attachment.name",
      },
      "salesforce.attachment.parentId": Object {
        "fieldId": "salesforce.attachment.parentId",
      },
      "salesforce.blobContentVersionOperation": Object {
        "fieldId": "salesforce.blobContentVersionOperation",
      },
      "salesforce.blobOperation": Object {
        "fieldId": "salesforce.blobOperation",
      },
      "salesforce.blobsObjectType": Object {
        "fieldId": "salesforce.blobsObjectType",
      },
      "salesforce.compositeOperation": Object {
        "fieldId": "salesforce.compositeOperation",
      },
      "salesforce.contentVersion.contentDocumentId": Object {
        "fieldId": "salesforce.contentVersion.contentDocumentId",
      },
      "salesforce.contentVersion.contentLocation": Object {
        "fieldId": "salesforce.contentVersion.contentLocation",
      },
      "salesforce.contentVersion.pathOnClient": Object {
        "fieldId": "salesforce.contentVersion.pathOnClient",
      },
      "salesforce.contentVersion.tagCsv": Object {
        "fieldId": "salesforce.contentVersion.tagCsv",
      },
      "salesforce.contentVersion.title": Object {
        "fieldId": "salesforce.contentVersion.title",
      },
      "salesforce.document.contentType": Object {
        "fieldId": "salesforce.document.contentType",
      },
      "salesforce.document.developerName": Object {
        "fieldId": "salesforce.document.developerName",
      },
      "salesforce.document.folderId": Object {
        "fieldId": "salesforce.document.folderId",
      },
      "salesforce.document.id": Object {
        "fieldId": "salesforce.document.id",
      },
      "salesforce.document.isInternalUseOnly": Object {
        "fieldId": "salesforce.document.isInternalUseOnly",
      },
      "salesforce.document.isPublic": Object {
        "fieldId": "salesforce.document.isPublic",
      },
      "salesforce.document.name": Object {
        "fieldId": "salesforce.document.name",
      },
      "salesforce.idLookup.extract": Object {
        "fieldId": "salesforce.idLookup.extract",
      },
      "salesforce.idLookup.whereClause": Object {
        "fieldId": "salesforce.idLookup.whereClause",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
      },
      "salesforce.lookups": Object {
        "fieldId": "salesforce.lookups",
        "visible": false,
      },
      "salesforce.operation": Object {
        "fieldId": "salesforce.operation",
      },
      "salesforce.sObjectType": Object {
        "fieldId": "salesforce.sObjectType",
      },
      "salesforce.upsert.externalIdField": Object {
        "fieldId": "salesforce.upsert.externalIdField",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
      },
      "salesforce.upsertpicklistvalues.fullName": Object {
        "fieldId": "salesforce.upsertpicklistvalues.fullName",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "inputMode",
                "dataMappings",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "salesforce.api",
                "salesforce.lookups",
                "salesforce.sObjectType",
                "salesforce.operation",
                "salesforce.blobsObjectType",
                "salesforce.blobOperation",
                "salesforce.blobContentVersionOperation",
                "salesforce.attachment.id",
                "salesforce.attachment.name",
                "salesforce.attachment.parentId",
                "salesforce.attachment.contentType",
                "salesforce.attachment.description",
                "salesforce.attachment.isPrivate",
                "salesforce.document.id",
                "salesforce.document.name",
                "salesforce.document.folderId",
                "salesforce.document.contentType",
                "salesforce.document.developerName",
                "salesforce.document.isInternalUseOnly",
                "salesforce.document.isPublic",
                "salesforce.contentVersion.contentDocumentId",
                "salesforce.contentVersion.title",
                "salesforce.contentVersion.pathOnClient",
                "salesforce.contentVersion.tagCsv",
                "salesforce.contentVersion.contentLocation",
                "salesforce.compositeOperation",
                "ignoreExisting",
                "ignoreMissing",
                "salesforce.idLookup.whereClause",
                "salesforce.upsert.externalIdField",
                "salesforce.idLookup.extract",
              ],
              "label": "How would you like the records imported?",
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "blobKeyPath",
                "advancedSettings",
                "deleteAfterImport",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports should load netsuite distributed form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "apiIdentifier": Object {
        "fieldId": "apiIdentifier",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "blobKeyPath": Object {
        "fieldId": "blobKeyPath",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "dataURITemplate": Object {
        "fieldId": "dataURITemplate",
        "visibleWhenA": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "deleteAfterImport": Object {
        "fieldId": "deleteAfterImport",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "distributed": Object {
        "fieldId": "distributed",
      },
      "idLockTemplate": Object {
        "fieldId": "idLockTemplate",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "ignoreExisting": Object {
        "fieldId": "ignoreExisting",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite_da.operation",
            "is": Array [
              "add",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "ignoreMissing": Object {
        "fieldId": "ignoreMissing",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite_da.operation",
            "is": Array [
              "update",
              "delete",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "inputMode": Object {
        "defaultValue": [Function],
        "id": "inputMode",
        "label": "Input mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "type": "mode",
        "visible": false,
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "netsuite.file.fileType": Object {
        "fieldId": "netsuite.file.fileType",
      },
      "netsuite.file.folder": Object {
        "fieldId": "netsuite.file.folder",
      },
      "netsuite.file.internalId": Object {
        "fieldId": "netsuite.file.internalId",
      },
      "netsuite.file.name": Object {
        "fieldId": "netsuite.file.name",
      },
      "netsuite.operation": Object {
        "fieldId": "netsuite.operation",
      },
      "netsuite_da.batchSize": Object {
        "fieldId": "netsuite_da.batchSize",
      },
      "netsuite_da.internalIdLookup.expression": Object {
        "fieldId": "netsuite_da.internalIdLookup.expression",
        "refreshOptionsOnChangesTo": Array [
          "netsuite_da.recordType",
        ],
      },
      "netsuite_da.mapping": Object {
        "fieldId": "netsuite_da.mapping",
      },
      "netsuite_da.operation": Object {
        "fieldId": "netsuite_da.operation",
        "refreshOptionsOnChangesTo": Array [
          "netsuite_da.recordType",
        ],
      },
      "netsuite_da.recordType": Object {
        "fieldId": "netsuite_da.recordType",
      },
      "netsuite_da.restletVersion": Object {
        "fieldId": "netsuite_da.restletVersion",
      },
      "netsuite_da.subrecords": Object {
        "fieldId": "netsuite_da.subrecords",
        "refreshOptionsOnChangesTo": Array [
          "netsuite_da.recordType",
        ],
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "traceKeyTemplate": Object {
        "fieldId": "traceKeyTemplate",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "inputMode",
                "dataMappings",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "distributed",
                "netsuite_da.recordType",
                "netsuite_da.mapping",
                "netsuite_da.subrecords",
                "netsuite_da.operation",
                "netsuite.operation",
                "ignoreExisting",
                "ignoreMissing",
                "netsuite_da.internalIdLookup.expression",
                "netsuite.file.internalId",
                "netsuite.file.name",
                "netsuite.file.fileType",
                "netsuite.file.folder",
              ],
              "label": [Function],
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "netsuite_da.restletVersion",
                "blobKeyPath",
                "idLockTemplate",
                "dataURITemplate",
                "netsuite_da.batchSize",
                "traceKeyTemplate",
                "apiIdentifier",
                "deleteAfterImport",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports should load netsuite form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "apiIdentifier": Object {
        "fieldId": "apiIdentifier",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "blobKeyPath": Object {
        "fieldId": "blobKeyPath",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "dataURITemplate": Object {
        "fieldId": "dataURITemplate",
        "visibleWhenA": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "deleteAfterImport": Object {
        "fieldId": "deleteAfterImport",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "distributed": Object {
        "fieldId": "distributed",
      },
      "idLockTemplate": Object {
        "fieldId": "idLockTemplate",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "ignoreExisting": Object {
        "fieldId": "ignoreExisting",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite_da.operation",
            "is": Array [
              "add",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "ignoreMissing": Object {
        "fieldId": "ignoreMissing",
        "visibleWhenAll": Array [
          Object {
            "field": "netsuite_da.operation",
            "is": Array [
              "update",
              "delete",
            ],
          },
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "inputMode": Object {
        "defaultValue": [Function],
        "id": "inputMode",
        "label": "Input mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "type": "mode",
        "visible": false,
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "netsuite.file.fileType": Object {
        "fieldId": "netsuite.file.fileType",
      },
      "netsuite.file.folder": Object {
        "fieldId": "netsuite.file.folder",
      },
      "netsuite.file.internalId": Object {
        "fieldId": "netsuite.file.internalId",
      },
      "netsuite.file.name": Object {
        "fieldId": "netsuite.file.name",
      },
      "netsuite.operation": Object {
        "fieldId": "netsuite.operation",
      },
      "netsuite_da.batchSize": Object {
        "fieldId": "netsuite_da.batchSize",
      },
      "netsuite_da.internalIdLookup.expression": Object {
        "fieldId": "netsuite_da.internalIdLookup.expression",
        "refreshOptionsOnChangesTo": Array [
          "netsuite_da.recordType",
        ],
      },
      "netsuite_da.mapping": Object {
        "fieldId": "netsuite_da.mapping",
      },
      "netsuite_da.operation": Object {
        "fieldId": "netsuite_da.operation",
        "refreshOptionsOnChangesTo": Array [
          "netsuite_da.recordType",
        ],
      },
      "netsuite_da.recordType": Object {
        "fieldId": "netsuite_da.recordType",
      },
      "netsuite_da.restletVersion": Object {
        "fieldId": "netsuite_da.restletVersion",
      },
      "netsuite_da.subrecords": Object {
        "fieldId": "netsuite_da.subrecords",
        "refreshOptionsOnChangesTo": Array [
          "netsuite_da.recordType",
        ],
      },
      "settings": Object {
        "fieldId": "settings",
      },
      "traceKeyTemplate": Object {
        "fieldId": "traceKeyTemplate",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "inputMode",
                "dataMappings",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "distributed",
                "netsuite_da.recordType",
                "netsuite_da.mapping",
                "netsuite_da.subrecords",
                "netsuite_da.operation",
                "netsuite.operation",
                "ignoreExisting",
                "ignoreMissing",
                "netsuite_da.internalIdLookup.expression",
                "netsuite.file.internalId",
                "netsuite.file.name",
                "netsuite.file.fileType",
                "netsuite.file.folder",
              ],
              "label": [Function],
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "netsuite_da.restletVersion",
                "blobKeyPath",
                "idLockTemplate",
                "dataURITemplate",
                "netsuite_da.batchSize",
                "traceKeyTemplate",
                "apiIdentifier",
                "deleteAfterImport",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports should load salesforce form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "apiType": Object {
        "id": "apiType",
        "label": [Function],
        "type": "labeltitle",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "records",
            ],
          },
        ],
      },
      "blobKeyPath": Object {
        "fieldId": "blobKeyPath",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "deleteAfterImport": Object {
        "fieldId": "deleteAfterImport",
        "visibleWhen": Array [
          Object {
            "field": "inputMode",
            "is": Array [
              "blob",
            ],
          },
        ],
      },
      "ignoreExisting": Object {
        "fieldId": "ignoreExisting",
        "label": "Ignore existing records",
        "visibleWhen": Array [
          Object {
            "field": "salesforce.operation",
            "is": Array [
              "insert",
            ],
          },
          Object {
            "field": "salesforce.compositeOperation",
            "is": Array [
              "insert",
            ],
          },
        ],
      },
      "ignoreMissing": Object {
        "fieldId": "ignoreMissing",
        "label": "Ignore missing records",
        "visibleWhen": Array [
          Object {
            "field": "salesforce.operation",
            "is": Array [
              "update",
              "delete",
            ],
          },
          Object {
            "field": "salesforce.compositeOperation",
            "is": Array [
              "update",
            ],
          },
        ],
      },
      "inputMode": Object {
        "defaultValue": [Function],
        "id": "inputMode",
        "label": "Input mode",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Records",
                "value": "records",
              },
              Object {
                "label": "Blob keys",
                "value": "blob",
              },
            ],
          },
        ],
        "type": "mode",
        "visible": false,
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "salesforce.api": Object {
        "fieldId": "salesforce.api",
      },
      "salesforce.attachment.contentType": Object {
        "fieldId": "salesforce.attachment.contentType",
      },
      "salesforce.attachment.description": Object {
        "fieldId": "salesforce.attachment.description",
      },
      "salesforce.attachment.id": Object {
        "fieldId": "salesforce.attachment.id",
      },
      "salesforce.attachment.isPrivate": Object {
        "fieldId": "salesforce.attachment.isPrivate",
      },
      "salesforce.attachment.name": Object {
        "fieldId": "salesforce.attachment.name",
      },
      "salesforce.attachment.parentId": Object {
        "fieldId": "salesforce.attachment.parentId",
      },
      "salesforce.blobContentVersionOperation": Object {
        "fieldId": "salesforce.blobContentVersionOperation",
      },
      "salesforce.blobOperation": Object {
        "fieldId": "salesforce.blobOperation",
      },
      "salesforce.blobsObjectType": Object {
        "fieldId": "salesforce.blobsObjectType",
      },
      "salesforce.compositeOperation": Object {
        "fieldId": "salesforce.compositeOperation",
      },
      "salesforce.contentVersion.contentDocumentId": Object {
        "fieldId": "salesforce.contentVersion.contentDocumentId",
      },
      "salesforce.contentVersion.contentLocation": Object {
        "fieldId": "salesforce.contentVersion.contentLocation",
      },
      "salesforce.contentVersion.pathOnClient": Object {
        "fieldId": "salesforce.contentVersion.pathOnClient",
      },
      "salesforce.contentVersion.tagCsv": Object {
        "fieldId": "salesforce.contentVersion.tagCsv",
      },
      "salesforce.contentVersion.title": Object {
        "fieldId": "salesforce.contentVersion.title",
      },
      "salesforce.document.contentType": Object {
        "fieldId": "salesforce.document.contentType",
      },
      "salesforce.document.developerName": Object {
        "fieldId": "salesforce.document.developerName",
      },
      "salesforce.document.folderId": Object {
        "fieldId": "salesforce.document.folderId",
      },
      "salesforce.document.id": Object {
        "fieldId": "salesforce.document.id",
      },
      "salesforce.document.isInternalUseOnly": Object {
        "fieldId": "salesforce.document.isInternalUseOnly",
      },
      "salesforce.document.isPublic": Object {
        "fieldId": "salesforce.document.isPublic",
      },
      "salesforce.document.name": Object {
        "fieldId": "salesforce.document.name",
      },
      "salesforce.idLookup.extract": Object {
        "fieldId": "salesforce.idLookup.extract",
      },
      "salesforce.idLookup.whereClause": Object {
        "fieldId": "salesforce.idLookup.whereClause",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
      },
      "salesforce.lookups": Object {
        "fieldId": "salesforce.lookups",
        "visible": false,
      },
      "salesforce.operation": Object {
        "fieldId": "salesforce.operation",
      },
      "salesforce.sObjectType": Object {
        "fieldId": "salesforce.sObjectType",
      },
      "salesforce.upsert.externalIdField": Object {
        "fieldId": "salesforce.upsert.externalIdField",
        "refreshOptionsOnChangesTo": Array [
          "salesforce.sObjectType",
        ],
      },
      "salesforce.upsertpicklistvalues.fullName": Object {
        "fieldId": "salesforce.upsertpicklistvalues.fullName",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "inputMode",
                "dataMappings",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "salesforce.api",
                "salesforce.lookups",
                "salesforce.sObjectType",
                "salesforce.operation",
                "salesforce.blobsObjectType",
                "salesforce.blobOperation",
                "salesforce.blobContentVersionOperation",
                "salesforce.attachment.id",
                "salesforce.attachment.name",
                "salesforce.attachment.parentId",
                "salesforce.attachment.contentType",
                "salesforce.attachment.description",
                "salesforce.attachment.isPrivate",
                "salesforce.document.id",
                "salesforce.document.name",
                "salesforce.document.folderId",
                "salesforce.document.contentType",
                "salesforce.document.developerName",
                "salesforce.document.isInternalUseOnly",
                "salesforce.document.isPublic",
                "salesforce.contentVersion.contentDocumentId",
                "salesforce.contentVersion.title",
                "salesforce.contentVersion.pathOnClient",
                "salesforce.contentVersion.tagCsv",
                "salesforce.contentVersion.contentLocation",
                "salesforce.compositeOperation",
                "ignoreExisting",
                "ignoreMissing",
                "salesforce.idLookup.whereClause",
                "salesforce.upsert.externalIdField",
                "salesforce.idLookup.extract",
              ],
              "label": "How would you like the records imported?",
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "blobKeyPath",
                "advancedSettings",
                "deleteAfterImport",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports should load snowflake form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "modelMetadata": Object {
        "fieldId": "modelMetadata",
        "visible": false,
      },
      "rdbms.bulkInsert.batchSize": Object {
        "id": "rdbms.bulkInsert.batchSize",
        "label": "Batch size",
        "type": "text",
        "validWhen": Object {
          "matchesRegEx": Object {
            "message": "Only numbers allowed",
            "pattern": "^[\\\\d]+$",
          },
        },
        "visibleWhen": Array [
          Object {
            "field": "rdbms.queryType",
            "is": Array [
              "BULK INSERT",
            ],
          },
        ],
      },
      "rdbms.bulkInsert.tableName": Object {
        "fieldId": "rdbms.bulkInsert.tableName",
      },
      "rdbms.lookups": Object {
        "fieldId": "rdbms.lookups",
        "visible": false,
      },
      "rdbms.query": Object {
        "arrayIndex": 0,
        "defaultValue": [Function],
        "id": "rdbms.query",
        "label": "SQL query",
        "required": true,
        "type": "sqlquerybuilder",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.queryType",
            "is": Array [
              "INSERT",
              "MERGE",
              "COPY",
            ],
          },
        ],
      },
      "rdbms.queryType": Object {
        "defaultValue": [Function],
        "helpKey": "snowflake.import.rdbms.queryType",
        "id": "rdbms.queryType",
        "label": "Choose type",
        "options": Array [
          Object {
            "items": Array [
              Object {
                "label": "Use bulk insert SQL query",
                "value": "BULK INSERT",
              },
              Object {
                "label": "Use SQL query once per record",
                "value": "INSERT",
              },
              Object {
                "label": "Use SQL query once per page of records",
                "value": "MERGE",
              },
              Object {
                "label": "Use SQL query on first page only",
                "value": "COPY",
              },
            ],
          },
        ],
        "required": true,
        "type": "radiogroup",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "dataMappings",
                "modelMetadata",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.queryType",
                "rdbms.lookups",
                "rdbms.bulkInsert.tableName",
                "rdbms.query",
              ],
              "label": "How would you like the records imported?",
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.bulkInsert.batchSize",
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form imports should load sql form 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advancedSettings": Object {
        "formId": "advancedSettings",
      },
      "common": Object {
        "formId": "common",
      },
      "dataMappings": Object {
        "formId": "dataMappings",
      },
      "ignoreExisting": Object {
        "fieldId": "ignoreExisting",
        "label": "Ignore existing records",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.queryType",
            "is": Array [
              "INSERT",
            ],
          },
        ],
      },
      "ignoreMissing": Object {
        "fieldId": "ignoreMissing",
        "label": "Ignore missing records",
        "visibleWhen": Array [
          Object {
            "field": "rdbms.queryType",
            "is": Array [
              "UPDATE",
            ],
          },
        ],
      },
      "mockResponseSection": Object {
        "formId": "mockResponseSection",
      },
      "modelMetadata": Object {
        "fieldId": "modelMetadata",
        "visible": false,
      },
      "rdbms.ignoreExistingExtract": Object {
        "fieldId": "rdbms.ignoreExistingExtract",
        "showSuggestionsWithoutHandlebar": true,
        "type": "textwithflowsuggestion",
      },
      "rdbms.ignoreExistingLookupName": Object {
        "fieldId": "rdbms.ignoreExistingLookupName",
      },
      "rdbms.ignoreMissingExtract": Object {
        "fieldId": "rdbms.ignoreMissingExtract",
        "showSuggestionsWithoutHandlebar": true,
        "type": "textwithflowsuggestion",
      },
      "rdbms.ignoreMissingLookupName": Object {
        "fieldId": "rdbms.ignoreMissingLookupName",
      },
      "rdbms.lookupType": Object {
        "fieldId": "rdbms.lookupType",
      },
      "rdbms.lookups": Object {
        "fieldId": "rdbms.lookups",
        "visible": false,
      },
      "rdbms.query1": Object {
        "defaultValue": [Function],
        "fieldId": "rdbms.query1",
        "required": true,
      },
      "rdbms.query2": Object {
        "defaultValue": [Function],
        "fieldId": "rdbms.query2",
        "required": true,
      },
      "rdbms.queryInsert": Object {
        "defaultValue": [Function],
        "fieldId": "rdbms.queryInsert",
        "required": true,
      },
      "rdbms.queryType": Object {
        "fieldId": "rdbms.queryType",
      },
      "rdbms.queryUpdate": Object {
        "defaultValue": [Function],
        "fieldId": "rdbms.queryUpdate",
        "required": true,
      },
      "rdbms.updateExtract": Object {
        "fieldId": "rdbms.updateExtract",
        "showSuggestionsWithoutHandlebar": true,
        "type": "textwithflowsuggestion",
      },
      "rdbms.updateLookupName": Object {
        "fieldId": "rdbms.updateLookupName",
      },
      "settings": Object {
        "fieldId": "settings",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": true,
              "fields": Array [
                "common",
                "dataMappings",
                "modelMetadata",
              ],
              "label": "General",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "rdbms.queryType",
                "ignoreExisting",
                "ignoreMissing",
                "rdbms.lookupType",
                "rdbms.updateLookupName",
                "rdbms.ignoreExistingExtract",
                "rdbms.ignoreMissingExtract",
                "rdbms.ignoreExistingLookupName",
                "rdbms.ignoreMissingLookupName",
                "rdbms.updateExtract",
                "rdbms.lookups",
                "rdbms.query1",
                "rdbms.query2",
                "rdbms.queryInsert",
                "rdbms.queryUpdate",
              ],
              "label": "How would you like the records imported?",
            },
            Object {
              "actionId": "mockResponse",
              "collapsed": true,
              "fields": Array [
                "mockResponseSection",
              ],
              "label": "Mock response",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "advancedSettings",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
        Object {
          "fields": Array [
            "settings",
          ],
        },
      ],
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": [Function],
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType accesstokens 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_apiIds": Object {
        "fieldId": "_apiIds",
      },
      "_connectionIds": Object {
        "fieldId": "_connectionIds",
      },
      "_exportIds": Object {
        "fieldId": "_exportIds",
      },
      "_importIds": Object {
        "fieldId": "_importIds",
      },
      "autoPurgeAt": Object {
        "fieldId": "autoPurgeAt",
      },
      "description": Object {
        "fieldId": "description",
      },
      "fullAccess": Object {
        "fieldId": "fullAccess",
      },
      "name": Object {
        "fieldId": "name",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "collapsed": true,
          "fields": Array [
            "name",
            "description",
            "autoPurgeAt",
          ],
          "label": "General",
        },
        Object {
          "collapsed": true,
          "fields": Array [
            "fullAccess",
            "_connectionIds",
            "_exportIds",
            "_importIds",
            "_apiIds",
          ],
          "label": "Token permissions",
        },
      ],
      "type": "collapse",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType agents 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "description": Object {
        "defaultValue": [Function],
        "id": "description",
        "label": "Description",
        "maxRows": 5,
        "multiline": true,
        "name": "/description",
        "type": "text",
      },
      "name": Object {
        "defaultValue": [Function],
        "id": "name",
        "label": "Name",
        "name": "/name",
        "required": true,
        "type": "text",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "fields": Array [
            "name",
            "description",
          ],
        },
      ],
      "type": "box",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": undefined,
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType apis 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "apiIdentifier": Object {
        "defaultValue": [Function],
        "helpKey": "apiIdentifier",
        "id": "apiIdentifier",
        "label": "Invoke",
        "type": "apiidentifier",
        "visible": [Function],
      },
      "description": Object {
        "defaultValue": [Function],
        "id": "description",
        "label": "Description",
        "maxRows": 5,
        "multiline": true,
        "type": "text",
      },
      "enableShipworksAuthentication": Object {
        "defaultValue": [Function],
        "id": "enableShipworksAuthentication",
        "label": "Enable ShipWorks authentication",
        "type": "checkbox",
      },
      "name": Object {
        "defaultValue": [Function],
        "id": "name",
        "label": "Name",
        "required": true,
        "type": "text",
      },
      "script": Object {
        "defaultValue": [Function],
        "hookStage": "handleRequest",
        "hookType": "script",
        "id": "script",
        "label": "Script",
        "required": true,
        "type": "hook",
      },
      "shipworks.password": Object {
        "defaultValue": "",
        "description": "Note: for security reasons this field must always be re-entered.",
        "id": "shipworks.password",
        "inputType": "password",
        "label": "Password",
        "requiredWhen": Array [
          Object {
            "field": "enableShipworksAuthentication",
            "is": Array [
              true,
            ],
          },
        ],
        "type": "text",
        "visibleWhen": Array [
          Object {
            "field": "enableShipworksAuthentication",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "shipworks.username": Object {
        "id": "shipworks.username",
        "label": "Username",
        "requiredWhen": Array [
          Object {
            "field": "enableShipworksAuthentication",
            "is": Array [
              true,
            ],
          },
        ],
        "type": "text",
        "visibleWhen": Array [
          Object {
            "field": "enableShipworksAuthentication",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "shipworksApiIdentifier": Object {
        "defaultValue": [Function],
        "helpKey": "apiIdentifier",
        "id": "shipworksApiIdentifier",
        "label": "Invoke",
        "type": "apiidentifier",
        "visible": [Function],
        "visibleWhen": [Function],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "collapsed": false,
          "fields": Array [
            "name",
            "description",
            "script",
            "apiIdentifier",
          ],
          "label": "General",
        },
        Object {
          "collapsed": true,
          "fields": Array [
            "enableShipworksAuthentication",
            "shipworks.username",
            "shipworks.password",
            "shipworksApiIdentifier",
          ],
          "label": "Advanced",
        },
      ],
      "type": "collapse",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType asyncHelpers 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "http.result._exportId": Object {
        "fieldId": "http.result._exportId",
      },
      "http.status._exportId": Object {
        "fieldId": "http.status._exportId",
      },
      "http.status.doneValues": Object {
        "fieldId": "http.status.doneValues",
      },
      "http.status.doneWithoutDataValues": Object {
        "fieldId": "http.status.doneWithoutDataValues",
      },
      "http.status.errorValues": Object {
        "fieldId": "http.status.errorValues",
      },
      "http.status.inProgressValues": Object {
        "fieldId": "http.status.inProgressValues",
      },
      "http.status.initialWaitTime": Object {
        "fieldId": "http.status.initialWaitTime",
      },
      "http.status.pollWaitTime": Object {
        "fieldId": "http.status.pollWaitTime",
      },
      "http.status.statusPath": Object {
        "fieldId": "http.status.statusPath",
      },
      "http.submit.resourcePath": Object {
        "fieldId": "http.submit.resourcePath",
      },
      "http.submit.sameAsStatus": Object {
        "fieldId": "http.submit.sameAsStatus",
      },
      "http.submit.transform": Object {
        "fieldId": "http.submit.transform",
      },
      "name": Object {
        "fieldId": "name",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "collapsed": false,
          "fields": Array [
            "name",
          ],
          "label": "General",
        },
        Object {
          "collapsed": false,
          "fields": Array [
            "http.status._exportId",
            "http.status.initialWaitTime",
            "http.status.pollWaitTime",
            "http.status.statusPath",
            "http.status.inProgressValues",
            "http.status.doneValues",
            "http.status.doneWithoutDataValues",
            "http.status.errorValues",
          ],
          "label": "Configure how to check status",
        },
        Object {
          "collapsed": false,
          "fields": Array [
            "http.result._exportId",
          ],
          "label": "Configure how to get the results",
        },
        Object {
          "collapsed": false,
          "fields": Array [
            "http.submit.sameAsStatus",
            "http.submit.resourcePath",
            "http.submit.transform",
          ],
          "label": "Configure how to process initial submission",
        },
      ],
      "type": "collapse",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType connectorLicenses 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "email": Object {
        "fieldId": "email",
      },
      "expires": Object {
        "fieldId": "expires",
      },
      "opts": Object {
        "fieldId": "opts",
      },
      "sandbox": Object {
        "fieldId": "sandbox",
      },
      "trialEndDate": Object {
        "fieldId": "trialEndDate",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "collapsed": true,
          "fields": Array [
            "email",
            "trialEndDate",
            "expires",
            "sandbox",
            "opts",
          ],
          "label": "General",
        },
      ],
      "type": "collapse",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType connectors 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "_integrationId": Object {
        "fieldId": "_integrationId",
      },
      "_stackId": Object {
        "fieldId": "_stackId",
      },
      "_trialLicenseId": Object {
        "fieldId": "_trialLicenseId",
        "omitWhenHidden": true,
        "requiredWhen": Array [
          Object {
            "field": "trialEnabled",
            "is": Array [
              true,
            ],
          },
        ],
        "visibleWhen": Array [
          Object {
            "field": "trialEnabled",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "applications": Object {
        "fieldId": "applications",
      },
      "contactEmail": Object {
        "fieldId": "contactEmail",
      },
      "description": Object {
        "fieldId": "description",
      },
      "editions": Object {
        "fieldId": "editions",
      },
      "framework": Object {
        "fieldId": "framework",
      },
      "installerFunction": Object {
        "fieldId": "installerFunction",
      },
      "name": Object {
        "fieldId": "name",
      },
      "trialEnabled": Object {
        "fieldId": "trialEnabled",
      },
      "trialPeriod": Object {
        "fieldId": "trialPeriod",
        "omitWhenHidden": true,
        "requiredWhen": Array [
          Object {
            "field": "trialEnabled",
            "is": Array [
              true,
            ],
          },
        ],
        "visibleWhen": Array [
          Object {
            "field": "trialEnabled",
            "is": Array [
              true,
            ],
          },
        ],
      },
      "uninstallerFunction": Object {
        "fieldId": "uninstallerFunction",
      },
      "updateFunction": Object {
        "fieldId": "updateFunction",
      },
      "websiteURL": Object {
        "fieldId": "websiteURL",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "collapsed": true,
          "fields": Array [
            "name",
            "description",
            "applications",
            "_integrationId",
            "contactEmail",
            "websiteURL",
            "_stackId",
            "installerFunction",
            "uninstallerFunction",
            "updateFunction",
            "framework",
          ],
          "label": "General",
        },
        Object {
          "collapsed": true,
          "fields": Array [
            "trialEnabled",
            "trialPeriod",
            "_trialLicenseId",
          ],
          "label": "Trials",
        },
      ],
      "type": "collapse",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType iClients 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "amazonmws.accessKeyId": Object {
        "fieldId": "amazonmws.accessKeyId",
      },
      "amazonmws.secretKey": Object {
        "fieldId": "amazonmws.secretKey",
      },
      "name": Object {
        "fieldId": "name",
      },
      "oauth2.auth.uri": Object {
        "fieldId": "oauth2.auth.uri",
      },
      "oauth2.callbackURL": Object {
        "fieldId": "oauth2.callbackURL",
      },
      "oauth2.clientCredentialsLocation": Object {
        "fieldId": "oauth2.clientCredentialsLocation",
      },
      "oauth2.clientId": Object {
        "fieldId": "oauth2.clientId",
      },
      "oauth2.clientSecret": Object {
        "fieldId": "oauth2.clientSecret",
      },
      "oauth2.failPath": Object {
        "fieldId": "oauth2.failPath",
      },
      "oauth2.failStatusCode": Object {
        "fieldId": "oauth2.failStatusCode",
      },
      "oauth2.failValues": Object {
        "fieldId": "oauth2.failValues",
      },
      "oauth2.grantType": Object {
        "fieldId": "oauth2.grantType",
      },
      "oauth2.revoke.uri": Object {
        "fieldId": "oauth2.revoke.uri",
      },
      "oauth2.token.uri": Object {
        "fieldId": "oauth2.token.uri",
      },
      "oauth2.validDomainNames": Object {
        "fieldId": "oauth2.validDomainNames",
      },
      "oauthOverrides": Object {
        "formId": "oauthOverrides",
      },
      "oauthToken": Object {
        "formId": "oauthToken",
      },
      "provider": Object {
        "fieldId": "provider",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "collapsed": true,
          "fields": Array [
            "name",
            "provider",
          ],
          "label": "General",
        },
        Object {
          "collapsed": true,
          "fields": Array [
            "oauth2.clientId",
            "oauth2.clientSecret",
            "amazonmws.accessKeyId",
            "amazonmws.secretKey",
            "oauth2.grantType",
            "oauth2.clientCredentialsLocation",
            "oauth2.auth.uri",
            "oauth2.callbackURL",
            "oauth2.token.uri",
            "oauth2.revoke.uri",
            "oauth2.validDomainNames",
          ],
          "label": "Configure OAuth 2.0",
        },
        Object {
          "collapsed": true,
          "fields": Array [
            "oauthOverrides",
          ],
          "label": "OAuth 2.0 overrides",
        },
        Object {
          "collapsed": true,
          "fields": Array [
            "oauthToken",
          ],
          "label": "Configure token auth",
        },
        Object {
          "collapsed": true,
          "fields": Array [
            "oauth2.failStatusCode",
            "oauth2.failPath",
            "oauth2.failValues",
          ],
          "label": "Non-standard API response patterns",
        },
      ],
      "type": "collapse",
    },
  },
  "init": [Function],
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType integrations 1`] = `
Object {
  "fieldMeta": Object {
    "actions": Array [
      Object {
        "id": "saveandcreateflow",
      },
    ],
    "fieldMap": Object {
      "description": Object {
        "fieldId": "description",
      },
      "name": Object {
        "fieldId": "name",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "fields": Array [
            "name",
            "description",
          ],
        },
      ],
      "type": "box",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": undefined,
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType pageGenerator 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "application": Object {
        "appType": "export",
        "defaultValue": [Function],
        "helpKey": "application",
        "id": "application",
        "isLoggable": true,
        "label": "Application",
        "name": "application",
        "placeholder": "Choose application or start typing to browse 50+ applications",
        "required": true,
        "type": "selectapplication",
      },
      "connection": Object {
        "allowEdit": true,
        "allowNew": true,
        "checkPermissions": true,
        "defaultValue": [Function],
        "id": "connection",
        "label": "Connection",
        "name": "/_connectionId",
        "refreshOptionsOnChangesTo": Array [
          "application",
        ],
        "required": true,
        "resourceType": "connections",
        "type": "selectresource",
        "visibleWhenAll": Array [
          Object {
            "field": "application",
            "isNot": Array [
              "",
              "aha",
              "errorception",
              "helpscout",
              "mailparser-io",
              "sapariba",
              "travis",
              "travis-org",
              "webhook",
            ],
          },
          Object {
            "field": "type",
            "isNot": Array [
              "webhook",
              "",
            ],
          },
        ],
      },
      "existingExport": Object {
        "allowEdit": true,
        "defaultValue": "",
        "flowResourceType": "pg",
        "id": "exportId",
        "label": "Would you like to use an existing export?",
        "name": "exportId",
        "refreshOptionsOnChangesTo": Array [
          "application",
          "connection",
          "type",
          "exportId",
        ],
        "required": false,
        "resourceType": "exports",
        "type": "selectflowresource",
        "visibleWhenAll": Array [
          Object {
            "field": "application",
            "isNot": Array [
              "",
            ],
          },
        ],
      },
      "type": Object {
        "dataTest": "exportType",
        "defaultValue": "",
        "id": "type",
        "label": "What would you like to do?",
        "mode": "source",
        "name": "type",
        "placeholder": "Please select",
        "refreshOptionsOnChangesTo": Array [
          "application",
        ],
        "required": true,
        "type": "selectresourcetype",
        "visibleWhenAll": Array [
          Object {
            "field": "application",
            "isNot": Array [
              "",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "fields": Array [
            "application",
            "type",
            "connection",
            "existingExport",
          ],
        },
      ],
      "type": "box",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType pageProcessor 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "application": Object {
        "defaultValue": [Function],
        "helpKey": "application",
        "id": "application",
        "isLoggable": true,
        "label": "Application",
        "name": "application",
        "placeholder": "Choose application or start typing to browse 50+ applications",
        "refreshOptionsOnChangesTo": Array [
          "resourceType",
        ],
        "required": true,
        "type": "selectapplication",
      },
      "connection": Object {
        "allowEdit": true,
        "allowNew": true,
        "checkPermissions": true,
        "defaultValue": [Function],
        "id": "connection",
        "label": "Connection",
        "name": "/_connectionId",
        "refreshOptionsOnChangesTo": Array [
          "application",
        ],
        "required": true,
        "resourceType": "connections",
        "type": "selectresource",
        "visibleWhenAll": Array [
          Object {
            "field": "application",
            "isNot": Array [
              "",
            ],
          },
          Object {
            "field": "resourceType",
            "isNot": Array [
              "",
            ],
          },
        ],
      },
      "existingExport": Object {
        "allowEdit": true,
        "defaultValue": "",
        "flowResourceType": "pp",
        "id": "exportId",
        "label": "Would you like to use an existing lookup?",
        "name": "exportId",
        "refreshOptionsOnChangesTo": Array [
          "application",
          "connection",
          "resourceType",
          "exportId",
        ],
        "required": false,
        "resourceType": "exports",
        "type": "selectflowresource",
        "visibleWhenAll": Array [
          Object {
            "field": "application",
            "isNot": Array [
              "",
            ],
          },
          Object {
            "field": "connection",
            "isNot": Array [
              "",
            ],
          },
          Object {
            "field": "resourceType",
            "is": Array [
              "lookupRecords",
              "lookupFiles",
            ],
          },
        ],
      },
      "existingImport": Object {
        "allowEdit": true,
        "defaultValue": "",
        "flowResourceType": "pp",
        "id": "importId",
        "label": "Would you like to use an existing import?",
        "name": "importId",
        "refreshOptionsOnChangesTo": Array [
          "application",
          "connection",
          "resourceType",
          "importId",
        ],
        "required": false,
        "resourceType": "imports",
        "type": "selectflowresource",
        "visibleWhenAll": Array [
          Object {
            "field": "application",
            "isNot": Array [
              "",
            ],
          },
          Object {
            "field": "connection",
            "isNot": Array [
              "",
            ],
          },
          Object {
            "field": "resourceType",
            "is": Array [
              "importRecords",
              "transferFiles",
            ],
          },
        ],
      },
      "resourceType": Object {
        "dataTest": "exportType",
        "id": "resourceType",
        "label": "What would you like to do?",
        "mode": "destination",
        "name": "resourceType",
        "placeholder": "Please select",
        "refreshOptionsOnChangesTo": Array [
          "application",
        ],
        "required": true,
        "type": "selectresourcetype",
        "visibleWhenAll": Array [
          Object {
            "field": "application",
            "isNot": Array [
              "",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "fields": Array [
            "application",
            "resourceType",
            "connection",
            "existingImport",
            "existingExport",
          ],
        },
      ],
      "type": "box",
    },
  },
  "init": [Function],
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType scripts 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "content": Object {
        "fieldId": "content",
        "refreshOptionsOnChangesTo": Array [
          "insertFunction",
        ],
      },
      "description": Object {
        "fieldId": "description",
      },
      "insertFunction": Object {
        "fieldId": "insertFunction",
      },
      "name": Object {
        "fieldId": "name",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "collapsed": false,
          "fields": Array [
            "name",
            "description",
          ],
          "label": "General",
        },
        Object {
          "collapsed": false,
          "fields": Array [
            "insertFunction",
            "content",
          ],
          "label": "Script content",
        },
      ],
      "type": "collapse",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": undefined,
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType stacks 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "lambda.accessKeyId": Object {
        "fieldId": "lambda.accessKeyId",
      },
      "lambda.awsRegion": Object {
        "fieldId": "lambda.awsRegion",
      },
      "lambda.functionName": Object {
        "fieldId": "lambda.functionName",
      },
      "lambda.language": Object {
        "fieldId": "lambda.language",
      },
      "lambda.secretAccessKey": Object {
        "fieldId": "lambda.secretAccessKey",
      },
      "name": Object {
        "fieldId": "name",
      },
      "server.hostURI": Object {
        "fieldId": "server.hostURI",
      },
      "type": Object {
        "fieldId": "type",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "fields": Array [
            "name",
            "type",
            "server.hostURI",
            "lambda.accessKeyId",
            "lambda.secretAccessKey",
            "lambda.awsRegion",
            "lambda.functionName",
            "lambda.language",
          ],
        },
      ],
      "type": "box",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct form other resource types resouceType templates 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "applications": Object {
        "fieldId": "applications",
      },
      "contactEmail": Object {
        "fieldId": "contactEmail",
      },
      "description": Object {
        "fieldId": "description",
      },
      "name": Object {
        "fieldId": "name",
      },
      "websiteURL": Object {
        "fieldId": "websiteURL",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "fields": Array [
            "name",
            "description",
            "applications",
            "contactEmail",
            "websiteURL",
          ],
        },
      ],
      "type": "box",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct suitescript forms connections should load a ftp 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "ftp.authKey": Object {
        "fieldId": "ftp.authKey",
      },
      "ftp.hostURI": Object {
        "fieldId": "ftp.hostURI",
      },
      "ftp.password": Object {
        "fieldId": "ftp.password",
      },
      "ftp.usePassiveMode": Object {
        "fieldId": "ftp.usePassiveMode",
      },
      "ftp.useSFTP": Object {
        "fieldId": "ftp.useSFTP",
      },
      "ftp.userDirectoryIsRoot": Object {
        "fieldId": "ftp.userDirectoryIsRoot",
      },
      "ftp.username": Object {
        "fieldId": "ftp.username",
      },
      "name": Object {
        "fieldId": "name",
      },
    },
    "layout": Object {
      "fields": Array [
        "name",
        "ftp.hostURI",
        "ftp.useSFTP",
        "ftp.username",
        "ftp.password",
        "ftp.authKey",
        "ftp.usePassiveMode",
        "ftp.userDirectoryIsRoot",
      ],
      "type": "collapse",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct suitescript forms connections should load a salesforce 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "name": Object {
        "fieldId": "name",
      },
      "salesforce.password": Object {
        "fieldId": "salesforce.password",
      },
      "salesforce.sandbox": Object {
        "fieldId": "salesforce.sandbox",
      },
      "salesforce.securityKey": Object {
        "fieldId": "salesforce.securityKey",
      },
      "salesforce.username": Object {
        "fieldId": "salesforce.username",
      },
    },
    "layout": Object {
      "fields": Array [
        "name",
        "salesforce.username",
        "salesforce.password",
        "salesforce.securityKey",
        "salesforce.sandbox",
      ],
      "type": "collapse",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": undefined,
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct suitescript forms exports netsuite should load a realtime 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "export.netsuite.realtime.checkboxField": Object {
        "fieldId": "export.netsuite.realtime.checkboxField",
      },
      "export.netsuite.realtime.executionContext": Object {
        "fieldId": "export.netsuite.realtime.executionContext",
      },
      "export.netsuite.realtime.executionType": Object {
        "fieldId": "export.netsuite.realtime.executionType",
      },
      "export.netsuite.realtime.exportType": Object {
        "fieldId": "export.netsuite.realtime.exportType",
      },
      "export.netsuite.realtime.recordType": Object {
        "fieldId": "export.netsuite.realtime.recordType",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "fields": Array [
                "export.netsuite.realtime.recordType",
                "export.netsuite.realtime.executionContext",
                "export.netsuite.realtime.executionType",
                "export.netsuite.realtime.exportType",
                "export.netsuite.realtime.checkboxField",
              ],
              "label": "Configure real-time export",
            },
          ],
          "type": "collapse",
        },
      ],
      "type": "column",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct suitescript forms exports netsuite should load a restlet 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "export.delta.dateField": Object {
        "fieldId": "export.delta.dateField",
      },
      "export.netsuite.restlet.recordType": Object {
        "fieldId": "export.netsuite.restlet.recordType",
      },
      "export.netsuite.restlet.searchId": Object {
        "fieldId": "export.netsuite.restlet.searchId",
      },
      "export.once.booleanField": Object {
        "fieldId": "export.once.booleanField",
      },
      "export.type": Object {
        "fieldId": "export.type",
      },
      "export.valueDelta.exportedField": Object {
        "fieldId": "export.valueDelta.exportedField",
      },
      "export.valueDelta.pendingField": Object {
        "fieldId": "export.valueDelta.pendingField",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "fields": Array [
                "export.netsuite.restlet.recordType",
                "export.netsuite.restlet.searchId",
              ],
              "label": "What would you like to export?",
            },
            Object {
              "fields": Array [
                "export.type",
                "export.delta.dateField",
                "export.once.booleanField",
                "export.valueDelta.exportedField",
                "export.valueDelta.pendingField",
              ],
              "label": "Configure export type",
            },
          ],
          "type": "collapse",
        },
      ],
      "type": "column",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct suitescript forms exports other exports should load a fileCabinet 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "export.file.csv": Object {
        "fieldId": "export.file.csv",
      },
      "export.fileCabinet.folderHierarchy": Object {
        "fieldId": "export.fileCabinet.folderHierarchy",
      },
      "uploadFile": Object {
        "fieldId": "uploadFile",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "fields": Array [
                "uploadFile",
                "export.file.csv",
              ],
              "label": "How would you like to parse files?",
            },
            Object {
              "fields": Array [
                "export.fileCabinet.folderHierarchy",
              ],
              "label": "Where would you like to transfer from?",
            },
          ],
          "type": "collapse",
        },
      ],
      "type": "column",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct suitescript forms exports other exports should load a newegg 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "export.newegg.method": Object {
        "fieldId": "export.newegg.method",
      },
      "export.newegg.methodConfig": Object {
        "fieldId": "export.newegg.methodConfig",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "fields": Array [
                "export.newegg.method",
                "export.newegg.methodConfig",
              ],
              "label": "What would you like to export?",
            },
          ],
          "type": "collapse",
        },
      ],
      "type": "column",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": undefined,
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct suitescript forms exports salesforce should load a realtime 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "advanced": Object {
        "fieldId": "advanced",
      },
      "export.salesforce.errorMessageField.id": Object {
        "fieldId": "export.salesforce.errorMessageField.id",
      },
      "export.salesforce.netsuiteIdField": Object {
        "fieldId": "export.salesforce.netsuiteIdField",
      },
      "export.salesforce.sObjectType": Object {
        "fieldId": "export.salesforce.sObjectType",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": false,
              "fields": Array [
                "export.salesforce.sObjectType",
              ],
              "label": "Configure real-time export",
            },
            Object {
              "collapsed": false,
              "fields": Array [
                "export.salesforce.errorMessageField.id",
                "export.salesforce.netsuiteIdField",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
      ],
      "type": "column",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": undefined,
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct suitescript forms exports salesforce should load a scheduled 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "export.salesforce.booleanField": Object {
        "fieldId": "export.salesforce.booleanField",
      },
      "export.salesforce.exportType": Object {
        "fieldId": "export.salesforce.exportType",
      },
      "export.salesforce.soql": Object {
        "fieldId": "export.salesforce.soql",
      },
      "export.salesforce.soqlErrorMessageField.id": Object {
        "fieldId": "export.salesforce.soqlErrorMessageField.id",
        "refreshOptionsOnChangesTo": Array [
          "export.salesforce.soql",
        ],
        "visibleWhenAll": Array [
          Object {
            "field": "export.salesforce.soql",
            "isNot": Array [
              "",
            ],
          },
          Object {
            "field": "export.salesforce.exportType",
            "isNot": Array [
              "delta",
            ],
          },
        ],
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "fields": Array [
                "export.salesforce.soql",
              ],
              "label": "What would you like to export?",
            },
            Object {
              "fields": Array [
                "export.salesforce.exportType",
                "export.salesforce.booleanField",
              ],
              "label": "Configure export type",
            },
            Object {
              "fields": Array [
                "export.salesforce.soqlErrorMessageField.id",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
      ],
      "type": "column",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct suitescript forms imports should load a ftp 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "import.file.csv.columnDelimiter": Object {
        "fieldId": "import.file.csv.columnDelimiter",
      },
      "import.file.csv.includeHeader": Object {
        "fieldId": "import.file.csv.includeHeader",
      },
      "import.ftp.directoryPath": Object {
        "fieldId": "import.ftp.directoryPath",
      },
      "import.ftp.fileExtension": Object {
        "fieldId": "import.ftp.fileExtension",
      },
      "import.ftp.fileName": Object {
        "fieldId": "import.ftp.fileName",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "collapsed": false,
              "fields": Array [
                "import.ftp.fileName",
                "import.ftp.fileExtension",
                "import.file.csv.columnDelimiter",
                "import.file.csv.includeHeader",
              ],
              "label": "How would you like to generate files?",
            },
            Object {
              "collapsed": false,
              "fields": Array [
                "import.ftp.directoryPath",
              ],
              "label": "Where would you like the files transferred?",
            },
          ],
          "type": "collapse",
        },
      ],
      "type": "column",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": undefined,
  "validationHandler": undefined,
}
`;

exports[`getResourceFromAssets load correct suitescript forms imports should load a salesforce 1`] = `
Object {
  "fieldMeta": Object {
    "actions": undefined,
    "fieldMap": Object {
      "import.salesforce.operation": Object {
        "fieldId": "import.salesforce.operation",
      },
      "import.salesforce.sObjectType": Object {
        "fieldId": "import.salesforce.sObjectType",
      },
      "import.salesforce.salesforceIdField": Object {
        "fieldId": "import.salesforce.salesforceIdField",
      },
      "import.salesforce.update.externalField": Object {
        "fieldId": "import.salesforce.update.externalField",
      },
      "import.salesforce.update.jsField": Object {
        "fieldId": "import.salesforce.update.jsField",
      },
      "import.salesforce.upsert.externalField": Object {
        "fieldId": "import.salesforce.upsert.externalField",
      },
      "import.salesforce.upsert.jsField": Object {
        "fieldId": "import.salesforce.upsert.jsField",
      },
      "importData": Object {
        "fieldId": "importData",
      },
    },
    "layout": Object {
      "containers": Array [
        Object {
          "containers": Array [
            Object {
              "fields": Array [
                "import.salesforce.sObjectType",
                "import.salesforce.operation",
                "import.salesforce.update.jsField",
                "import.salesforce.update.externalField",
                "import.salesforce.upsert.jsField",
                "import.salesforce.upsert.externalField",
              ],
              "label": "How would you like the records imported?",
              "type": "collapse",
            },
            Object {
              "collapsed": true,
              "fields": Array [
                "import.salesforce.salesforceIdField",
              ],
              "label": "Advanced",
            },
          ],
          "type": "collapse",
        },
      ],
      "type": "column",
    },
  },
  "init": undefined,
  "optionsHandler": [Function],
  "preSave": [Function],
  "validationHandler": undefined,
}
`;
