export default {
  // #region common
  connectionType: {
    type: 'radiogroup',
    helpKey: 'connection.type',
    name: '/type',
    id: 'connectionType',
    label: 'Type',
    defaultValue: '{{type}}',
    options: [
      {
        items: [
          { label: 'Netsuite', value: 'netsuite' },
          { label: 'Salesforce', value: 'salesforce' },
          { label: 'Ftp', value: 'ftp' },
          { label: 'S3', value: 's3' },
          { label: 'Rest', value: 'rest' },
          { label: 'Wrapper', value: 'wrapper' },
          { label: 'Http', value: 'http' },
          { label: 'Rdbms', value: 'rdbms' },
          { label: 'Mongodb', value: 'mongodb' },
          { label: 'As2', value: 'as2' },
        ],
      },
    ],
  },
  connectionName: {
    type: 'text',
    helpKey: 'connection.name',
    name: '/name',
    id: 'connectionName',
    label: 'Name',
    defaultValue: '{{name}}',
  },
  connectionAssistant: {
    type: 'radiogroup',
    helpKey: 'connection.assistant',
    name: '/assistant',
    id: 'connectionAssistant',
    label: 'Assistant',
    defaultValue: '{{assistant}}',
    options: [
      {
        items: [
          { label: '3dcart', value: '3dcart' },
          { label: 'Accelo', value: 'accelo' },
          { label: 'Adp', value: 'adp' },
          { label: 'Amazonaws', value: 'amazonaws' },
          { label: 'Amazonmws', value: 'amazonmws' },
          { label: 'Anaplan', value: 'anaplan' },
          { label: 'Ariba', value: 'ariba' },
          { label: 'Asana', value: 'asana' },
          { label: 'Atera', value: 'atera' },
          { label: 'Authorize.net', value: 'authorize.net' },
          { label: 'Avalara', value: 'avalara' },
          { label: 'Banking', value: 'banking' },
          { label: 'Bigcommerce', value: 'bigcommerce' },
          { label: 'Bill.com', value: 'bill.com' },
          { label: 'Box', value: 'box' },
          { label: 'Braintree', value: 'braintree' },
          { label: 'Campaignmonitor', value: 'campaignmonitor' },
          { label: 'Certify', value: 'certify' },
          { label: 'Chargebee', value: 'chargebee' },
          { label: 'Chargify', value: 'chargify' },
          { label: 'Clover', value: 'clover' },
          { label: 'Dcl', value: 'dcl' },
          { label: 'Desk', value: 'desk' },
          { label: 'Dnb', value: 'dnb' },
          { label: 'Docusign', value: 'docusign' },
          { label: 'Doubleclick', value: 'doubleclick' },
          { label: 'Dropbox', value: 'dropbox' },
          { label: 'Ebay', value: 'ebay' },
          { label: 'Ebay-xml', value: 'ebay-xml' },
          { label: 'Eloquent', value: 'eloquent' },
          { label: 'Etsy', value: 'etsy' },
          { label: 'Eventbrite', value: 'eventbrite' },
          { label: 'Exacterp', value: 'exacterp' },
          { label: 'Expensify', value: 'expensify' },
          { label: 'Facebookads', value: 'facebookads' },
          { label: 'Fieldaware', value: 'fieldaware' },
          { label: 'Freshbooks', value: 'freshbooks' },
          { label: 'Freshdesk', value: 'freshdesk' },
          { label: 'Ftp', value: 'ftp' },
          { label: 'Github', value: 'github' },
          { label: 'Gooddata', value: 'gooddata' },
          { label: 'Google', value: 'google' },
          { label: 'Googleanalytics', value: 'googleanalytics' },
          { label: 'Googlecontacts', value: 'googlecontacts' },
          { label: 'Googledrive', value: 'googledrive' },
          { label: 'Googlemail', value: 'googlemail' },
          { label: 'Googlesheets', value: 'googlesheets' },
          { label: 'Googleshopping', value: 'googleshopping' },
          { label: 'Harvest', value: 'harvest' },
          { label: 'Hoovers', value: 'hoovers' },
          { label: 'Hubspot', value: 'hubspot' },
          { label: 'Hybris', value: 'hybris' },
          { label: 'Insightly', value: 'insightly' },
          { label: 'Integratorio', value: 'integratorio' },
          { label: 'Jet', value: 'jet' },
          { label: 'Jira', value: 'jira' },
          { label: 'Jobvite', value: 'jobvite' },
          { label: 'Lightspeed', value: 'lightspeed' },
          { label: 'Linkedin', value: 'linkedin' },
          { label: 'Liquidplanner', value: 'liquidplanner' },
          { label: 'Magento', value: 'magento' },
          { label: 'Mailchimp', value: 'mailchimp' },
          { label: 'Mediaocean', value: 'mediaocean' },
          { label: 'Namely', value: 'namely' },
          { label: 'Netsuite', value: 'netsuite' },
          { label: 'Newegg', value: 'newegg' },
          { label: 'Newrelic', value: 'newrelic' },
          { label: 'Okta', value: 'okta' },
          { label: 'Openair', value: 'openair' },
          { label: 'Osn', value: 'osn' },
          { label: 'Other', value: 'other' },
          { label: 'Paychex', value: 'paychex' },
          { label: 'Paylocity', value: 'paylocity' },
          { label: 'Paypal', value: 'paypal' },
          { label: 'Pulseway', value: 'pulseway' },
          { label: 'Quickbooks', value: 'quickbooks' },
          { label: 'Recurly', value: 'recurly' },
          { label: 'Replicon', value: 'replicon' },
          { label: 'S3', value: 's3' },
          { label: 'Sageone', value: 'sageone' },
          { label: 'Salesforce', value: 'salesforce' },
          { label: 'Servicenow', value: 'servicenow' },
          { label: 'Shiphawk', value: 'shiphawk' },
          { label: 'Shipstation', value: 'shipstation' },
          { label: 'Shipwire', value: 'shipwire' },
          { label: 'Shopify', value: 'shopify' },
          { label: 'Skubana', value: 'skubana' },
          { label: 'Slack', value: 'slack' },
          { label: 'Smartsheet', value: 'smartsheet' },
          { label: 'Snapfulfil', value: 'snapfulfil' },
          { label: 'Splunk', value: 'splunk' },
          { label: 'Spreecommerce', value: 'spreecommerce' },
          { label: 'Squareup', value: 'squareup' },
          { label: 'Steelbrick', value: 'steelbrick' },
          { label: 'Stripe', value: 'stripe' },
          { label: 'Surveymonkey', value: 'surveymonkey' },
          { label: 'Svb', value: 'svb' },
          { label: 'Tableau', value: 'tableau' },
          { label: 'Tesco', value: 'tesco' },
          { label: 'Travis', value: 'travis' },
          { label: 'Tsheets', value: 'tsheets' },
          { label: 'Twilio', value: 'twilio' },
          { label: 'Walmart', value: 'walmart' },
          { label: 'Wiser', value: 'wiser' },
          { label: 'Woocommerce', value: 'woocommerce' },
          { label: 'Wrike', value: 'wrike' },
          { label: 'Xcart', value: 'xcart' },
          { label: 'Yahoo', value: 'yahoo' },
          { label: 'Yammer', value: 'yammer' },
          { label: 'Zendesk', value: 'zendesk' },
          { label: 'Zoho', value: 'zoho' },
          { label: 'Zuora', value: 'zuora' },
          { label: 'Coupa', value: 'coupa' },
          { label: 'Taxjar', value: 'taxjar' },
          { label: 'Quip', value: 'quip' },
          { label: 'Allbound', value: 'allbound' },
          { label: 'Zohocrm', value: 'zohocrm' },
          { label: 'Zohodesk', value: 'zohodesk' },
          { label: 'Microsoftoffice365', value: 'microsoftoffice365' },
          { label: 'Microsoftdynamics365', value: 'microsoftdynamics365' },
          { label: 'Pitneybowes', value: 'pitneybowes' },
          { label: 'Mysql', value: 'mysql' },
          { label: 'Postgresql', value: 'postgresql' },
          { label: 'Mssql', value: 'mssql' },
          { label: 'Greenhouse', value: 'greenhouse' },
          { label: 'Shippo', value: 'shippo' },
          { label: 'Gusto', value: 'gusto' },
          { label: 'Easypost', value: 'easypost' },
          { label: 'Segment', value: 'segment' },
          { label: 'Zohobooks', value: 'zohobooks' },
          {
            label: 'Microsoftbusinesscentral',
            value: 'microsoftbusinesscentral',
          },
          {
            label: 'Microsoftoutlookcalendar',
            value: 'microsoftoutlookcalendar',
          },
          { label: 'Microsoftoutlookmail', value: 'microsoftoutlookmail' },
          {
            label: 'Microsoftoutlookcontacts',
            value: 'microsoftoutlookcontacts',
          },
          { label: 'Microsoftonenote', value: 'microsoftonenote' },
          { label: 'Wish', value: 'wish' },
          { label: 'Pdffiller', value: 'pdffiller' },
          { label: 'Signnow', value: 'signnow' },
          { label: 'Acton', value: 'acton' },
          { label: 'Acumatica', value: 'acumatica' },
          { label: 'Mongodb', value: 'mongodb' },
          { label: 'Zohomail', value: 'zohomail' },
          { label: 'Zoom', value: 'zoom' },
          { label: 'Myobessentials', value: 'myobessentials' },
          { label: 'Nimble', value: 'nimble' },
          { label: 'Bronto', value: 'bronto' },
          { label: 'Strata', value: 'strata' },
          { label: 'Returnly', value: 'returnly' },
          { label: 'Activecampaign', value: 'activecampaign' },
          { label: 'Klaviyo', value: 'klaviyo' },
          { label: 'Postmark', value: 'postmark' },
          { label: 'Powerbi', value: 'powerbi' },
          { label: 'Procurify', value: 'procurify' },
          { label: 'Mailgun', value: 'mailgun' },
          { label: 'Zimbra', value: 'zimbra' },
          { label: 'Merchantesolutions', value: 'merchantesolutions' },
          { label: 'Aptrinsic', value: 'aptrinsic' },
          { label: 'Cardknox', value: 'cardknox' },
          { label: 'Skuvault', value: 'skuvault' },
          { label: 'Nextag', value: 'nextag' },
          { label: 'Concur', value: 'concur' },
          { label: 'Oandav20fxtrade', value: 'oandav20fxtrade' },
          { label: 'Oandaexchangerates', value: 'oandaexchangerates' },
          { label: 'Spreecommerce', value: 'spreecommerce' },
          { label: 'Tophatter', value: 'tophatter' },
          { label: 'Concurv4', value: 'concurv4' },
          { label: 'Sugarcrm', value: 'sugarcrm' },
          { label: 'Marketo', value: 'marketo' },
          { label: 'Grms', value: 'grms' },
          { label: 'Retailops', value: 'retailops' },
          { label: 'Sharepoint', value: 'sharepoint' },
          { label: 'Parseur', value: 'parseur' },
          { label: 'Authorize.net', value: 'authorize.net' },
          { label: 'Firstdata', value: 'firstdata' },
          { label: 'Propack', value: 'propack' },
          { label: 'Outreach', value: 'outreach' },
          { label: 'Ramplogistics', value: 'ramplogistics' },
          { label: 'Constantcontactv3', value: 'constantcontactv3' },
          { label: 'Constantcontactv2', value: 'constantcontactv2' },
          { label: 'Concurall', value: 'concurall' },
          { label: 'Dunandbradstreet', value: 'dunandbradstreet' },
          { label: 'Trinet', value: 'trinet' },
          { label: 'Pacejet', value: 'pacejet' },
          { label: 'Solidcommercxe', value: 'solidcommercxe' },
          { label: 'Intercom', value: 'intercom' },
          { label: 'Bamboohr', value: 'bamboohr' },
        ],
      },
    ],
  },
  // #endregion common
  // #region rdbms
  connectionRdbmsHost: {
    type: 'text',
    helpKey: 'connection.rdbms.host',
    name: '/rdbms/host',
    id: 'connectionRdbmsHost',
    label: 'Rdbms host',
    defaultValue: '{{rdbms.host}}',
  },
  connectionRdbmsPort: {
    type: 'text',
    helpKey: 'connection.rdbms.port',
    name: '/rdbms/port',
    id: 'connectionRdbmsPort',
    label: 'Rdbms port',
    defaultValue: '{{rdbms.port}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionRdbmsDatabase: {
    type: 'text',
    helpKey: 'connection.rdbms.database',
    name: '/rdbms/database',
    id: 'connectionRdbmsDatabase',
    label: 'Rdbms database',
    defaultValue: '{{rdbms.database}}',
  },
  connectionRdbmsInstanceName: {
    type: 'text',
    helpKey: 'connection.rdbms.instanceName',
    name: '/rdbms/instanceName',
    id: 'connectionRdbmsInstanceName',
    label: 'Rdbms instanceName',
    defaultValue: '{{rdbms.instanceName}}',
  },
  connectionRdbmsUser: {
    type: 'text',
    helpKey: 'connection.rdbms.user',
    name: '/rdbms/user',
    id: 'connectionRdbmsUser',
    label: 'Rdbms user',
    defaultValue: '{{rdbms.user}}',
  },
  connectionRdbmsPassword: {
    type: 'text',
    helpKey: 'connection.rdbms.password',
    name: '/rdbms/password',
    id: 'connectionRdbmsPassword',
    label: 'Rdbms password',
    defaultValue: '{{rdbms.password}}',
  },
  connectionRdbmsSslCa: {
    type: 'text',
    helpKey: 'connection.rdbms.ssl.ca',
    name: '/rdbms/ssl/ca',
    id: 'connectionRdbmsSslCa',
    label: 'Rdbms ssl ca',
    defaultValue: '{{rdbms.ssl.ca}}',
  },
  connectionRdbmsSslKey: {
    type: 'text',
    helpKey: 'connection.rdbms.ssl.key',
    name: '/rdbms/ssl/key',
    id: 'connectionRdbmsSslKey',
    label: 'Rdbms ssl key',
    defaultValue: '{{rdbms.ssl.key}}',
  },
  connectionRdbmsSslPassphrase: {
    type: 'text',
    helpKey: 'connection.rdbms.ssl.passphrase',
    name: '/rdbms/ssl/passphrase',
    id: 'connectionRdbmsSslPassphrase',
    label: 'Rdbms ssl passphrase',
    defaultValue: '{{rdbms.ssl.passphrase}}',
  },
  connectionRdbmsSslCert: {
    type: 'text',
    helpKey: 'connection.rdbms.ssl.cert',
    name: '/rdbms/ssl/cert',
    id: 'connectionRdbmsSslCert',
    label: 'Rdbms ssl cert',
    defaultValue: '{{rdbms.ssl.cert}}',
  },
  connectionRdbmsConcurrencyLevel: {
    type: 'text',
    helpKey: 'connection.rdbms.concurrencyLevel',
    name: '/rdbms/concurrencyLevel',
    id: 'connectionRdbmsConcurrencyLevel',
    label: 'Rdbms concurrencyLevel',
    defaultValue: '{{rdbms.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  // #endregion rdbms
  // #region rest
  connectionRestMediaType: {
    type: 'radiogroup',
    helpKey: 'connection.rest.mediaType',
    name: '/rest/mediaType',
    id: 'connectionRestMediaType',
    label: 'Rest mediaType',
    defaultValue: '{{rest.mediaType}}',
    options: [
      {
        items: [
          { label: 'Json', value: 'json' },
          { label: 'Urlencoded', value: 'urlencoded' },
          { label: 'Xml', value: 'xml' },
          { label: 'Csv', value: 'csv' },
        ],
      },
    ],
  },
  connectionRestBaseURI: {
    type: 'text',
    helpKey: 'connection.rest.baseURI',
    name: '/rest/baseURI',
    id: 'connectionRestBaseURI',
    label: 'Rest baseURI',
    defaultValue: '{{rest.baseURI}}',
  },
  connectionRestBearerToken: {
    type: 'text',
    helpKey: 'connection.rest.bearerToken',
    name: '/rest/bearerToken',
    id: 'connectionRestBearerToken',
    label: 'Rest bearerToken',
    defaultValue: '{{rest.bearerToken}}',
  },
  connectionRestTokenLocation: {
    type: 'radiogroup',
    helpKey: 'connection.rest.tokenLocation',
    name: '/rest/tokenLocation',
    id: 'connectionRestTokenLocation',
    label: 'Rest tokenLocation',
    defaultValue: '{{rest.tokenLocation}}',
    options: [
      {
        items: [
          { label: 'Header', value: 'header' },
          { label: 'Url', value: 'url' },
        ],
      },
    ],
  },
  connectionRestTokenParam: {
    type: 'text',
    helpKey: 'connection.rest.tokenParam',
    name: '/rest/tokenParam',
    id: 'connectionRestTokenParam',
    label: 'Rest tokenParam',
    defaultValue: '{{rest.tokenParam}}',
  },
  connectionRestScopes: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'connection.rest.scopes',
    name: '/rest/scopes',
    id: 'connectionRestScopes',
    label: 'Rest scope',
    defaultValue: '{{rest.scope}}',
    validWhen: [],
  },
  connectionRestScopeDelimiter: {
    type: 'text',
    helpKey: 'connection.rest.scopeDelimiter',
    name: '/rest/scopeDelimiter',
    id: 'connectionRestScopeDelimiter',
    label: 'Rest scopeDelimiter',
    defaultValue: '{{rest.scopeDelimiter}}',
  },
  connectionRestRefreshToken: {
    type: 'text',
    helpKey: 'connection.rest.refreshToken',
    name: '/rest/refreshToken',
    id: 'connectionRestRefreshToken',
    label: 'Rest refreshToken',
    defaultValue: '{{rest.refreshToken}}',
  },
  connectionRestOauthTokenURI: {
    type: 'text',
    helpKey: 'connection.rest.oauthTokenURI',
    name: '/rest/oauthTokenURI',
    id: 'connectionRestOauthTokenURI',
    label: 'Rest oauthTokenURI',
    defaultValue: '{{rest.oauthTokenURI}}',
  },
  connectionRestDisableStrictSSL: {
    type: 'checkbox',
    helpKey: 'connection.rest.disableStrictSSL',
    name: '/rest/disableStrictSSL',
    id: 'connectionRestDisableStrictSSL',
    label: 'Rest disableStrictSSL',
    defaultValue: false,
  },
  connectionRestAuthType: {
    type: 'radiogroup',
    helpKey: 'connection.rest.authType',
    name: '/rest/authType',
    id: 'connectionRestAuthType',
    label: 'Rest authType',
    defaultValue: '{{rest.authType}}',
    options: [
      {
        items: [
          { label: 'Basic', value: 'basic' },
          { label: 'Token', value: 'token' },
          { label: 'Oauth', value: 'oauth' },
          { label: 'Custom', value: 'custom' },
          { label: 'Cookie', value: 'cookie' },
          { label: 'Jwt', value: 'jwt' },
          { label: 'Hmac', value: 'hmac' },
          { label: 'Wsse', value: 'wsse' },
        ],
      },
    ],
  },
  connectionRestAuthURI: {
    type: 'text',
    helpKey: 'connection.rest.authURI',
    name: '/rest/authURI',
    id: 'connectionRestAuthURI',
    label: 'Rest authURI',
    defaultValue: '{{rest.authURI}}',
  },
  connectionRestAuthHeader: {
    type: 'text',
    helpKey: 'connection.rest.authHeader',
    name: '/rest/authHeader',
    id: 'connectionRestAuthHeader',
    label: 'Rest authHeader',
    defaultValue: '{{rest.authHeader}}',
  },
  connectionRestRetryHeader: {
    type: 'text',
    helpKey: 'connection.rest.retryHeader',
    name: '/rest/retryHeader',
    id: 'connectionRestRetryHeader',
    label: 'Rest retryHeader',
    defaultValue: '{{rest.retryHeader}}',
  },
  connectionRestAuthScheme: {
    type: 'radiogroup',
    helpKey: 'connection.rest.authScheme',
    name: '/rest/authScheme',
    id: 'connectionRestAuthScheme',
    label: 'Rest authScheme',
    defaultValue: '{{rest.authScheme}}',
    options: [
      {
        items: [
          { label: 'MAC', value: 'MAC' },
          { label: 'OAuth', value: 'OAuth' },
          { label: 'Bearer', value: 'Bearer' },
          { label: 'Hmac', value: 'Hmac' },
          { label: ' ', value: ' ' },
        ],
      },
    ],
  },
  connectionRestBasicAuthUsername: {
    type: 'text',
    helpKey: 'connection.rest.basicAuth.username',
    name: '/rest/basicAuth/username',
    id: 'connectionRestBasicAuthUsername',
    label: 'Rest basicAuth username',
    defaultValue: '{{rest.basicAuth.username}}',
  },
  connectionRestBasicAuthPassword: {
    type: 'text',
    helpKey: 'connection.rest.basicAuth.password',
    name: '/rest/basicAuth/password',
    id: 'connectionRestBasicAuthPassword',
    label: 'Rest basicAuth password',
    defaultValue: '{{rest.basicAuth.password}}',
  },
  connectionRestCookieAuthUri: {
    type: 'text',
    helpKey: 'connection.rest.cookieAuth.uri',
    name: '/rest/cookieAuth/uri',
    id: 'connectionRestCookieAuthUri',
    label: 'Rest cookieAuth uri',
    defaultValue: '{{rest.cookieAuth.uri}}',
  },
  connectionRestCookieAuthBody: {
    type: 'text',
    helpKey: 'connection.rest.cookieAuth.body',
    name: '/rest/cookieAuth/body',
    id: 'connectionRestCookieAuthBody',
    label: 'Rest cookieAuth body',
    defaultValue: '{{rest.cookieAuth.body}}',
  },
  connectionRestCookieAuthMethod: {
    type: 'text',
    helpKey: 'connection.rest.cookieAuth.method',
    name: '/rest/cookieAuth/method',
    id: 'connectionRestCookieAuthMethod',
    label: 'Rest cookieAuth method',
    defaultValue: '{{rest.cookieAuth.method}}',
  },
  connectionRestCookieAuthSuccessStatusCode: {
    type: 'text',
    helpKey: 'connection.rest.cookieAuth.successStatusCode',
    name: '/rest/cookieAuth/successStatusCode',
    id: 'connectionRestCookieAuthSuccessStatusCode',
    label: 'Rest cookieAuth successStatusCode',
    defaultValue: '{{rest.cookieAuth.successStatusCode}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionRestHeaders: {
    type: 'keyvalue',
    keyName: 'name',
    valueName: 'value',
    valueType: 'keyvalue',
    helpKey: 'connection.rest.headers',
    name: '/rest/headers',
    id: 'connectionRestHeaders',
    label: 'Rest headers',
    defaultValue: '{{rest.headers}}',
  },
  connectionRestEncrypted: {
    type: 'text',
    helpKey: 'connection.rest.encrypted',
    name: '/rest/encrypted',
    id: 'connectionRestEncrypted',
    label: 'Rest encrypted',
    defaultValue: '{{rest.encrypted}}',
  },
  connectionRestEncrypteds: {
    type: 'editor',
    valueType: 'editorExpression',
    helpKey: 'connection.rest.encrypteds',
    name: '/rest/encrypteds',
    id: 'connectionRestEncrypteds',
    label: 'Rest encrypted',
    defaultValue: '{{rest.encrypted}}',
  },
  connectionRestUnencrypted: {
    type: 'text',
    helpKey: 'connection.rest.unencrypted',
    name: '/rest/unencrypted',
    id: 'connectionRestUnencrypted',
    label: 'Rest unencrypted',
    defaultValue: '{{rest.unencrypted}}',
  },
  connectionRestUnencrypteds: {
    type: 'editor',
    valueType: 'editorExpression',
    helpKey: 'connection.rest.unencrypteds',
    name: '/rest/unencrypteds',
    id: 'connectionRestUnencrypteds',
    label: 'Rest unencrypted',
    defaultValue: '{{rest.unencrypted}}',
  },
  connectionRestOauthAccessTokenPath: {
    type: 'text',
    helpKey: 'connection.rest.oauth.accessTokenPath',
    name: '/rest/oauth/accessTokenPath',
    id: 'connectionRestOauthAccessTokenPath',
    label: 'Rest oauth accessTokenPath',
    defaultValue: '{{rest.oauth.accessTokenPath}}',
  },
  connectionRestOauthGrantType: {
    type: 'radiogroup',
    helpKey: 'connection.rest.oauth.grantType',
    name: '/rest/oauth/grantType',
    id: 'connectionRestOauthGrantType',
    label: 'Rest oauth grantType',
    defaultValue: '{{rest.oauth.grantType}}',
    options: [
      {
        items: [
          { label: 'Authorizecode', value: 'authorizecode' },
          { label: 'Password', value: 'password' },
        ],
      },
    ],
  },
  connectionRestOauthUsername: {
    type: 'text',
    helpKey: 'connection.rest.oauth.username',
    name: '/rest/oauth/username',
    id: 'connectionRestOauthUsername',
    label: 'Rest oauth username',
    defaultValue: '{{rest.oauth.username}}',
  },
  connectionRestOauthPassword: {
    type: 'text',
    helpKey: 'connection.rest.oauth.password',
    name: '/rest/oauth/password',
    id: 'connectionRestOauthPassword',
    label: 'Rest oauth password',
    defaultValue: '{{rest.oauth.password}}',
  },
  connectionRestRefreshTokenMethod: {
    type: 'text',
    helpKey: 'connection.rest.refreshTokenMethod',
    name: '/rest/refreshTokenMethod',
    id: 'connectionRestRefreshTokenMethod',
    label: 'Rest refreshTokenMethod',
    defaultValue: '{{rest.refreshTokenMethod}}',
  },
  connectionRestRefreshTokenBody: {
    type: 'text',
    helpKey: 'connection.rest.refreshTokenBody',
    name: '/rest/refreshTokenBody',
    id: 'connectionRestRefreshTokenBody',
    label: 'Rest refreshTokenBody',
    defaultValue: '{{rest.refreshTokenBody}}',
  },
  connectionRestRefreshTokenURI: {
    type: 'text',
    helpKey: 'connection.rest.refreshTokenURI',
    name: '/rest/refreshTokenURI',
    id: 'connectionRestRefreshTokenURI',
    label: 'Rest refreshTokenURI',
    defaultValue: '{{rest.refreshTokenURI}}',
  },
  connectionRestRefreshTokenPath: {
    type: 'text',
    helpKey: 'connection.rest.refreshTokenPath',
    name: '/rest/refreshTokenPath',
    id: 'connectionRestRefreshTokenPath',
    label: 'Rest refreshTokenPath',
    defaultValue: '{{rest.refreshTokenPath}}',
  },
  connectionRestRefreshTokenMediaType: {
    type: 'radiogroup',
    helpKey: 'connection.rest.refreshTokenMediaType',
    name: '/rest/refreshTokenMediaType',
    id: 'connectionRestRefreshTokenMediaType',
    label: 'Rest refreshTokenMediaType',
    defaultValue: '{{rest.refreshTokenMediaType}}',
    options: [
      {
        items: [
          { label: 'Json', value: 'json' },
          { label: 'Urlencoded', value: 'urlencoded' },
        ],
      },
    ],
  },
  connectionRestRefreshTokenHeaders: {
    type: 'keyvalue',
    keyName: 'name',
    valueName: 'value',
    valueType: 'keyvalue',
    helpKey: 'connection.rest.refreshTokenHeaders',
    name: '/rest/refreshTokenHeaders',
    id: 'connectionRestRefreshTokenHeaders',
    label: 'Rest refreshTokenHeaders',
    defaultValue: '{{rest.refreshTokenHeaders}}',
  },
  connectionRestInfo: {
    type: 'text',
    helpKey: 'connection.rest.info',
    name: '/rest/info',
    id: 'connectionRestInfo',
    label: 'Rest info',
    defaultValue: '{{rest.info}}',
  },
  connectionRestPingRelativeURI: {
    type: 'text',
    helpKey: 'connection.rest.pingRelativeURI',
    name: '/rest/pingRelativeURI',
    id: 'connectionRestPingRelativeURI',
    label: 'Rest pingRelativeURI',
    defaultValue: '{{rest.pingRelativeURI}}',
  },
  connectionRestPingSuccessPath: {
    type: 'text',
    helpKey: 'connection.rest.pingSuccessPath',
    name: '/rest/pingSuccessPath',
    id: 'connectionRestPingSuccessPath',
    label: 'Rest pingSuccessPath',
    defaultValue: '{{rest.pingSuccessPath}}',
  },
  connectionRestPingSuccessValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'connection.rest.pingSuccessValuess',
    name: '/rest/pingSuccessValuess',
    id: 'connectionRestPingSuccessValuess',
    label: 'Rest pingSuccessValues',
    defaultValue: '{{rest.pingSuccessValues}}',
    validWhen: [],
  },
  connectionRestPingFailurePath: {
    type: 'text',
    helpKey: 'connection.rest.pingFailurePath',
    name: '/rest/pingFailurePath',
    id: 'connectionRestPingFailurePath',
    label: 'Rest pingFailurePath',
    defaultValue: '{{rest.pingFailurePath}}',
  },
  connectionRestPingFailureValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'connection.rest.pingFailureValuess',
    name: '/rest/pingFailureValuess',
    id: 'connectionRestPingFailureValuess',
    label: 'Rest pingFailureValues',
    defaultValue: '{{rest.pingFailureValues}}',
    validWhen: [],
  },
  connectionRestConcurrencyLevel: {
    type: 'text',
    helpKey: 'connection.rest.concurrencyLevel',
    name: '/rest/concurrencyLevel',
    id: 'connectionRestConcurrencyLevel',
    label: 'Rest concurrencyLevel',
    defaultValue: '{{rest.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionRestPingMethod: {
    type: 'radiogroup',
    helpKey: 'connection.rest.pingMethod',
    name: '/rest/pingMethod',
    id: 'connectionRestPingMethod',
    label: 'Rest pingMethod',
    defaultValue: '{{rest.pingMethod}}',
    options: [
      {
        items: [
          { label: 'GET', value: 'GET' },
          { label: 'POST', value: 'POST' },
        ],
      },
    ],
  },
  connectionRestPingBody: {
    type: 'text',
    helpKey: 'connection.rest.pingBody',
    name: '/rest/pingBody',
    id: 'connectionRestPingBody',
    label: 'Rest pingBody',
    defaultValue: '{{rest.pingBody}}',
  },
  // #endregion rest
  // #region http
  connectionHttpMediaType: {
    type: 'radiogroup',
    helpKey: 'connection.http.mediaType',
    name: '/http/mediaType',
    id: 'connectionHttpMediaType',
    label: 'Http mediaType',
    defaultValue: '{{http.mediaType}}',
    options: [
      {
        items: [
          { label: 'Xml', value: 'xml' },
          { label: 'Json', value: 'json' },
        ],
      },
    ],
  },
  connectionHttpBaseURI: {
    type: 'text',
    helpKey: 'connection.http.baseURI',
    name: '/http/baseURI',
    id: 'connectionHttpBaseURI',
    label: 'Http baseURI',
    defaultValue: '{{http.baseURI}}',
  },
  connectionHttpDisableStrictSSL: {
    type: 'checkbox',
    helpKey: 'connection.http.disableStrictSSL',
    name: '/http/disableStrictSSL',
    id: 'connectionHttpDisableStrictSSL',
    label: 'Http disableStrictSSL',
    defaultValue: false,
  },
  connectionHttpConcurrencyLevel: {
    type: 'text',
    helpKey: 'connection.http.concurrencyLevel',
    name: '/http/concurrencyLevel',
    id: 'connectionHttpConcurrencyLevel',
    label: 'Http concurrencyLevel',
    defaultValue: '{{http.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionHttpRetryHeader: {
    type: 'text',
    helpKey: 'connection.http.retryHeader',
    name: '/http/retryHeader',
    id: 'connectionHttpRetryHeader',
    label: 'Http retryHeader',
    defaultValue: '{{http.retryHeader}}',
  },
  connectionHttpPingRelativeURI: {
    type: 'text',
    helpKey: 'connection.http.ping.relativeURI',
    name: '/http/ping/relativeURI',
    id: 'connectionHttpPingRelativeURI',
    label: 'Http ping relativeURI',
    defaultValue: '{{http.ping.relativeURI}}',
  },
  connectionHttpPingMethod: {
    type: 'radiogroup',
    helpKey: 'connection.http.ping.method',
    name: '/http/ping/method',
    id: 'connectionHttpPingMethod',
    label: 'Http ping method',
    defaultValue: '{{http.ping.method}}',
    options: [
      {
        items: [
          { label: 'GET', value: 'GET' },
          { label: 'POST', value: 'POST' },
          { label: 'PUT', value: 'PUT' },
          { label: 'HEAD', value: 'HEAD' },
        ],
      },
    ],
  },
  connectionHttpPingBody: {
    type: 'text',
    helpKey: 'connection.http.ping.body',
    name: '/http/ping/body',
    id: 'connectionHttpPingBody',
    label: 'Http ping body',
    defaultValue: '{{http.ping.body}}',
  },
  connectionHttpPingSuccessPath: {
    type: 'text',
    helpKey: 'connection.http.ping.successPath',
    name: '/http/ping/successPath',
    id: 'connectionHttpPingSuccessPath',
    label: 'Http ping successPath',
    defaultValue: '{{http.ping.successPath}}',
  },
  connectionHttpPingSuccessValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'connection.http.ping.successValuess',
    name: '/http/ping/successValuess',
    id: 'connectionHttpPingSuccessValuess',
    label: 'Http ping successValues',
    defaultValue: '{{http.ping.successValues}}',
    validWhen: [],
  },
  connectionHttpPingErrorPath: {
    type: 'text',
    helpKey: 'connection.http.ping.errorPath',
    name: '/http/ping/errorPath',
    id: 'connectionHttpPingErrorPath',
    label: 'Http ping errorPath',
    defaultValue: '{{http.ping.errorPath}}',
  },
  connectionHttpAuthFailStatusCode: {
    type: 'text',
    helpKey: 'connection.http.auth.failStatusCode',
    name: '/http/auth/failStatusCode',
    id: 'connectionHttpAuthFailStatusCode',
    label: 'Http auth failStatusCode',
    defaultValue: '{{http.auth.failStatusCode}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionHttpAuthFailPath: {
    type: 'text',
    helpKey: 'connection.http.auth.failPath',
    name: '/http/auth/failPath',
    id: 'connectionHttpAuthFailPath',
    label: 'Http auth failPath',
    defaultValue: '{{http.auth.failPath}}',
  },
  connectionHttpAuthFailValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'connection.http.auth.failValuess',
    name: '/http/auth/failValuess',
    id: 'connectionHttpAuthFailValuess',
    label: 'Http auth failValues',
    defaultValue: '{{http.auth.failValues}}',
    validWhen: [],
  },
  connectionHttpAuthBasicUsername: {
    type: 'text',
    helpKey: 'connection.http.auth.basic.username',
    name: '/http/auth/basic/username',
    id: 'connectionHttpAuthBasicUsername',
    label: 'Http auth basic username',
    defaultValue: '{{http.auth.basic.username}}',
  },
  connectionHttpAuthBasicPassword: {
    type: 'text',
    helpKey: 'connection.http.auth.basic.password',
    name: '/http/auth/basic/password',
    id: 'connectionHttpAuthBasicPassword',
    label: 'Http auth basic password',
    defaultValue: '{{http.auth.basic.password}}',
  },
  connectionHttpAuthOauthAuthURI: {
    type: 'text',
    helpKey: 'connection.http.auth.oauth.authURI',
    name: '/http/auth/oauth/authURI',
    id: 'connectionHttpAuthOauthAuthURI',
    label: 'Http auth oauth authURI',
    defaultValue: '{{http.auth.oauth.authURI}}',
  },
  connectionHttpAuthOauthTokenURI: {
    type: 'text',
    helpKey: 'connection.http.auth.oauth.tokenURI',
    name: '/http/auth/oauth/tokenURI',
    id: 'connectionHttpAuthOauthTokenURI',
    label: 'Http auth oauth tokenURI',
    defaultValue: '{{http.auth.oauth.tokenURI}}',
  },
  connectionHttpAuthOauthScopes: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'connection.http.auth.oauth.scopes',
    name: '/http/auth/oauth/scopes',
    id: 'connectionHttpAuthOauthScopes',
    label: 'Http auth oauth scope',
    defaultValue: '{{http.auth.oauth.scope}}',
    validWhen: [],
  },
  connectionHttpAuthOauthScopeDelimiter: {
    type: 'text',
    helpKey: 'connection.http.auth.oauth.scopeDelimiter',
    name: '/http/auth/oauth/scopeDelimiter',
    id: 'connectionHttpAuthOauthScopeDelimiter',
    label: 'Http auth oauth scopeDelimiter',
    defaultValue: '{{http.auth.oauth.scopeDelimiter}}',
  },
  connectionHttpAuthOauthAccessTokenPath: {
    type: 'text',
    helpKey: 'connection.http.auth.oauth.accessTokenPath',
    name: '/http/auth/oauth/accessTokenPath',
    id: 'connectionHttpAuthOauthAccessTokenPath',
    label: 'Http auth oauth accessTokenPath',
    defaultValue: '{{http.auth.oauth.accessTokenPath}}',
  },
  connectionHttpAuthOauthGrantType: {
    type: 'radiogroup',
    helpKey: 'connection.http.auth.oauth.grantType',
    name: '/http/auth/oauth/grantType',
    id: 'connectionHttpAuthOauthGrantType',
    label: 'Http auth oauth grantType',
    defaultValue: '{{http.auth.oauth.grantType}}',
    options: [
      {
        items: [
          { label: 'Authorizecode', value: 'authorizecode' },
          { label: 'Password', value: 'password' },
        ],
      },
    ],
  },
  connectionHttpAuthOauthUsername: {
    type: 'text',
    helpKey: 'connection.http.auth.oauth.username',
    name: '/http/auth/oauth/username',
    id: 'connectionHttpAuthOauthUsername',
    label: 'Http auth oauth username',
    defaultValue: '{{http.auth.oauth.username}}',
  },
  connectionHttpAuthOauthPassword: {
    type: 'text',
    helpKey: 'connection.http.auth.oauth.password',
    name: '/http/auth/oauth/password',
    id: 'connectionHttpAuthOauthPassword',
    label: 'Http auth oauth password',
    defaultValue: '{{http.auth.oauth.password}}',
  },
  connectionHttpAuthTokenToken: {
    type: 'text',
    helpKey: 'connection.http.auth.token.token',
    name: '/http/auth/token/token',
    id: 'connectionHttpAuthTokenToken',
    label: 'Http auth token token',
    defaultValue: '{{http.auth.token.token}}',
  },
  connectionHttpAuthTokenLocation: {
    type: 'radiogroup',
    helpKey: 'connection.http.auth.token.location',
    name: '/http/auth/token/location',
    id: 'connectionHttpAuthTokenLocation',
    label: 'Http auth token location',
    defaultValue: '{{http.auth.token.location}}',
    options: [
      {
        items: [
          { label: 'Url', value: 'url' },
          { label: 'Header', value: 'header' },
          { label: 'Body', value: 'body' },
        ],
      },
    ],
  },
  connectionHttpAuthTokenHeaderName: {
    type: 'text',
    helpKey: 'connection.http.auth.token.headerName',
    name: '/http/auth/token/headerName',
    id: 'connectionHttpAuthTokenHeaderName',
    label: 'Http auth token headerName',
    defaultValue: '{{http.auth.token.headerName}}',
  },
  connectionHttpAuthTokenScheme: {
    type: 'text',
    helpKey: 'connection.http.auth.token.scheme',
    name: '/http/auth/token/scheme',
    id: 'connectionHttpAuthTokenScheme',
    label: 'Http auth token scheme',
    defaultValue: '{{http.auth.token.scheme}}',
  },
  connectionHttpAuthTokenParamName: {
    type: 'text',
    helpKey: 'connection.http.auth.token.paramName',
    name: '/http/auth/token/paramName',
    id: 'connectionHttpAuthTokenParamName',
    label: 'Http auth token paramName',
    defaultValue: '{{http.auth.token.paramName}}',
  },
  connectionHttpAuthTokenRefreshMethod: {
    type: 'radiogroup',
    helpKey: 'connection.http.auth.token.refreshMethod',
    name: '/http/auth/token/refreshMethod',
    id: 'connectionHttpAuthTokenRefreshMethod',
    label: 'Http auth token refreshMethod',
    defaultValue: '{{http.auth.token.refreshMethod}}',
    options: [
      {
        items: [
          { label: 'GET', value: 'GET' },
          { label: 'POST', value: 'POST' },
        ],
      },
    ],
  },
  connectionHttpAuthTokenRefreshRelativeURI: {
    type: 'text',
    helpKey: 'connection.http.auth.token.refreshRelativeURI',
    name: '/http/auth/token/refreshRelativeURI',
    id: 'connectionHttpAuthTokenRefreshRelativeURI',
    label: 'Http auth token refreshRelativeURI',
    defaultValue: '{{http.auth.token.refreshRelativeURI}}',
  },
  connectionHttpAuthTokenRefreshBody: {
    type: 'text',
    helpKey: 'connection.http.auth.token.refreshBody',
    name: '/http/auth/token/refreshBody',
    id: 'connectionHttpAuthTokenRefreshBody',
    label: 'Http auth token refreshBody',
    defaultValue: '{{http.auth.token.refreshBody}}',
  },
  connectionHttpAuthTokenRefreshTokenPath: {
    type: 'text',
    helpKey: 'connection.http.auth.token.refreshTokenPath',
    name: '/http/auth/token/refreshTokenPath',
    id: 'connectionHttpAuthTokenRefreshTokenPath',
    label: 'Http auth token refreshTokenPath',
    defaultValue: '{{http.auth.token.refreshTokenPath}}',
  },
  connectionHttpAuthTokenRefreshMediaType: {
    type: 'radiogroup',
    helpKey: 'connection.http.auth.token.refreshMediaType',
    name: '/http/auth/token/refreshMediaType',
    id: 'connectionHttpAuthTokenRefreshMediaType',
    label: 'Http auth token refreshMediaType',
    defaultValue: '{{http.auth.token.refreshMediaType}}',
    options: [
      {
        items: [
          { label: 'Json', value: 'json' },
          { label: 'Urlencoded', value: 'urlencoded' },
          { label: 'Xml', value: 'xml' },
        ],
      },
    ],
  },
  connectionHttpAuthTokenRefreshHeaders: {
    type: 'keyvalue',
    keyName: 'name',
    valueName: 'value',
    valueType: 'keyvalue',
    helpKey: 'connection.http.auth.token.refreshHeaders',
    name: '/http/auth/token/refreshHeaders',
    id: 'connectionHttpAuthTokenRefreshHeaders',
    label: 'Http auth token refreshHeaders',
    defaultValue: '{{http.auth.token.refreshHeaders}}',
  },
  connectionHttpAuthTokenRefreshToken: {
    type: 'text',
    helpKey: 'connection.http.auth.token.refreshToken',
    name: '/http/auth/token/refreshToken',
    id: 'connectionHttpAuthTokenRefreshToken',
    label: 'Http auth token refreshToken',
    defaultValue: '{{http.auth.token.refreshToken}}',
  },
  connectionHttpRateLimitFailStatusCode: {
    type: 'text',
    helpKey: 'connection.http.rateLimit.failStatusCode',
    name: '/http/rateLimit/failStatusCode',
    id: 'connectionHttpRateLimitFailStatusCode',
    label: 'Http rateLimit failStatusCode',
    defaultValue: '{{http.rateLimit.failStatusCode}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionHttpRateLimitFailPath: {
    type: 'text',
    helpKey: 'connection.http.rateLimit.failPath',
    name: '/http/rateLimit/failPath',
    id: 'connectionHttpRateLimitFailPath',
    label: 'Http rateLimit failPath',
    defaultValue: '{{http.rateLimit.failPath}}',
  },
  connectionHttpRateLimitFailValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'connection.http.rateLimit.failValuess',
    name: '/http/rateLimit/failValuess',
    id: 'connectionHttpRateLimitFailValuess',
    label: 'Http rateLimit failValues',
    defaultValue: '{{http.rateLimit.failValues}}',
    validWhen: [],
  },
  connectionHttpRateLimitLimit: {
    type: 'text',
    helpKey: 'connection.http.rateLimit.limit',
    name: '/http/rateLimit/limit',
    id: 'connectionHttpRateLimitLimit',
    label: 'Http rateLimit limit',
    defaultValue: '{{http.rateLimit.limit}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
      {
        fallsWithinNumericalRange: {
          message:
            'The value must be greater than undefined and  lesser than undefined',
        },
      },
    ],
  },
  connectionHttpHeaders: {
    type: 'keyvalue',
    keyName: 'name',
    valueName: 'value',
    valueType: 'keyvalue',
    helpKey: 'connection.http.headers',
    name: '/http/headers',
    id: 'connectionHttpHeaders',
    label: 'Http headers',
    defaultValue: '{{http.headers}}',
  },
  connectionHttpUnencrypted: {
    type: 'text',
    helpKey: 'connection.http.unencrypted',
    name: '/http/unencrypted',
    id: 'connectionHttpUnencrypted',
    label: 'Http unencrypted',
    defaultValue: '{{http.unencrypted}}',
  },
  connectionHttpEncrypted: {
    type: 'text',
    helpKey: 'connection.http.encrypted',
    name: '/http/encrypted',
    id: 'connectionHttpEncrypted',
    label: 'Http encrypted',
    defaultValue: '{{http.encrypted}}',
  },
  connectionHttpEncrypteds: {
    type: 'editor',
    valueType: 'editorExpression',
    helpKey: 'connection.http.encrypteds',
    name: '/http/encrypteds',
    id: 'connectionHttpEncrypteds',
    label: 'Http encrypted',
    defaultValue: '{{http.encrypted}}',
  },
  // #endregion http
  // #region ftp
  connectionFtpHostURI: {
    type: 'text',
    helpKey: 'connection.ftp.hostURI',
    name: '/ftp/hostURI',
    id: 'connectionFtpHostURI',
    label: 'Ftp hostURI',
    defaultValue: '{{ftp.hostURI}}',
  },
  connectionFtpUsername: {
    type: 'text',
    helpKey: 'connection.ftp.username',
    name: '/ftp/username',
    id: 'connectionFtpUsername',
    label: 'Ftp username',
    defaultValue: '{{ftp.username}}',
  },
  connectionFtpPassword: {
    type: 'text',
    helpKey: 'connection.ftp.password',
    name: '/ftp/password',
    id: 'connectionFtpPassword',
    label: 'Ftp password',
    defaultValue: '{{ftp.password}}',
  },
  connectionFtpAuthKey: {
    type: 'text',
    helpKey: 'connection.ftp.authKey',
    name: '/ftp/authKey',
    id: 'connectionFtpAuthKey',
    label: 'Ftp authKey',
    defaultValue: '{{ftp.authKey}}',
  },
  connectionFtpPort: {
    type: 'text',
    helpKey: 'connection.ftp.port',
    name: '/ftp/port',
    id: 'connectionFtpPort',
    label: 'Ftp port',
    defaultValue: '{{ftp.port}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionFtpUsePassiveMode: {
    type: 'checkbox',
    helpKey: 'connection.ftp.usePassiveMode',
    name: '/ftp/usePassiveMode',
    id: 'connectionFtpUsePassiveMode',
    label: 'Ftp usePassiveMode',
    defaultValue: false,
  },
  connectionFtpEntryParser: {
    type: 'radiogroup',
    helpKey: 'connection.ftp.entryParser',
    name: '/ftp/entryParser',
    id: 'connectionFtpEntryParser',
    label: 'Ftp entryParser',
    defaultValue: '{{ftp.entryParser}}',
    options: [
      {
        items: [
          { label: 'UNIX', value: 'UNIX' },
          { label: 'UNIX-TRIM', value: 'UNIX-TRIM' },
          { label: 'VMS', value: 'VMS' },
          { label: 'WINDOWS', value: 'WINDOWS' },
          { label: 'OS/2', value: 'OS/2' },
          { label: 'OS/400', value: 'OS/400' },
          { label: 'AS/400', value: 'AS/400' },
          { label: 'MVS', value: 'MVS' },
          { label: 'UNKNOWN-TYPE', value: 'UNKNOWN-TYPE' },
          { label: 'NETWARE', value: 'NETWARE' },
          { label: 'MACOS-PETER', value: 'MACOS-PETER' },
        ],
      },
    ],
  },
  connectionFtpUserDirectoryIsRoot: {
    type: 'checkbox',
    helpKey: 'connection.ftp.userDirectoryIsRoot',
    name: '/ftp/userDirectoryIsRoot',
    id: 'connectionFtpUserDirectoryIsRoot',
    label: 'Ftp userDirectoryIsRoot',
    defaultValue: false,
  },
  connectionFtpUseImplicitFtps: {
    type: 'checkbox',
    helpKey: 'connection.ftp.useImplicitFtps',
    name: '/ftp/useImplicitFtps',
    id: 'connectionFtpUseImplicitFtps',
    label: 'Ftp useImplicitFtps',
    defaultValue: false,
  },
  connectionFtpRequireSocketReUse: {
    type: 'checkbox',
    helpKey: 'connection.ftp.requireSocketReUse',
    name: '/ftp/requireSocketReUse',
    id: 'connectionFtpRequireSocketReUse',
    label: 'Ftp requireSocketReUse',
    defaultValue: false,
  },
  connectionFtpPgpEncryptKey: {
    type: 'text',
    helpKey: 'connection.ftp.pgpEncryptKey',
    name: '/ftp/pgpEncryptKey',
    id: 'connectionFtpPgpEncryptKey',
    label: 'Ftp pgpEncryptKey',
    defaultValue: '{{ftp.pgpEncryptKey}}',
  },
  connectionFtpPgpDecryptKey: {
    type: 'text',
    helpKey: 'connection.ftp.pgpDecryptKey',
    name: '/ftp/pgpDecryptKey',
    id: 'connectionFtpPgpDecryptKey',
    label: 'Ftp pgpDecryptKey',
    defaultValue: '{{ftp.pgpDecryptKey}}',
  },
  connectionFtpPgpPassphrase: {
    type: 'text',
    helpKey: 'connection.ftp.pgpPassphrase',
    name: '/ftp/pgpPassphrase',
    id: 'connectionFtpPgpPassphrase',
    label: 'Ftp pgpPassphrase',
    defaultValue: '{{ftp.pgpPassphrase}}',
  },
  // #endregion ftp
  // #region s3
  connectionS3AccessKeyId: {
    type: 'text',
    helpKey: 'connection.s3.accessKeyId',
    name: '/s3/accessKeyId',
    id: 'connectionS3AccessKeyId',
    label: 'S3 accessKeyId',
    defaultValue: '{{s3.accessKeyId}}',
  },
  connectionS3SecretAccessKey: {
    type: 'text',
    helpKey: 'connection.s3.secretAccessKey',
    name: '/s3/secretAccessKey',
    id: 'connectionS3SecretAccessKey',
    label: 'S3 secretAccessKey',
    defaultValue: '{{s3.secretAccessKey}}',
  },
  connectionS3PingBucket: {
    type: 'text',
    helpKey: 'connection.s3.pingBucket',
    name: '/s3/pingBucket',
    id: 'connectionS3PingBucket',
    label: 'S3 pingBucket',
    defaultValue: '{{s3.pingBucket}}',
  },
  // #endregion s3
  // #region as2
  connectionAs2As2Id: {
    type: 'text',
    helpKey: 'connection.as2.as2Id',
    name: '/as2/as2Id',
    id: 'connectionAs2As2Id',
    label: 'As2 as2Id',
    defaultValue: '{{as2.as2Id}}',
  },
  connectionAs2PartnerId: {
    type: 'text',
    helpKey: 'connection.as2.partnerId',
    name: '/as2/partnerId',
    id: 'connectionAs2PartnerId',
    label: 'As2 partnerId',
    defaultValue: '{{as2.partnerId}}',
  },
  connectionAs2ContentBasedFlowRouterFunction: {
    type: 'text',
    helpKey: 'connection.as2.contentBasedFlowRouter.function',
    name: '/as2/contentBasedFlowRouter/function',
    id: 'connectionAs2ContentBasedFlowRouterFunction',
    label: 'As2 contentBasedFlowRouter function',
    defaultValue: '{{as2.contentBasedFlowRouter.function}}',
  },
  connectionAs2ContentBasedFlowRouter_scriptId: {
    type: 'text',
    helpKey: 'connection.as2.contentBasedFlowRouter._scriptId',
    name: '/as2/contentBasedFlowRouter/_scriptId',
    id: 'connectionAs2ContentBasedFlowRouter_scriptId',
    label: 'As2 contentBasedFlowRouter _scriptId',
    defaultValue: '{{as2.contentBasedFlowRouter._scriptId}}',
  },
  connectionAs2PartnerStationInfoAs2URI: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.as2URI',
    name: '/as2/partnerStationInfo/as2URI',
    id: 'connectionAs2PartnerStationInfoAs2URI',
    label: 'As2 partnerStationInfo as2URI',
    defaultValue: '{{as2.partnerStationInfo.as2URI}}',
  },
  connectionAs2PartnerStationInfoMdnMdnURL: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.mdn.mdnURL',
    name: '/as2/partnerStationInfo/mdn/mdnURL',
    id: 'connectionAs2PartnerStationInfoMdnMdnURL',
    label: 'As2 partnerStationInfo mdn mdnURL',
    defaultValue: '{{as2.partnerStationInfo.mdn.mdnURL}}',
  },
  connectionAs2PartnerStationInfoMdnSignatureProtocol: {
    type: 'radiogroup',
    helpKey: 'connection.as2.partnerStationInfo.mdn.signatureProtocol',
    name: '/as2/partnerStationInfo/mdn/signatureProtocol',
    id: 'connectionAs2PartnerStationInfoMdnSignatureProtocol',
    label: 'As2 partnerStationInfo mdn signatureProtocol',
    defaultValue: '{{as2.partnerStationInfo.mdn.signatureProtocol}}',
    options: [
      { items: [{ label: 'Pkcs7-signature', value: 'pkcs7-signature' }] },
    ],
  },
  connectionAs2PartnerStationInfoMdnMdnSigning: {
    type: 'radiogroup',
    helpKey: 'connection.as2.partnerStationInfo.mdn.mdnSigning',
    name: '/as2/partnerStationInfo/mdn/mdnSigning',
    id: 'connectionAs2PartnerStationInfoMdnMdnSigning',
    label: 'As2 partnerStationInfo mdn mdnSigning',
    defaultValue: '{{as2.partnerStationInfo.mdn.mdnSigning}}',
    options: [
      {
        items: [
          { label: 'NONE', value: 'NONE' },
          { label: 'SHA1', value: 'SHA1' },
          { label: 'MD5', value: 'MD5' },
          { label: 'SHA256', value: 'SHA256' },
        ],
      },
    ],
  },
  connectionAs2PartnerStationInfoAuthFailStatusCode: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.auth.failStatusCode',
    name: '/as2/partnerStationInfo/auth/failStatusCode',
    id: 'connectionAs2PartnerStationInfoAuthFailStatusCode',
    label: 'As2 partnerStationInfo auth failStatusCode',
    defaultValue: '{{as2.partnerStationInfo.auth.failStatusCode}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionAs2PartnerStationInfoAuthFailPath: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.auth.failPath',
    name: '/as2/partnerStationInfo/auth/failPath',
    id: 'connectionAs2PartnerStationInfoAuthFailPath',
    label: 'As2 partnerStationInfo auth failPath',
    defaultValue: '{{as2.partnerStationInfo.auth.failPath}}',
  },
  connectionAs2PartnerStationInfoAuthFailValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'connection.as2.partnerStationInfo.auth.failValuess',
    name: '/as2/partnerStationInfo/auth/failValuess',
    id: 'connectionAs2PartnerStationInfoAuthFailValuess',
    label: 'As2 partnerStationInfo auth failValues',
    defaultValue: '{{as2.partnerStationInfo.auth.failValues}}',
    validWhen: [],
  },
  connectionAs2PartnerStationInfoAuthBasicUsername: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.auth.basic.username',
    name: '/as2/partnerStationInfo/auth/basic/username',
    id: 'connectionAs2PartnerStationInfoAuthBasicUsername',
    label: 'As2 partnerStationInfo auth basic username',
    defaultValue: '{{as2.partnerStationInfo.auth.basic.username}}',
  },
  connectionAs2PartnerStationInfoAuthBasicPassword: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.auth.basic.password',
    name: '/as2/partnerStationInfo/auth/basic/password',
    id: 'connectionAs2PartnerStationInfoAuthBasicPassword',
    label: 'As2 partnerStationInfo auth basic password',
    defaultValue: '{{as2.partnerStationInfo.auth.basic.password}}',
  },
  connectionAs2PartnerStationInfoAuthTokenToken: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.auth.token.token',
    name: '/as2/partnerStationInfo/auth/token/token',
    id: 'connectionAs2PartnerStationInfoAuthTokenToken',
    label: 'As2 partnerStationInfo auth token token',
    defaultValue: '{{as2.partnerStationInfo.auth.token.token}}',
  },
  connectionAs2PartnerStationInfoAuthTokenLocation: {
    type: 'radiogroup',
    helpKey: 'connection.as2.partnerStationInfo.auth.token.location',
    name: '/as2/partnerStationInfo/auth/token/location',
    id: 'connectionAs2PartnerStationInfoAuthTokenLocation',
    label: 'As2 partnerStationInfo auth token location',
    defaultValue: '{{as2.partnerStationInfo.auth.token.location}}',
    options: [
      {
        items: [
          { label: 'Url', value: 'url' },
          { label: 'Header', value: 'header' },
          { label: 'Body', value: 'body' },
        ],
      },
    ],
  },
  connectionAs2PartnerStationInfoAuthTokenHeaderName: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.auth.token.headerName',
    name: '/as2/partnerStationInfo/auth/token/headerName',
    id: 'connectionAs2PartnerStationInfoAuthTokenHeaderName',
    label: 'As2 partnerStationInfo auth token headerName',
    defaultValue: '{{as2.partnerStationInfo.auth.token.headerName}}',
  },
  connectionAs2PartnerStationInfoAuthTokenScheme: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.auth.token.scheme',
    name: '/as2/partnerStationInfo/auth/token/scheme',
    id: 'connectionAs2PartnerStationInfoAuthTokenScheme',
    label: 'As2 partnerStationInfo auth token scheme',
    defaultValue: '{{as2.partnerStationInfo.auth.token.scheme}}',
  },
  connectionAs2PartnerStationInfoAuthTokenParamName: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.auth.token.paramName',
    name: '/as2/partnerStationInfo/auth/token/paramName',
    id: 'connectionAs2PartnerStationInfoAuthTokenParamName',
    label: 'As2 partnerStationInfo auth token paramName',
    defaultValue: '{{as2.partnerStationInfo.auth.token.paramName}}',
  },
  connectionAs2PartnerStationInfoAuthTokenRefreshMethod: {
    type: 'radiogroup',
    helpKey: 'connection.as2.partnerStationInfo.auth.token.refreshMethod',
    name: '/as2/partnerStationInfo/auth/token/refreshMethod',
    id: 'connectionAs2PartnerStationInfoAuthTokenRefreshMethod',
    label: 'As2 partnerStationInfo auth token refreshMethod',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshMethod}}',
    options: [
      {
        items: [
          { label: 'GET', value: 'GET' },
          { label: 'POST', value: 'POST' },
        ],
      },
    ],
  },
  connectionAs2PartnerStationInfoAuthTokenRefreshRelativeURI: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.auth.token.refreshRelativeURI',
    name: '/as2/partnerStationInfo/auth/token/refreshRelativeURI',
    id: 'connectionAs2PartnerStationInfoAuthTokenRefreshRelativeURI',
    label: 'As2 partnerStationInfo auth token refreshRelativeURI',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshRelativeURI}}',
  },
  connectionAs2PartnerStationInfoAuthTokenRefreshBody: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.auth.token.refreshBody',
    name: '/as2/partnerStationInfo/auth/token/refreshBody',
    id: 'connectionAs2PartnerStationInfoAuthTokenRefreshBody',
    label: 'As2 partnerStationInfo auth token refreshBody',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshBody}}',
  },
  connectionAs2PartnerStationInfoAuthTokenRefreshTokenPath: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.auth.token.refreshTokenPath',
    name: '/as2/partnerStationInfo/auth/token/refreshTokenPath',
    id: 'connectionAs2PartnerStationInfoAuthTokenRefreshTokenPath',
    label: 'As2 partnerStationInfo auth token refreshTokenPath',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshTokenPath}}',
  },
  connectionAs2PartnerStationInfoAuthTokenRefreshMediaType: {
    type: 'radiogroup',
    helpKey: 'connection.as2.partnerStationInfo.auth.token.refreshMediaType',
    name: '/as2/partnerStationInfo/auth/token/refreshMediaType',
    id: 'connectionAs2PartnerStationInfoAuthTokenRefreshMediaType',
    label: 'As2 partnerStationInfo auth token refreshMediaType',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshMediaType}}',
    options: [
      {
        items: [
          { label: 'Json', value: 'json' },
          { label: 'Urlencoded', value: 'urlencoded' },
          { label: 'Xml', value: 'xml' },
        ],
      },
    ],
  },
  connectionAs2PartnerStationInfoAuthTokenRefreshHeaders: {
    type: 'keyvalue',
    keyName: 'name',
    valueName: 'value',
    valueType: 'keyvalue',
    helpKey: 'connection.as2.partnerStationInfo.auth.token.refreshHeaders',
    name: '/as2/partnerStationInfo/auth/token/refreshHeaders',
    id: 'connectionAs2PartnerStationInfoAuthTokenRefreshHeaders',
    label: 'As2 partnerStationInfo auth token refreshHeaders',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshHeaders}}',
  },
  connectionAs2PartnerStationInfoAuthTokenRefreshToken: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.auth.token.refreshToken',
    name: '/as2/partnerStationInfo/auth/token/refreshToken',
    id: 'connectionAs2PartnerStationInfoAuthTokenRefreshToken',
    label: 'As2 partnerStationInfo auth token refreshToken',
    defaultValue: '{{as2.partnerStationInfo.auth.token.refreshToken}}',
  },
  connectionAs2PartnerStationInfoRateLimitFailStatusCode: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.rateLimit.failStatusCode',
    name: '/as2/partnerStationInfo/rateLimit/failStatusCode',
    id: 'connectionAs2PartnerStationInfoRateLimitFailStatusCode',
    label: 'As2 partnerStationInfo rateLimit failStatusCode',
    defaultValue: '{{as2.partnerStationInfo.rateLimit.failStatusCode}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionAs2PartnerStationInfoRateLimitFailPath: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.rateLimit.failPath',
    name: '/as2/partnerStationInfo/rateLimit/failPath',
    id: 'connectionAs2PartnerStationInfoRateLimitFailPath',
    label: 'As2 partnerStationInfo rateLimit failPath',
    defaultValue: '{{as2.partnerStationInfo.rateLimit.failPath}}',
  },
  connectionAs2PartnerStationInfoRateLimitFailValuess: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'connection.as2.partnerStationInfo.rateLimit.failValuess',
    name: '/as2/partnerStationInfo/rateLimit/failValuess',
    id: 'connectionAs2PartnerStationInfoRateLimitFailValuess',
    label: 'As2 partnerStationInfo rateLimit failValues',
    defaultValue: '{{as2.partnerStationInfo.rateLimit.failValues}}',
    validWhen: [],
  },
  connectionAs2PartnerStationInfoRateLimitLimit: {
    type: 'text',
    helpKey: 'connection.as2.partnerStationInfo.rateLimit.limit',
    name: '/as2/partnerStationInfo/rateLimit/limit',
    id: 'connectionAs2PartnerStationInfoRateLimitLimit',
    label: 'As2 partnerStationInfo rateLimit limit',
    defaultValue: '{{as2.partnerStationInfo.rateLimit.limit}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
      {
        fallsWithinNumericalRange: {
          message:
            'The value must be greater than undefined and  lesser than undefined',
        },
      },
    ],
  },
  connectionAs2PartnerStationInfoSMIMEVersion: {
    type: 'radiogroup',
    helpKey: 'connection.as2.partnerStationInfo.SMIMEVersion',
    name: '/as2/partnerStationInfo/SMIMEVersion',
    id: 'connectionAs2PartnerStationInfoSMIMEVersion',
    label: 'As2 partnerStationInfo SMIMEVersion',
    defaultValue: '{{as2.partnerStationInfo.SMIMEVersion}}',
    options: [
      { items: [{ label: 'V2', value: 'v2' }, { label: 'V3', value: 'v3' }] },
    ],
  },
  connectionAs2PartnerStationInfoEncryptionType: {
    type: 'radiogroup',
    helpKey: 'connection.as2.partnerStationInfo.encryptionType',
    name: '/as2/partnerStationInfo/encryptionType',
    id: 'connectionAs2PartnerStationInfoEncryptionType',
    label: 'As2 partnerStationInfo encryptionType',
    defaultValue: '{{as2.partnerStationInfo.encryptionType}}',
    options: [
      {
        items: [
          { label: 'NONE', value: 'NONE' },
          { label: 'DES', value: 'DES' },
          { label: 'RC2', value: 'RC2' },
          { label: '3DES', value: '3DES' },
          { label: 'AES128', value: 'AES128' },
          { label: 'AES256', value: 'AES256' },
        ],
      },
    ],
  },
  connectionAs2PartnerStationInfoSigning: {
    type: 'radiogroup',
    helpKey: 'connection.as2.partnerStationInfo.signing',
    name: '/as2/partnerStationInfo/signing',
    id: 'connectionAs2PartnerStationInfoSigning',
    label: 'As2 partnerStationInfo signing',
    defaultValue: '{{as2.partnerStationInfo.signing}}',
    options: [
      {
        items: [
          { label: 'NONE', value: 'NONE' },
          { label: 'SHA1', value: 'SHA1' },
          { label: 'MD5', value: 'MD5' },
          { label: 'SHA256', value: 'SHA256' },
        ],
      },
    ],
  },
  connectionAs2PartnerStationInfoEncoding: {
    type: 'radiogroup',
    helpKey: 'connection.as2.partnerStationInfo.encoding',
    name: '/as2/partnerStationInfo/encoding',
    id: 'connectionAs2PartnerStationInfoEncoding',
    label: 'As2 partnerStationInfo encoding',
    defaultValue: '{{as2.partnerStationInfo.encoding}}',
    options: [
      {
        items: [
          { label: 'Base64', value: 'base64' },
          { label: 'Binary', value: 'binary' },
        ],
      },
    ],
  },
  connectionAs2UserStationInfoMdnMdnURL: {
    type: 'text',
    helpKey: 'connection.as2.userStationInfo.mdn.mdnURL',
    name: '/as2/userStationInfo/mdn/mdnURL',
    id: 'connectionAs2UserStationInfoMdnMdnURL',
    label: 'As2 userStationInfo mdn mdnURL',
    defaultValue: '{{as2.userStationInfo.mdn.mdnURL}}',
  },
  connectionAs2UserStationInfoMdnSignatureProtocol: {
    type: 'radiogroup',
    helpKey: 'connection.as2.userStationInfo.mdn.signatureProtocol',
    name: '/as2/userStationInfo/mdn/signatureProtocol',
    id: 'connectionAs2UserStationInfoMdnSignatureProtocol',
    label: 'As2 userStationInfo mdn signatureProtocol',
    defaultValue: '{{as2.userStationInfo.mdn.signatureProtocol}}',
    options: [
      { items: [{ label: 'Pkcs7-signature', value: 'pkcs7-signature' }] },
    ],
  },
  connectionAs2UserStationInfoMdnMdnSigning: {
    type: 'radiogroup',
    helpKey: 'connection.as2.userStationInfo.mdn.mdnSigning',
    name: '/as2/userStationInfo/mdn/mdnSigning',
    id: 'connectionAs2UserStationInfoMdnMdnSigning',
    label: 'As2 userStationInfo mdn mdnSigning',
    defaultValue: '{{as2.userStationInfo.mdn.mdnSigning}}',
    options: [
      {
        items: [
          { label: 'NONE', value: 'NONE' },
          { label: 'SHA1', value: 'SHA1' },
          { label: 'MD5', value: 'MD5' },
          { label: 'SHA256', value: 'SHA256' },
        ],
      },
    ],
  },
  connectionAs2UserStationInfoEncryptionType: {
    type: 'radiogroup',
    helpKey: 'connection.as2.userStationInfo.encryptionType',
    name: '/as2/userStationInfo/encryptionType',
    id: 'connectionAs2UserStationInfoEncryptionType',
    label: 'As2 userStationInfo encryptionType',
    defaultValue: '{{as2.userStationInfo.encryptionType}}',
    options: [
      {
        items: [
          { label: 'NONE', value: 'NONE' },
          { label: 'DES', value: 'DES' },
          { label: 'RC2', value: 'RC2' },
          { label: '3DES', value: '3DES' },
          { label: 'AES128', value: 'AES128' },
          { label: 'AES256', value: 'AES256' },
        ],
      },
    ],
  },
  connectionAs2UserStationInfoSigning: {
    type: 'radiogroup',
    helpKey: 'connection.as2.userStationInfo.signing',
    name: '/as2/userStationInfo/signing',
    id: 'connectionAs2UserStationInfoSigning',
    label: 'As2 userStationInfo signing',
    defaultValue: '{{as2.userStationInfo.signing}}',
    options: [
      {
        items: [
          { label: 'NONE', value: 'NONE' },
          { label: 'SHA1', value: 'SHA1' },
          { label: 'MD5', value: 'MD5' },
          { label: 'SHA256', value: 'SHA256' },
        ],
      },
    ],
  },
  connectionAs2UserStationInfoEncoding: {
    type: 'radiogroup',
    helpKey: 'connection.as2.userStationInfo.encoding',
    name: '/as2/userStationInfo/encoding',
    id: 'connectionAs2UserStationInfoEncoding',
    label: 'As2 userStationInfo encoding',
    defaultValue: '{{as2.userStationInfo.encoding}}',
    options: [
      {
        items: [
          { label: 'Base64', value: 'base64' },
          { label: 'Binary', value: 'binary' },
        ],
      },
    ],
  },
  connectionAs2Encrypted: {
    type: 'text',
    helpKey: 'connection.as2.encrypted',
    name: '/as2/encrypted',
    id: 'connectionAs2Encrypted',
    label: 'As2 encrypted',
    defaultValue: '{{as2.encrypted}}',
  },
  connectionAs2ConcurrencyLevel: {
    type: 'text',
    helpKey: 'connection.as2.concurrencyLevel',
    name: '/as2/concurrencyLevel',
    id: 'connectionAs2ConcurrencyLevel',
    label: 'As2 concurrencyLevel',
    defaultValue: '{{as2.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionAs2Unencrypted: {
    type: 'text',
    helpKey: 'connection.as2.unencrypted',
    name: '/as2/unencrypted',
    id: 'connectionAs2Unencrypted',
    label: 'As2 unencrypted',
    defaultValue: '{{as2.unencrypted}}',
  },
  connectionAs2Encrypteds: {
    type: 'editor',
    valueType: 'editorExpression',
    helpKey: 'connection.as2.encrypteds',
    name: '/as2/encrypteds',
    id: 'connectionAs2Encrypteds',
    label: 'As2 encrypted',
    defaultValue: '{{as2.encrypted}}',
  },
  // #endregion as2
  // #region netsuite
  connectionNetsuiteAccount: {
    type: 'text',
    helpKey: 'connection.netsuite.account',
    name: '/netsuite/account',
    id: 'connectionNetsuiteAccount',
    label: 'Netsuite account',
    defaultValue: '{{netsuite.account}}',
  },
  connectionNetsuiteTokenId: {
    type: 'text',
    helpKey: 'connection.netsuite.tokenId',
    name: '/netsuite/tokenId',
    id: 'connectionNetsuiteTokenId',
    label: 'Netsuite tokenId',
    defaultValue: '{{netsuite.tokenId}}',
  },
  connectionNetsuiteTokenSecret: {
    type: 'text',
    helpKey: 'connection.netsuite.tokenSecret',
    name: '/netsuite/tokenSecret',
    id: 'connectionNetsuiteTokenSecret',
    label: 'Netsuite tokenSecret',
    defaultValue: '{{netsuite.tokenSecret}}',
  },
  connectionNetsuiteEnvironment: {
    type: 'radiogroup',
    helpKey: 'connection.netsuite.environment',
    name: '/netsuite/environment',
    id: 'connectionNetsuiteEnvironment',
    label: 'Netsuite environment',
    defaultValue: '{{netsuite.environment}}',
    options: [
      {
        items: [
          { label: 'Production', value: 'production' },
          { label: 'Sandbox', value: 'sandbox' },
          { label: 'Beta', value: 'beta' },
          { label: 'Sandbox2.0', value: 'sandbox2.0' },
        ],
      },
    ],
  },
  connectionNetsuiteRoleId: {
    type: 'text',
    helpKey: 'connection.netsuite.roleId',
    name: '/netsuite/roleId',
    id: 'connectionNetsuiteRoleId',
    label: 'Netsuite roleId',
    defaultValue: '{{netsuite.roleId}}',
  },
  connectionNetsuiteEmail: {
    type: 'text',
    helpKey: 'connection.netsuite.email',
    name: '/netsuite/email',
    id: 'connectionNetsuiteEmail',
    label: 'Netsuite email',
    defaultValue: '{{netsuite.email}}',
  },
  connectionNetsuitePassword: {
    type: 'text',
    helpKey: 'connection.netsuite.password',
    name: '/netsuite/password',
    id: 'connectionNetsuitePassword',
    label: 'Netsuite password',
    defaultValue: '{{netsuite.password}}',
  },
  connectionNetsuiteRequestLevelCredentials: {
    type: 'checkbox',
    helpKey: 'connection.netsuite.requestLevelCredentials',
    name: '/netsuite/requestLevelCredentials',
    id: 'connectionNetsuiteRequestLevelCredentials',
    label: 'Netsuite requestLevelCredentials',
    defaultValue: false,
  },
  connectionNetsuiteDataCenterURLs: {
    type: 'text',
    helpKey: 'connection.netsuite.dataCenterURLs',
    name: '/netsuite/dataCenterURLs',
    id: 'connectionNetsuiteDataCenterURLs',
    label: 'Netsuite dataCenterURLs',
    defaultValue: '{{netsuite.dataCenterURLs}}',
  },
  connectionNetsuiteAccountName: {
    type: 'text',
    helpKey: 'connection.netsuite.accountName',
    name: '/netsuite/accountName',
    id: 'connectionNetsuiteAccountName',
    label: 'Netsuite accountName',
    defaultValue: '{{netsuite.accountName}}',
  },
  connectionNetsuiteRoleName: {
    type: 'text',
    helpKey: 'connection.netsuite.roleName',
    name: '/netsuite/roleName',
    id: 'connectionNetsuiteRoleName',
    label: 'Netsuite roleName',
    defaultValue: '{{netsuite.roleName}}',
  },
  connectionNetsuiteConcurrencyLevelRESTlet: {
    type: 'text',
    helpKey: 'connection.netsuite.concurrencyLevelRESTlet',
    name: '/netsuite/concurrencyLevelRESTlet',
    id: 'connectionNetsuiteConcurrencyLevelRESTlet',
    label: 'Netsuite concurrencyLevelRESTlet',
    defaultValue: '{{netsuite.concurrencyLevelRESTlet}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionNetsuiteConcurrencyLevelWebServices: {
    type: 'text',
    helpKey: 'connection.netsuite.concurrencyLevelWebServices',
    name: '/netsuite/concurrencyLevelWebServices',
    id: 'connectionNetsuiteConcurrencyLevelWebServices',
    label: 'Netsuite concurrencyLevelWebServices',
    defaultValue: '{{netsuite.concurrencyLevelWebServices}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionNetsuiteConcurrencyLevel: {
    type: 'text',
    helpKey: 'connection.netsuite.concurrencyLevel',
    name: '/netsuite/concurrencyLevel',
    id: 'connectionNetsuiteConcurrencyLevel',
    label: 'Netsuite concurrencyLevel',
    defaultValue: '{{netsuite.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  connectionNetsuiteWsdlVersion: {
    type: 'radiogroup',
    helpKey: 'connection.netsuite.wsdlVersion',
    name: '/netsuite/wsdlVersion',
    id: 'connectionNetsuiteWsdlVersion',
    label: 'Netsuite wsdlVersion',
    defaultValue: '{{netsuite.wsdlVersion}}',
    options: [
      {
        items: [
          { label: 'Current', value: 'current' },
          { label: 'Next', value: 'next' },
        ],
      },
    ],
  },
  connectionNetsuiteApplicationId: {
    type: 'text',
    helpKey: 'connection.netsuite.applicationId',
    name: '/netsuite/applicationId',
    id: 'connectionNetsuiteApplicationId',
    label: 'Netsuite applicationId',
    defaultValue: '{{netsuite.applicationId}}',
  },
  // #endregion netsuite
  // #region netSuiteDistributedAdaptor
  connectionNetSuiteDistributedAdaptorAccountId: {
    type: 'text',
    helpKey: 'connection.netSuiteDistributedAdaptor.accountId',
    name: '/netSuiteDistributedAdaptor/accountId',
    id: 'connectionNetSuiteDistributedAdaptorAccountId',
    label: 'NetSuiteDistributedAdaptor accountId',
    defaultValue: '{{netSuiteDistributedAdaptor.accountId}}',
  },
  connectionNetSuiteDistributedAdaptorEnvironment: {
    type: 'radiogroup',
    helpKey: 'connection.netSuiteDistributedAdaptor.environment',
    name: '/netSuiteDistributedAdaptor/environment',
    id: 'connectionNetSuiteDistributedAdaptorEnvironment',
    label: 'NetSuiteDistributedAdaptor environment',
    defaultValue: '{{netSuiteDistributedAdaptor.environment}}',
    options: [
      {
        items: [
          { label: 'Production', value: 'production' },
          { label: 'Sandbox', value: 'sandbox' },
          { label: 'Beta', value: 'beta' },
          { label: 'Sandbox2.0', value: 'sandbox2.0' },
        ],
      },
    ],
  },
  connectionNetSuiteDistributedAdaptorConnectionId: {
    type: 'text',
    helpKey: 'connection.netSuiteDistributedAdaptor.connectionId',
    name: '/netSuiteDistributedAdaptor/connectionId',
    id: 'connectionNetSuiteDistributedAdaptorConnectionId',
    label: 'NetSuiteDistributedAdaptor connectionId',
    defaultValue: '{{netSuiteDistributedAdaptor.connectionId}}',
  },
  connectionNetSuiteDistributedAdaptorUsername: {
    type: 'text',
    helpKey: 'connection.netSuiteDistributedAdaptor.username',
    name: '/netSuiteDistributedAdaptor/username',
    id: 'connectionNetSuiteDistributedAdaptorUsername',
    label: 'NetSuiteDistributedAdaptor username',
    defaultValue: '{{netSuiteDistributedAdaptor.username}}',
  },
  connectionNetSuiteDistributedAdaptorUri: {
    type: 'text',
    helpKey: 'connection.netSuiteDistributedAdaptor.uri',
    name: '/netSuiteDistributedAdaptor/uri',
    id: 'connectionNetSuiteDistributedAdaptorUri',
    label: 'NetSuiteDistributedAdaptor uri',
    defaultValue: '{{netSuiteDistributedAdaptor.uri}}',
  },
  // #endregion netSuiteDistributedAdaptor
  // #region salesforce
  connectionSalesforceSandbox: {
    type: 'checkbox',
    helpKey: 'connection.salesforce.sandbox',
    name: '/salesforce/sandbox',
    id: 'connectionSalesforceSandbox',
    label: 'Salesforce sandbox',
    defaultValue: false,
  },
  connectionSalesforceBaseURI: {
    type: 'text',
    helpKey: 'connection.salesforce.baseURI',
    name: '/salesforce/baseURI',
    id: 'connectionSalesforceBaseURI',
    label: 'Salesforce baseURI',
    defaultValue: '{{salesforce.baseURI}}',
  },
  connectionSalesforceOauth2FlowType: {
    type: 'radiogroup',
    helpKey: 'connection.salesforce.oauth2FlowType',
    name: '/salesforce/oauth2FlowType',
    id: 'connectionSalesforceOauth2FlowType',
    label: 'Salesforce oauth2FlowType',
    defaultValue: '{{salesforce.oauth2FlowType}}',
    options: [
      {
        items: [
          { label: 'JwtBearerToken', value: 'jwtBearerToken' },
          { label: 'RefreshToken', value: 'refreshToken' },
        ],
      },
    ],
  },
  connectionSalesforceUsername: {
    type: 'text',
    helpKey: 'connection.salesforce.username',
    name: '/salesforce/username',
    id: 'connectionSalesforceUsername',
    label: 'Salesforce username',
    defaultValue: '{{salesforce.username}}',
  },
  connectionSalesforceBearerToken: {
    type: 'text',
    helpKey: 'connection.salesforce.bearerToken',
    name: '/salesforce/bearerToken',
    id: 'connectionSalesforceBearerToken',
    label: 'Salesforce bearerToken',
    defaultValue: '{{salesforce.bearerToken}}',
  },
  connectionSalesforceRefreshToken: {
    type: 'text',
    helpKey: 'connection.salesforce.refreshToken',
    name: '/salesforce/refreshToken',
    id: 'connectionSalesforceRefreshToken',
    label: 'Salesforce refreshToken',
    defaultValue: '{{salesforce.refreshToken}}',
  },
  connectionSalesforcePackagedOAuth: {
    type: 'checkbox',
    helpKey: 'connection.salesforce.packagedOAuth',
    name: '/salesforce/packagedOAuth',
    id: 'connectionSalesforcePackagedOAuth',
    label: 'Salesforce packagedOAuth',
    defaultValue: false,
  },
  connectionSalesforceScopes: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'connection.salesforce.scopes',
    name: '/salesforce/scopes',
    id: 'connectionSalesforceScopes',
    label: 'Salesforce scope',
    defaultValue: '{{salesforce.scope}}',
    validWhen: [],
  },
  connectionSalesforceInfo: {
    type: 'text',
    helpKey: 'connection.salesforce.info',
    name: '/salesforce/info',
    id: 'connectionSalesforceInfo',
    label: 'Salesforce info',
    defaultValue: '{{salesforce.info}}',
  },
  connectionSalesforceConcurrencyLevel: {
    type: 'text',
    helpKey: 'connection.salesforce.concurrencyLevel',
    name: '/salesforce/concurrencyLevel',
    id: 'connectionSalesforceConcurrencyLevel',
    label: 'Salesforce concurrencyLevel',
    defaultValue: '{{salesforce.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  // #endregion salesforce
  // #region wrapper
  connectionWrapperUnencrypted: {
    type: 'text',
    helpKey: 'connection.wrapper.unencrypted',
    name: '/wrapper/unencrypted',
    id: 'connectionWrapperUnencrypted',
    label: 'Wrapper unencrypted',
    defaultValue: '{{wrapper.unencrypted}}',
  },
  connectionWrapperUnencrypteds: {
    type: 'editor',
    valueType: 'editorExpression',
    helpKey: 'connection.wrapper.unencrypteds',
    name: '/wrapper/unencrypteds',
    id: 'connectionWrapperUnencrypteds',
    label: 'Wrapper unencrypted',
    defaultValue: '{{wrapper.unencrypted}}',
  },
  connectionWrapperEncrypted: {
    type: 'text',
    helpKey: 'connection.wrapper.encrypted',
    name: '/wrapper/encrypted',
    id: 'connectionWrapperEncrypted',
    label: 'Wrapper encrypted',
    defaultValue: '{{wrapper.encrypted}}',
  },
  connectionWrapperEncrypteds: {
    type: 'editor',
    valueType: 'editorExpression',
    helpKey: 'connection.wrapper.encrypteds',
    name: '/wrapper/encrypteds',
    id: 'connectionWrapperEncrypteds',
    label: 'Wrapper encrypted',
    defaultValue: '{{wrapper.encrypted}}',
  },
  connectionWrapperPingFunction: {
    type: 'text',
    helpKey: 'connection.wrapper.pingFunction',
    name: '/wrapper/pingFunction',
    id: 'connectionWrapperPingFunction',
    label: 'Wrapper pingFunction',
    defaultValue: '{{wrapper.pingFunction}}',
  },
  connectionWrapper_stackId: {
    type: 'text',
    helpKey: 'connection.wrapper._stackId',
    name: '/wrapper/_stackId',
    id: 'connectionWrapper_stackId',
    label: 'Wrapper _stackId',
    defaultValue: '{{wrapper._stackId}}',
  },
  connectionWrapperConcurrencyLevel: {
    type: 'text',
    helpKey: 'connection.wrapper.concurrencyLevel',
    name: '/wrapper/concurrencyLevel',
    id: 'connectionWrapperConcurrencyLevel',
    label: 'Wrapper concurrencyLevel',
    defaultValue: '{{wrapper.concurrencyLevel}}',
    validWhen: [
      {
        matchesRegEx: { pattern: '^[\\d]+$', message: 'Only numbers allowed' },
      },
    ],
  },
  // #endregion wrapper
  // #region mongodb
  connectionMongodbHosts: {
    type: 'text',
    keyName: 'name',
    valueName: 'value',
    valueType: 'array',
    helpKey: 'connection.mongodb.hosts',
    name: '/mongodb/hosts',
    id: 'connectionMongodbHosts',
    label: 'Mongodb host',
    defaultValue: '{{mongodb.host}}',
    validWhen: [],
  },
  connectionMongodbDatabase: {
    type: 'text',
    helpKey: 'connection.mongodb.database',
    name: '/mongodb/database',
    id: 'connectionMongodbDatabase',
    label: 'Mongodb database',
    defaultValue: '{{mongodb.database}}',
  },
  connectionMongodbUsername: {
    type: 'text',
    helpKey: 'connection.mongodb.username',
    name: '/mongodb/username',
    id: 'connectionMongodbUsername',
    label: 'Mongodb username',
    defaultValue: '{{mongodb.username}}',
  },
  connectionMongodbPassword: {
    type: 'text',
    helpKey: 'connection.mongodb.password',
    name: '/mongodb/password',
    id: 'connectionMongodbPassword',
    label: 'Mongodb password',
    defaultValue: '{{mongodb.password}}',
  },
  connectionMongodbReplicaSet: {
    type: 'text',
    helpKey: 'connection.mongodb.replicaSet',
    name: '/mongodb/replicaSet',
    id: 'connectionMongodbReplicaSet',
    label: 'Mongodb replicaSet',
    defaultValue: '{{mongodb.replicaSet}}',
  },
  // #endregion mongodb
};
